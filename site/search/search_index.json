{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Colin's Notebook https://notes.valderfield.com https://github.com/Co1lin/notes This is my personal notebook, in which I will record some CS related things. Since I can't find a satisfying notebook project which supports online editing and managing on web, and also using Markdown, now I use code-server to edit and this MkDocs project to publish. The files are also availiable on GitHub , so you can pull requests.","title":"Welcome to Colin's Notebook"},{"location":"#welcome-to-colins-notebook","text":"https://notes.valderfield.com https://github.com/Co1lin/notes This is my personal notebook, in which I will record some CS related things. Since I can't find a satisfying notebook project which supports online editing and managing on web, and also using Markdown, now I use code-server to edit and this MkDocs project to publish. The files are also availiable on GitHub , so you can pull requests.","title":"Welcome to Colin's Notebook"},{"location":"C%2B%2B/oop/","text":"OOP Notes for exam \u57fa\u672c\u5199\u6cd5 makefile \u5e38\u89c4\u7248\uff1a all: test # \u53ea\u8f93\u5165make\u5b83\u5c31\u627e\u7b2c\u4e00\u4e2a test: product.o sum.o main.o functions.h g++ product.o sum.o main.o -o test # specify the name of the output product.o: product.cpp functions.h g++ -c product.cpp -o product.o # -c\u8868\u793a\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5 sum.o: sum.cpp functions.h g++ -c sum.cpp -o sum.o main.o: main.cpp functions.h g++ -c main.cpp -o main.o clean: # clean\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u4f9d\u8d56\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6240\u4ee5\u9700\u8981make clean rm *.o test \u6bd4\u8f83\u901a\u7528\u7684\u7248\u672c\uff1a #################################### # Learnt from Internet # Edited by Colin # 2020.02 #################################### cc = g++ FLAG = CXXFLAGS = -O2 --std=c++17 prom = main deps = $(shell find . -maxdepth 1 -name \"*.h\") src = $(shell find . -maxdepth 1 -name \"*.cpp\") obj = $(src:%.cpp=%.o) $(prom): $(obj) $(cc) -o $(prom) $(obj) %.o: %.cpp $(deps) $(cc) $(CXXFLAGS) $(FLAG) -c $< -o $@ # $< \u6307\u4ee3\uff08\u5192\u53f7\u540e\uff09\u7b2c\u4e00\u4e2a\u524d\u7f6e\u6761\u4ef6\uff0c\u8fd9\u91cc\u662f.cpp # $@\u6307\u4ee3\u5f53\u524d\u76ee\u6807\uff0c\u8fd9\u91cc\u5c31\u662f.o .PHONY: clean # \u4f2a\u76ee\u6807\uff0c\u907f\u514d\u6709\u4e2a\u6587\u4ef6\u53eb\u505aclean clean: rm -rf $(prom) $(obj) \u7a0b\u5e8f\u547d\u4ee4\u884c\u53c2\u6570 argv \u4f8b\u5b50 int main(int argc, char** argv) { int a, b; a = atoi(argv[1]); b = atoi(argv[2]); std::cout << a + b << std::endl; return 0; } argc\u662f\u53c2\u6570\u7684\u6570\u91cf\uff0c\u7b97\u4e0a\u7a0b\u5e8f\u540dargv[0]\u3002\u904d\u5386argc\u65f6\u6709\u7528\uff0c\u56e0\u4e3aargc\u4e0d\u597d\u77e5\u9053\u6709\u51e0\u4e2a\u3002 argv\u662f\u53c2\u6570\u3002\u7b2cn\u4e2a\u53c2\u6570\u4e3aargv[n]\u3002 gdb\u8c03\u8bd5 g++ -g a.cpp \u2013o a.out\u7f16\u8bd1\u7a0b\u5e8f gdb a.out \u8c03\u8bd5a.out\u7a0b\u5e8f run \u8fd0\u884c\u7a0b\u5e8f break + \u884c\u53f7 \u8bbe\u7f6e\u65ad\u70b9 break 10 if (k==2) \u53ef\u6839\u636e\u5177\u4f53\u8fd0\u884c\u6761\u4ef6\u65ad\u70b9 delete break 1 \u5220\u96641\u53f7\u65ad\u70b9 watch x \u5f53x\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u6682\u505c continue \u8df3\u81f3\u4e0b\u4e00\u4e2a\u65ad\u70b9 step \u5355\u6b65\u6267\u884c(\u8fdb\u5165) next \u5355\u6b65\u6267\u884c(\u4e0d\u8fdb\u5165) print x \u8f93\u51fa\u53d8\u91cf/\u8868\u8fbe\u5f0fx GDB\u4e2d\u8f93\u5165 p x=1\uff0c\u7a0b\u5e8f\u4e2dx\u7684\u503c\u4f1a\u88ab\u624b\u52a8\u4fee\u6539\u4e3a1 display x \u6301\u7eed\u76d1\u6d4b\u53d8\u91cf/\u8868\u8fbe\u5f0fx list \u5217\u51fa\u7a0b\u5e8f\u6e90\u4ee3\u7801 quit \u9000\u51fa \u56de\u8f66 \u91cd\u590d\u4e0a\u4e00\u6761\u6307\u4ee4 info break\u770b\u65ad\u70b9\u4fe1\u606f Disp \u5217\u4ee3\u8868\u65ad\u70b9\u88ab\u547d\u4e2d\u540e\uff0c\u8be5\u65ad\u70b9\u4fdd\u7559(keep)\u3001\u5220\u9664(del)\u8fd8\u662f\u5173\u95ed(dis) https://zhuanlan.zhihu.com/p/29468840 \u51fd\u6570\u91cd\u8f7d overload \u540c\u540d\u3001 \u53c2\u6570\u5fc5\u987b\u4e0d\u540c \u3002\u4f5c\u7528\u57df\u76f8\u540c\u3002\u8fd4\u56de\u503c\u53ef\u76f8\u540c\u4e5f\u53ef\u4e0d\u540c\u3002 \u6839\u636e\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u9645\u53c2\u6570\u51b3\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528 \u3002 \u5c5e\u4e8e\u9759\u6001\u591a\u6001\u3002\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u3002 \u5185\u7f6e\u7c7b\u578b\u8f6c\u6362\uff1a\u5f53\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u7c7b\u578b\u5339\u914d\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u5426\u5219\u624d\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 auto \u51fd\u6570\u53c2\u6570\u4e0d\u80fd\u662fauto\u7c7b\u578b\u3002 \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570 \u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u58f0\u660e\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e auto func(char* ptr, int val) -> int; decltype \u7c7b\u578b\u63a8\u5bfc\u3002 decltype(a) \u66f4\u9ad8\u7ea7\u7684\u8fd4\u56de\u503c\u63a8\u5bfc\u7528\u6cd5 https://github.com/thu-coai/THUOOP/issues/24 // \u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u7684\u9000\u5316\u7248\u672c int a = 3; int& b = a; double c = 3.14; decay_t< decltype(b) >; // int // \u5f97\u5230\u201c\u66f4\u901a\u7528\u7248\u672c\u201d common_type_t< decltype(b) >; // int; \u4e00\u4e2a\u5c31\u76f4\u63a5\u9000\u5316 common_type_t< decltype(b), decltype(c) >; // double \u4f8b\u5b50\uff1a // max \u51fd\u6570 template<typename T1, typename T2> std::common_type_t<T1, T2> max(T1 a, T2 b) { return b < a ? a : b; } // \u8fd4\u56de\u5bb9\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u503c template <class A> auto work2(const A& _array) -> common_type_t< decltype(_array.front()) > { return _array.front(); } // \u4eff\u7167\u6b64\u65b9\u6cd5\u53ef\u4ee5\u628a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5305\u88c5\u8fdb\u6a21\u677f\u7c7b\u518d\u8fd4\u56de template <class A> auto work2(const A& _array) -> MyArray < common_type_t< decltype(_array.front()) > > { /* ... */ } new & delete delete[] array \u8be6\u7ec6\u8fc7\u7a0b\u89c1PPT L5 P42 \u907f\u514d\u91cd\u590d\u5305\u542b\u5934\u6587\u4ef6 #ifndef MATRIX_H #define MATRIX_H #endif operator< bool operator< (const Computer& _y) { } operator++ \u524d\u7f00\uff1a\u76f4\u63a5++ Test& operator++ () { ++data; return *this; // \u8fd4\u56de\u81ea\u8eab } \u540e\u7f00\uff1a\u54d1\u5143\u53c2\u6570int \u5148\u6784\u9020\u4e00\u4e2a\u539f\u6765\u7684\uff0c\u8fd4\u56de++\u4e4b\u524d\u7684\u3002 Test operator++(int) { Test test(data); ++data; return test; } operator[] \u53ef\u7528\u4e8e\u201c\u5b57\u5178\u201d/map\u3002 \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u662f\u5f15\u7528\uff0c\u5219\u6570\u7ec4\u8fd0\u7b97\u7b26\u8c03\u7528\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u5de6\u8fb9\uff0c\u63a5\u53d7\u8d4b\u503c\uff0c\u5373 Obj[index] = value; \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9 Var = Obj[index]; char week_name[7][4] = { \"mon\", \"tu\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\"}; class WeekTemp { int temp[7]; public: int& operator[] (const char* name) // \u5b57\u7b26\u4e32\u4f5c\u4e0b\u6807 { for (int i = 0; i < 7; i++) { if (strcmp(week_name[i], name) == 0) return temp[i]; } } }; operator<< \u4e3a\u4ec0\u4e48\u91cd\u8f7d\u6d41\u8fd0\u7b97\u7b26\u8981\u8fd4\u56de\u5f15\u7528\uff1f\u907f\u514d\u590d\u5236\u3002 friend istream& operator>> (istream& in, Test& dst) { in >> dst.id; return in; } friend ostream& operator<< (ostream& out, const Test& src) { out << src.id << endl; return out; } cin >> obj; cout << obj << endl; \u9700\u8981\u4f7f\u7528\u53cb\u5143\u51fd\u6570 \u3002\u56e0\u4e3a\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u53c2\u6570this\u3002\u800c\u6d41\u64cd\u4f5c\u7b26\u5de6\u8fb9\u5fc5\u987b\u662f\u6d41\u7c7b\u578b\u3002\u53cb\u5143\u51fd\u6570\u5c31\u6ca1\u6709\u90a3\u4e2athis\uff0c\u6ee1\u8db3\u4e86\u8981\u6c42\u3002 \u53cb\u5143\u4e0e\u53cb\u5143\u7c7b \u53cb\u5143\u4e0d\u7ee7\u627f\uff01 class Y {}; // Y\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 class A { int data; // \u79c1\u6709\u6570\u636e\u6210\u5458 enum { a = 100 }; // \u79c1\u6709\u679a\u4e3e\u9879 friend class X; // \u53cb\u5143\u7c7b\u524d\u7f6e\u58f0\u660e\uff08\u8be6\u7ec6\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 friend Y; // \u53cb\u5143\u7c7b\u58f0\u660e\uff08\u7b80\u5355\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 (C++11\u8d77) }; class X {}; // X\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 \u9759\u6001 static \u9759\u6001\u53d8\u91cf\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u53d8\u91cf \u5b9a\u4e49\u793a\u4f8b\uff1astatic int i = 1; \u521d\u59cb\u5316\uff1a\u521d\u6b21\u5b9a\u4e49\u65f6\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5982\u679c\u5b9a\u4e49\u65f6\u4e0d\u521d\u59cb\u5316\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a0 \u9759\u6001\u5c40\u90e8\u53d8\u91cf \u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u5c06\u6301\u7eed\u5230 \u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f \u9759\u6001\u5168\u5c40\u53d8\u91cf \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c \u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u51b2\u7a81 \u9759\u6001\u51fd\u6570\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u51fd\u6570 \u5b9a\u4e49\u793a\u4f8b\uff1astatic int func() {\u2026} \u9759\u6001\u51fd\u6570 \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u51b2\u7a81 \u9759\u6001\u6570\u636e\u6210\u5458\uff08\u9759\u6001\u6210\u5458\u53d8\u91cf\uff09\uff08\u201c\u7c7b\u53d8\u91cf\u201d\uff09 \u5c5e\u4e8e\u6574\u4e2a\u7c7b\uff1b\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5df2\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u9759\u6001\u6570\u636e\u6210\u5458\u5e94\u8be5\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\uff0c\u5728.cpp\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u5728.h\u6587\u4ef6\u4e2d\u540c\u65f6\u5b8c\u6210\u58f0\u660e\u548c\u5b9a\u4e49\uff0c\u94fe\u63a5\u5c06\u65e0\u6cd5\u8fdb\u884c\u3002\u56e0\u4e3a\u53ef\u80fd\u5934\u6587\u4ef6\u88ab\u5305\u542b\u4e86\u591a\u6b21\uff0c\u4ece\u800c\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u3002 test.h\uff1a class Test { public: static int count; //\u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458\uff1b\u5bf9\u7c7b\u5b9e\u4f8b\u8ba1\u6570\u7528 Test(); ~Test(); }; test.cpp\uff1a #include \u201cTest.h\u201d int Test::count = 0; //\u5b9a\u4e49\u9759\u6001\u6570\u636e\u6210\u5458\uff08\u8981\u52a0\u4e0a\u7c7b\u578b\uff09 Test::Test() { count ++; } Test::~Test() { count --; } main.cpp\uff1a #include <iostream> #include \u201cTest.h\u201d using namespace std; int main() { Test t1[10]; cout << \u201cTest#: \u201d << Test::count << \u201c or \u201d << t1[0].count << endl; //\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458 } \u9759\u6001\u6210\u5458\u51fd\u6570 \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\uff0c\u5426\u5219\u76f8\u5f53\u4e8e\u4f7f\u7528\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf static int how_many() { return count; } cout << Test::how_many() << endl; \u5f15\u7528 \u5f15\u7528\u4f20\u53c2\u4e0d\u6784\u9020\u4e5f\u4e0d\u6790\u6784 \u7c7b\u6210\u5458\u91cc\u6709\u6307\u9488\u65f6\u6700\u597d\u8fd9\u6837\uff0c\u907f\u514d\u51fd\u6570\u7ed3\u675f\u65f6delete\u4e86\u5f62\u53c2\u91cc\u7684\u6307\u9488\u3002 \u5f15\u7528\u4e0d\u80fd\u6539\u6307\u5411 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u53c2\u6570\u662f\u8bed\u8a00\u89c4\u5b9a\u7684\uff0c\u662f\u540c\u7c7b\u5bf9\u8c61\u7684\u5e38\u91cf\u5f15\u7528 MyClass(const MyClass& src) {} \u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\uff0c\u5219\u81ea\u52a8\u5408\u6210\uff0c\u91c7\u7528~~\u4f4d\u62f7\u8d1d(Bitcopy)~~\uff0c\u5373\u76f4\u63a5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u7c7b\u7684\u6240\u6709\u6570\u636e\u6210\u5458\u3002 \u88ab\u8c03\u7528\u7684\u4e09\u79cd\u5e38\u89c1\u60c5\u51b5\uff1a 1\u3001\u7528\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u5b9a\u4e49\u53e6\u4e00\u4e2a\u65b0\u7684\u7c7b\u5bf9\u8c61 Test a; Test c = a; // \u5e76\u4e0d\u662f\u8c03\u7528\u91cd\u8f7d\u7684\u7b49\u53f7\uff01\uff01\u800c\u662f\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff01 Test b(a); 2\u3001\u51fd\u6570\u8c03\u7528\u65f6\u4ee5\u7c7b\u7684\u5bf9\u8c61\u4e3a\u5f62\u53c2 \u51fd\u6570\u8c03\u7528\uff0c\u5f62\u53c2\u4f20\u53c2 Func(Test a) 3\u3001\u51fd\u6570\u8fd4\u56de\u7c7b\u5bf9\u8c61 Test Func(void) \u8fd4\u56de\u503c\u65f6\u6784\u9020\u4e34\u65f6\u5bf9\u8c61 MyClass res = f(a) \u6ca1\u6709RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u4e34\u65f6\u53d8\u91cf\u518d\u7ed9 res \u3002 \u7981\u6b62RVO\u7684\u7f16\u8bd1\u9009\u9879\uff1a -fno-elide-constructors \u53f3\u503c\u5f15\u7528 int &&e = a + b; int &&j = lvalue; // NOT allowed \u5de6\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u5de6\u503c\uff0c\u53f3\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u53f3\u503c\u3002 \u5e38\u91cf\u5de6\u503c\u5f15\u7528\u80fd\u4e5f\u7ed1\u5b9a\u53f3\u503c\u3002 const int &e = 3; void ref(int &&x) { cout << \"right \" << x << endl; } ref(404); \u6df7\u6dc6\uff1a\u53f3\u503c\u5f15\u7528\u672c\u8eab\u4e3a\u5de6\u503c\u3002 \u79fb\u52a8\u6784\u9020\u51fd\u6570 Test(Test&& t) : buf(t.buf) { //\u76f4\u63a5\u590d\u5236\u5730\u5740\uff0c\u907f\u514d\u62f7\u8d1d cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl; t.buf = nullptr; // \u5c06t.buf\u6539\u4e3anullptr\uff0c\u4f7f\u5176\u4e0d\u518d\u6307\u5411\u539f\u6765\u5185\u5b58\u533a\u57df // \u8fd9\u4e4b\u540et\u5c31\u7528\u4e0d\u4e86\u4e86\uff1b\u5b83\u7684\u5730\u5740\u73b0\u5728\u88ab\u62f7\u8d1d\u76ee\u6807\u5bf9\u8c61\u6240\u6709 } \u7981\u6b62RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u79fb\u52a8\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u518d\u79fb\u52a8\u7ed9\u76ee\u6807\u5bf9\u8c61\u3002 std::move \uff1a\u5c06\u5de6\u503c\u8f6c\u5316\u4e3a\u53f3\u503c move\u51fd\u6570\u672c\u8eab\u4e0d\u5bf9\u5bf9\u8c61\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u4ec5\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u8f6c\u6362\u4e3a\u53f3\u503c\u3002 \u79fb\u52a8\u7684\u5177\u4f53\u64cd\u4f5c\u5728\u79fb\u52a8\u6784\u9020\u51fd\u6570\u5185\u5b9e\u73b0\u3002 Test y = std::move(x); f(std::move(z)); // \u8c03\u7528f\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4f20\u53c2\u7248\u672c // \u6027\u80fd\u66f4\u597d\u7684swap\u51fd\u6570 template <class T> swap(T& a, T& b) { T tmp(std::move(a)); a = std::move(b); b = std::move(tmp); } \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u8d4b\u503c\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u8981\u662f\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570(non-static member function)\uff0c \u4e0d\u80fd\u662f\u53cb\u5143\u51fd\u6570 \u3002 MyClass& operator= (const MyClass& right) { if (this != &right) { // \u907f\u514d\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1 // \u5c06right\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u5f53\u524d\u5bf9\u8c61\u4e2d... } return *this; // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61 } \u6ce8\u610f\u533a\u5206\u4e0b\u9762\u4e24\u79cd\u4ee3\u7801\uff1a // \u5df2\u7ecf\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u8d4b\u503c\uff0c\u8c03\u7528\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 ClassName a; ClassName b; a = b; // a\u672a\u5b9a\u4e49\uff1b\u7528b\u521d\u59cb\u5316a ClassName a = b; \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 Test& operator= (Test&& right) { if (this == &right) // \u907f\u514d\u81ea\u5df1\u7ed9\u81ea\u5df1\uff08\u65e0\u7528\u64cd\u4f5c\uff09 cout << \"same obj!\\n\"; else { this->buf = right.buf; // \u76f4\u63a5\u8d4b\u503c\u5730\u5740 right.buf = nullptr; // \u539f\u6765\u7684\u7f6e\u7a7a cout << \"operator=(Test&&) called.\\n\u201c; } return *this; } \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\u5fc5\u987b\u6070\u597d\u7528\u4e00\u79cd\u3002 \u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26 // Src -> Dst \u7684\u8f6c\u6362 class Src { public: operator Dst() const { // \u8fd4\u56de\u503c\u7c7b\u578b\u662fDst\uff1b\u5728convert function\u4e2d\u5fc5\u987b\u7701\u7565\u4e0d\u5199 Dst ret; // ... return ret; } } \u6784\u9020\u51fd\u6570\u8f6c\u6362\u6cd5 class Src; // \u524d\u7f6e\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728Dst\u4e2d\u8981\u7528\u5230Src\u7c7b class Dst { public: Dst(const Src& s) { // cout << \"Dst::Dst(const Src&)\" << endl; } }; \u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u5982\u679c\u7528explicit\u4fee\u9970\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u6216\u7c7b\u578b\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff0c\u5219\u76f8\u5e94\u7684\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u663e\u5f0f\u5730\u8fdb\u884c\u3002 explicit operator Dst() const; explicit Dst(const Src& s); Dst d1(s); //\u53ef\u4ee5\u6267\u884c\uff0c\u88ab\u8ba4\u4e3a\u662f\u663e\u5f0f\u521d\u59cb\u5316 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 const_cast\uff0c\u53bb\u9664\u7c7b\u578b\u7684const\u6216volatile\u5c5e\u6027\u3002 static_cast\uff0c\u7c7b\u4f3c\u4e8eC\u98ce\u683c\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u65e0\u6761\u4ef6\u8f6c\u6362\uff0c\u9759\u6001\u7c7b\u578b\u8f6c\u6362\u3002 dynamic_cast\uff0c\u52a8\u6001\u7c7b\u578b\u8f6c\u6362\uff0c\u5982 \u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u4e4b\u95f4 \u7684\u591a\u6001\u7c7b\u578b\u8f6c\u6362\u3002 reinterpret_cast\uff0c\u4ec5\u4ec5\u91cd\u65b0\u89e3\u91ca\u7c7b\u578b\uff0c\u4f46\u6ca1\u6709\u8fdb\u884c\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362\u3002 \u5982\uff1a Dst d2 = static_cast<Dst>(s); \u7c7b\u7684\u7ec4\u5408 \u6784\u9020\u987a\u5e8f\uff1a\u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u6790\u6784\u987a\u5e8f\uff1a\u4e0e\u6784\u9020\u987a\u5e8f\u76f8\u53cd \u7c7b\u7684\u7ee7\u627f class Child : Father {}; // \u9ed8\u8ba4\u4e3aprivate\u7ee7\u627f class Child : public Father {}; class Child : protected Father {}; // \u5f88\u5c11\u88ab\u4f7f\u7528 \u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u53cb\u5143\u51fd\u6570\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u88ab\u7ee7\u627f\uff01 \u5b50\u7c7b\u82e5\u60f3\u8981\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u6210\u5458\u5217\u8868 \u4e2d\u8fdb\u884c\u3002 Derive(int i) : Base(i) {}; \u7ee7\u627f\u7236\u7c7b\u6784\u9020\u51fd\u6570 Base(int i) : data(i) {}; using Base::Base; ///\u76f8\u5f53\u4e8e Derive(int i):Base(i) {}; // \u5f53\u7236\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4e00\u53e5using\u53ef\u4ee5\u81ea\u52a8\u6784\u9020\u76f8\u5e94\u7684\u591a\u4e2a \u91cd\u5199\u9690\u85cf redefining \u76ee\u7684\uff1a\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u51fd\u6570\uff0c\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u7279\u6b8a\u529f\u80fd\u3002 \u5c4f\u853d\u4e86\u57fa\u7c7b\u7684\u6240\u6709\u5176\u5b83\u540c\u540d\u51fd\u6570\u3002 \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u4e0d\u540c \u76f8\u5f53\u4e8e\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u51fd\u6570\u3002\u4e00\u822c\u4e0d\u6d89\u53ca\u865a\u51fd\u6570\u3002 \u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u901a\u8fc7using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u6d3e\u751f\u7c7b\u4e2d\u201c\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u5373\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002 \u5411\u4e0a\u7c7b\u578b\u8f6c\u6362 \u53ea\u5bf9public\u7ee7\u627f\u6709\u6548\uff0c\u5728\u7ee7\u627f\u56fe\u4e0a\u662f\u4e0a\u5347\u7684\uff1b\u5bf9private\u3001protected\u7ee7\u627f\u65e0\u6548\u3002 \u865a\u51fd\u6570 \u901a\u8fc7\u57fa\u7c7b \u6307\u9488\u6216\u5f15\u7528 \u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\u65f6\u2026\u2026 virtual int func(int a); \u534f\u53d8\uff1a\u6d3e\u751f\u7c7b\uff08\u5b50\u7c7b\uff09\u865a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u548c\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u76f8\u540c \u5b9e\u73b0\u539f\u7406\uff1a\u865a\u51fd\u6570\u8868\u3002\u5728\u6784\u9020\u51fd\u6570\u7684\u5f00\u5934\u63d2\u5165\u4e86\u521d\u59cb\u5316VPTR\u7684\u4ee3\u7801\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u88ab\u8c03\u7528\u7684\u53ea\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u672c\u5730\u7248\u672c\uff0c\u5373\u865a\u673a\u5236\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e0d\u5de5\u4f5c\u3002 \u6790\u6784\u51fd\u6570\u5f80\u5f80\u662f\u865a\u51fd\u6570\u3002 \u865a\u673a\u5236\u5728\u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u4e0d\u5de5\u4f5c\u3002 \u91cd\u8981\u539f\u5219\uff1a \u603b\u662f\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bbe\u7f6e\u4e3a\u865a\u6790\u6784\u51fd\u6570 \u91cd\u5199\u8986\u76d6 override \u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\uff0c \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u4e00\u822c\u60c5\u51b5\u5e94\u76f8\u540c \u3002 \u5c4f\u853d\u4e86\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u51fd\u6570\u3002 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u3002\u665a\u6346\u7ed1\uff08\u53ea\u5bf9\u865a\u51fd\u6570\u8d77\u4f5c\u7528\uff09\u3002 // in Father virtual void f(int a) {} // in Child virtual void f(int a) override {} // final \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u865a\u51fd\u6570\u4e0d\u80fd\u88ab\u540e\u7eed\u5b50\u7c7boverride virtual void f(int a) final {} \u4f7f\u7528const\u4fee\u9970\u6210\u5458\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u91cd\u5199\u8986\u76d6\u5931\u6548 \u62bd\u8c61\u7c7b\u4e0e\u7eaf\u865a\u51fd\u6570 \u7eaf\u865a\u51fd\u6570\u7684\u58f0\u660e\uff1a virtual int f(int a) = 0; // \u5728\u7c7b\u5916\u5b9a\u4e49\u51fd\u6570\uff0c\u63d0\u4f9b\u5b9e\u73b0 int MyClass::f(int a) { return 1; } \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u5c31\u662f \u62bd\u8c61\u7c7b \u3002\u4f5c\u7528\u65f6\u63d0\u4f9b\u63a5\u53e3\u3002 \u62bd\u8c61\u7c7b\u4e0d\u80fd\u5b9a\u4e49\u5bf9\u8c61\uff01\uff01\uff08\u5373\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002\uff09 \u7eaf\u865a\u51fd\u6570\u88aboverride\u4e4b\u524d\u8fd8\u662f\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u88ab\u5168\u90e8\u5b9e\u73b0\uff08\u9664\u4e86\u7eaf\u865a\u6790\u6784\u51fd\u6570\uff09\uff0c\u5219\u5176\u5b50\u7c7b\u8fd8\u662f\u62bd\u8c61\u7c7b\uff0c\u8fd8\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002 \u7eaf\u865a\u6790\u6784\u51fd\u6570 \u4ecd\u7136\u9700\u8981\u51fd\u6570\u4f53\u3002 \u76ee\u7684\uff1a\u4f7f\u57fa\u7c7b\u6210\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u57fa\u7c7b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6709\u5176\u4ed6\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u6790\u6784\u51fd\u6570\u4e0d\u5fc5\u662f\u7eaf\u865a\u7684\u3002 \u5411\u4e0b\u7c7b\u578b\u8f6c\u6362 dynamic_cast SrcClass* p1; TargetClass* p2 = dynamic_cast<TargetClass*>(p1); Father* p1; Child* p2 = dynamic_cast<Child*>(p1); \u6a21\u677f template \u6a21\u677f\u53c2\u6570\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u3002\u56e0\u6b64\u4e0d\u80fd\u4e3a\u53d8\u91cf\uff0c\u53ea\u80fd\u662f\u5e38\u91cf\u3002\u9759\u591a\u6001\u3002 \u51fd\u6570\u6a21\u677f template <typename T> // template <class T> T sum(T a, T b) { return a + b; } // \u6307\u5b9a\u8c03\u7528\u7c7b\u578b sum<int>(9, 2.1); \u7c7b\u6a21\u677f template <typename T> class A { T data; public: void print(); template <typename T1> T1 get(); }; //\u7c7b\u5916\u5b9a\u4e49\u7c7b\u6a21\u677f\u4e2d\u7684\u6210\u5458\u51fd\u6570 template <typename T> void A<T>::print() {} // \u201c\u53cc\u91cd\u6a21\u677f\u201d template <typename T> template <typename T1> T1 A<T>::get() {} A<int> a; \u7c7b\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 template <typename T, unsigned size> class Array { T data[size]; public: void print(); }; A<int, 10> a; \u4f20\u9012\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u666e\u901a\u6570\u7ec4\uff1b\u628a\u5927\u5c0f\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570n\uff1b\u6ce8\u610f\u7b26\u53f7\u201c&\u201d\u3002 template <class A, int n> void work(const A (&_array)[n]) { } // call the function double arr = { 0, 1, 2 }; work(arr); \u591a\u7ebf\u7a0b thread void test(int seconds) { this_thread::sleep_for(chrono::seconds(seconds)); } int main() { thread t_nothing; // \u521b\u5efa\u4e00\u4e2a\u7a7athread thread t1(test, 3); // \u521b\u5efa\u4e00\u4e2athread thread t2(test, 2); // thread \u521b\u5efa\u4e4b\u540e\u5230\u9500\u6bc1\u4e4b\u524d\uff0c\u5fc5\u987b\u51b3\u5b9ajoin\u8fd8\u662fdetach t1.join(); t2.detach(); // \u529f\u80fd\u6027\u63a5\u53e3 this_thread::get_id(); this_thread::sleep_for(); this_thread::sleep_until(); this_thread::yield(); return 0; } \u4e3b\u4ece\u6a21\u5f0f #include <iostream> #include <cmath> #include <vector> #include <thread> using namespace std; thread* threads[4]; // \u7ebf\u7a0b\u6307\u9488 int thread_total[4]; //\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8ba1\u6570\u5668 int total = 0, mi, mx; //\u603b\u8ba1\u6570\u5668 bool check_num(int num) { /* ... */ } //\u679a\u4e3e\u662f\u5426\u4e3a\u7d20\u6570 //\u7edf\u8ba1[l,r)\u4e4b\u95f4\u7684\u7d20\u6570\u4e2a\u6570 //\u5b58\u5165thread_total[num]\u4e2d void check(int l, int r, int num) { thread_total[num] = 0; for (int i = l; i < r; i++) if (check_num(i)) thread_total[num]++; } int main() { mi = 1; for (int i = 0; i < 4; i++) { // \u7528\u5faa\u73af\u521b\u5efa\u7ebf\u7a0b mx = mi + 5000000 / 4; if (mx > 5000000) mx = 5000000; //\u4e3a\u7b2ci\u4e2a\u7ebf\u7a0b\u5206\u914d[mi,mx)\u533a\u95f4\u7684\u4efb\u52a1 threads[i] = new thread(check, mi, mx, i); mi = mx; } //\u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6240\u6709\u5b50\u7ebf\u7a0b\u5b8c\u6210\u7edf\u8ba1 for (int i = 0; i < 4; i++) threads[i]->join(); //\u6c47\u603b\u5b50\u7ebf\u7a0b\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u91ca\u653ethread\u5b9e\u4f8b for (int i = 0; i < 4; i++) { total += thread_total[i]; delete threads[i]; } //\u8f93\u51fa cout << total << endl; return 0; } \u4e92\u65a5\u9501\u6a21\u5f0f mutex static mutex exclusive; // \u4e92\u65a5\u91cf void check_range(int l, int r) { int tmp_total = 0; for (int i = l; i < r; i++) if (check_num(i)) tmp_total++; exclusive.lock(); //\u52a0\u9501 total+=tmp_total; exclusive.unlock(); //\u89e3\u9501 } \u5f02\u6b65 async future #include <future> #include <chrono> int worker(int arg) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int main() { future<int> fut = async(worker, 403); // auto fut = async(worker, 403); // future\u7684\u63a5\u53e3 fut.wait(); // \u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u7ebf\u7a0b\u7ed3\u675f int res = fut.get(); // get\u8fd0\u884c\u7ed3\u679c\uff1b\u4e00\u4e2afuture\u53ea\u80fd\u88abget\u4e00\u6b21 fut.wait_for(chrono::milliseconds(100)); // \u8d85\u65f6\u540e\u8fd4\u56de\u4e00\u4e2afuture_status\uff0c\u5e76\u53d6\u6d88\u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u963b\u585e /* future_status::deferred \u4ecd\u672a\u542f\u52a8 future_status::ready \u7ed3\u679c\u5c31\u7eea future_status::timeout \u5df2\u8d85\u8fc7\u65f6\u9650\uff0c\u5f02\u6b65\u7ebf\u7a0b\u4ecd\u5728\u6267\u884c */ return 0; } \u8f6e\u8be2 int worker(int arg) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int input() { /* ... */ } vector<future<int>> future_lists; // \u5f02\u6b65\u7ebf\u7a0b\u5bf9\u8c61\u8868 vector<int> num_lists; // \u8f93\u5165\u6570\u636e\u8868 int main() { while (ture) { int num = input(); //\u521b\u5efa\u5f02\u6b65\u7ebf\u7a0b future_lists.push_back(async(worker, num)); num_lists.push_back(num); res_lists.push_back(0); //\u901a\u8fc7future\u68c0\u6d4b\u6bcf\u4e00\u4e2a\u5f02\u6b65\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210 for (int i = future_lists.size() - 1; i >= 0; i--) { //\u6bcf\u4e2afuture\u7b49\u5f850.1\u79d2\u6765\u68c0\u6d4b\u72b6\u6001 future_status status = future_lists[i].wait_for( chrono::milliseconds(100)); if (status == future_status::ready) // \u5df2\u7ecf\u5f97\u5230\u4e86\u7ed3\u679c { // \u8f93\u51fa\u7ed3\u679c cout << num_lists[i] << \" : \" << future_lists[i].get() << endl; //\u5220\u9664\u5df2\u7ecf\u5b8c\u6210\u4efb\u52a1\u7684future future_lists.erase(future_lists.begin() + i); num_lists.erase(num_lists.begin() + i); } } return 0; } promise \u51fd\u6570\u6307\u9488 double work(int& x); // [\u8fd4\u56de\u503c] (*[\u58f0\u660e\u7684\u53d8\u91cf\u540d])([\u53c2\u6570\u7c7b\u578b\u5217\u8868]) double (*fp)(int&) = work; // \u81ea\u52a8\u63a8\u5bfc auto fp = work; \u51fd\u6570\u5bf9\u8c61 \u7c7b\u7684\u5bf9\u8c61\uff0c\u7528\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u770b\u505a\u51fd\u6570\u5bf9\u8c61\u3002\u672b\u5c3e\u5e26\u62ec\u53f7\u3002 // \u4eff\u7167greater<int>()\u5b9e\u73b0\u51fd\u6570\u5bf9\u8c61 template<class T> class Greater { public: bool operator()(const T &a, const T &b) const { // \u91cd\u8f7d()\uff1b\u7528\u4e8e\u6392\u5e8f\u7684cmp\u51fd\u6570\u7684\u7279\u70b9\uff1a\u4e09\u4e2aconst return a > b; } }; Greater<double>()(4.3, 1.0); function \u7c7b function\u4e3a\u51fd\u6570\u6307\u9488\u4e0e\u5bf9\u8c61\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3 // function<[\u8fd4\u56de\u503c](\u53c2\u6570\u5217\u8868)> func = f; void process(function<int()> f1, function<double(int)> f2) {} int work1(); class Work2 { public: double operator()(int a) { /* ... */ } }; process(work1, Work2()); \u667a\u80fd\u6307\u9488 #include <memory> unique_ptr \u72ec\u5360\u3002\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u8be5\u5bf9\u8c61\u3002 unique_ptr<string> p3 (new string (\"auto\")); unique_ptr<string> p4\uff1b // \u4e0d\u80fd\u518d p4 = p3; // \u8fd9\u6837new\u5b8c\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u8bb0\u5f97\u53bbdelete\u4e86\uff0c\u907f\u514d\u4e86\u5185\u5b58\u6cc4\u6f0f shared_ptr \u5171\u4eab\u3002\u8ba1\u6570\u3002\u591a\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u76f8\u540c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u548c\u5176\u76f8\u5173 \u8d44\u6e90\u4f1a\u5728\u201c\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u88ab\u9500\u6bc1\u201d\u65f6\u5019\u91ca\u653e \u3002 // \u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u88f8\u6307\u9488\u521d\u59cb\u5316\u591a\u4e2a\u667a\u80fd\u6307\u9488 int* p = new int(); shared_ptr<int> p1(p); shared_ptr<int> p2(p); // \u4f1a\u4ea7\u751f\u591a\u4e2a\u8f85\u52a9\u6307\u9488\uff01 shared_ptr<int> sp(new int(1)); string *s1 = new string(\"s1\"); shared_ptr<string> sp1(s1); shared_ptr<string> sp2; sp2 = sp1; cout << sp1.use_count() <<endl; //\u67e5\u770b\u5f15\u7528\u8ba1\u6570 cout << sp2.use_count() << endl; cout << sp1.unique() << endl; // \u662f\u5426\u72ec\u5360 cout << sp1 << endl; // sp1\u4ee3\u8868\u7684\u6307\u9488 cout << sp1.get() << endl; // \u540c\u4e0a cout << sp1 << endl; // \"s1\"\uff1b\u76f8\u5f53\u4e8e*(sp1\u4ee3\u8868\u7684\u6307\u9488)\uff0c\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61 sp1.reset(); // \u6e05\u9664\u6307\u9488\u5e76\u51cf\u5c11\u5f15\u7528\u8ba1\u6570 // \u667a\u80fd\u6307\u9488\u7684\u5411\u4e0b\u8f6c\u6362 dynamic_pointer_cast<Child>(p); weak_ptr \u5f31\u5f15\u7528 \u6307\u5411\u5bf9\u8c61\uff0c\u4f46\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u3002 shared_ptr<int> sp(new int(3)); weak_ptr<int> wp1 = sp; wp.use_count() //\u83b7\u53d6\u5f15\u7528\u8ba1\u6570 wp.reset() //\u6e05\u9664\u6307\u9488 wp.expired() //\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u65e0\u6548 sp = wp.lock() //\u4ece\u5f31\u5f15\u7528\u83b7\u5f97\u4e00\u4e2a\u667a\u80fd\u6307\u9488 Lambda \u51fd\u6570 [capture] (parameters) mutable -> return-type {statement} [](int x) { return x % 2 == 0;} // \u5224\u65adx\u662f\u5426\u662f\u5076\u6570 \u884c\u4e3a\u578b\u6a21\u5f0f \u80fd\u4ee5\u6700\u5c11\u7684\u4ee3\u7801\u53d8\u52a8\u5b8c\u6210\u529f\u80fd\u7684\u589e\u51cf \u8fed\u4ee3\u5668\u6a21\u5f0f //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public: virtual ~Iterator() { } virtual Iterator& operator++() = 0; virtual float& operator++(int) = 0; virtual float& operator*() = 0; virtual float* operator->() = 0; virtual bool operator!=(const Iterator &other) const = 0; bool operator==(const Iterator &other) const { return !(*this != other); } }; class Collection { public: virtual ~Collection() { } virtual Iterator* begin() const = 0; virtual Iterator* end() const = 0; virtual int size() = 0; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float *_data; //ArrayCollection\u7684\u6570\u636e int _index; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public: ArrayIterator(float* data, int index) : _data(data), _index(index) { } ArrayIterator(const ArrayIterator& other) : _data(other._data), _index(other._index) { } ~ArrayIterator() { } Iterator& operator++() { _index++; return *this; } /* Iterator operator++(int) { ArrayIterator ret(*this); _index++; return ret; } */ float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } float& operator*() //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c { return *(_data + _index); } float* operator->() { return (_data + _index); } bool operator!=(const Iterator &other) const //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e { return (_data != ((ArrayIterator*)(&other))->_data || _index != ((ArrayIterator*)(&other))->_index); } }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float* _data; int _size; public: ArrayCollection() : _size(10) { _data = new float[_size]; } ArrayCollection(int size, float* data) : _size(size) { _data = new float[_size]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for (int i = 0; i < size; i++) *(_data+i) = *(data+i); } ~ArrayCollection() { delete[] _data; } int size() { return _size; } Iterator* begin() const //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator(_data, 0); } Iterator* end() const //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator(_data, _size); } }; // in main: float scores[]={ 90, 20, 40, 40, 30, 60, 70, 30, 90, 100 }; Collection *collection = new ArrayCollection(10, scores); Iterator* begin = collection -> begin(); Iterator* end = collection -> end(); int passed = 0; for (Iterator* p = begin; *p != *end; (*p)++) { if (**p >= 60) passed ++; } cout << passed << endl; // 5 \u5b9a\u4e49\u5b9e\u73b0\u5206\u5f00\u7248\u672c\uff1a //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public: virtual ~Iterator() { } virtual Iterator& operator++() = 0; virtual Iterator& operator++(int) = 0; virtual float& operator*() = 0; virtual float* operator->() = 0; virtual bool operator!=(const Iterator &other) const = 0; bool operator==(const Iterator &other) const { return !(*this != other); } }; class Collection { public: virtual ~Collection() { } virtual Iterator* begin() const = 0; virtual Iterator* end() const = 0; virtual int size() = 0; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float *_data; //ArrayCollection\u7684\u6570\u636e int _index; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public: ArrayIterator(float* data, int index) : _data(data), _index(index) { } ArrayIterator(const ArrayIterator& other) : _data(other._data), _index(other._index) { } ~ArrayIterator() { } Iterator& operator++(); Iterator& operator++(int); float& operator*(); float* operator->(); bool operator!=(const Iterator &other) const; }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float* _data; int _size; public: ArrayCollection() : _size(10){_data = new float[_size]; } ArrayCollection(int size, float* data) : _size(size) { _data = new float[_size]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for (int i = 0; i < size; i++) *(_data+i) = *(data+i); } ~ArrayCollection() { delete[] _data; } int size() { return _size; } Iterator* begin() const; Iterator* end() const; }; Iterator* ArrayCollection::begin() const { //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator(_data, 0); } Iterator* ArrayCollection::end() const { //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator(_data, _size); } //\u8fed\u4ee3\u5668\u5404\u79cd\u5185\u5bb9\u7684\u5b9e\u73b0 Iterator& ArrayIterator::operator++() { _index++; return *this; } //\u56e0\u4e3a\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c06\u7a7a\u95f4\u6307\u9488\u4f4d\u7f6e+1\u5373\u53ef\uff0c\u53ef\u4ee5\u601d\u8003\u4e0b\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8fd4\u56defloat&\uff0c\u800c\u4e0d\u662fIterator /* float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } */ Iterator& ArrayIterator::operator++(int) { ArrayIterator ret(*this); _index++; return ret; } //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c float& ArrayIterator::operator*() { return *(_data + _index); } float* ArrayIterator::operator->() { return (_data + _index); } //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e bool ArrayIterator::operator!=(const Iterator &other) const { return (_data != ((ArrayIterator*)(&other))->_data || _index != ((ArrayIterator*)(&other))->_index); } hasNext\u5b9e\u73b0\u6a21\u5f0f\uff1a class Item { public: Item(const string& strName, const float& price): m_name(strName),m_price(price) {} Item(const Item& item): m_name(item.m_name),m_price(item.m_price) {} string tostring() { std::stringstream buffer; buffer << m_price; string strPrice = buffer.str(); string strName = m_name + \" :\"; return strName + strPrice; } private: string m_name; float m_price; }; class Container; class Menu; class MenuIterator; class Iterator { public: virtual ~Iterator() {} //virtual void first() = 0; virtual void next() = 0; virtual bool hasnext() = 0; virtual Item* current() = 0; protected: Container * m_pContainer; }; class Container { public: virtual ~Container() {}; protected: //Observer(){}; }; class Menu : public Container { public: virtual ~Menu() { for(int i=0 ; i< m_items.size(); i++) { delete m_items[i]; } } int size() { return m_items.size(); } Item* value(int nIndex) { if(nIndex >= 0 && nIndex < m_items.size()) { return m_items[nIndex]; } else { return NULL; } } void additem(Item& item) { Item *pItem = new Item(item); m_items.push_back(pItem); } private: friend class MenuIterator; vector<Item*> m_items; }; class MenuIterator : public Iterator { Menu* m_menu; int curpos; public: MenuIterator(Menu& a): m_menu(&a), curpos(0) {} /*virtual void first() { curpos=0; }*/ virtual void next() { curpos++; } virtual bool hasnext() { if(curpos >= 0 && curpos < m_menu->m_items.size()) return true; else return false; } virtual Item* current() { return m_menu->value(curpos); } }; int main() { Item it1(\"chicken\", 10.0); Item it2(\"Apple\", 5.0); Item it3(\"Beaf\", 20.0); Item it4(\"soup\",15.0); Menu menu; menu.additem(it1); menu.additem(it2); menu.additem(it3); menu.additem(it4); Iterator* iter = new MenuIterator(menu); while(iter->hasnext()) { Item* pItem = iter->current(); if(pItem) cout << pItem->tostring() << endl; iter->next(); } } \u6a21\u677f\u65b9\u6cd5 \u62bd\u8c61\u7236\u7c7b\u5b9a\u4e49\u63a5\u53e3\u3001\u6d41\u7a0b\uff0c\uff08\u6bcf\u79cd\u7ec4\u5408\u7684\uff09\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\u3002\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\u3002 \u62bd\u8c61\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u3002 \u5219\u4e00\u5171\u9700\u8981m*n\u4e2a\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 class AbstractClass { public: virtual void operation1() = 0; virtual void operation2() = 0; void run() { // \u5b9a\u4e49\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b operation1(); operation2(); } }; class ConcreteA : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408A public: void operation1() { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteA::operation1\" << endl; } void operation2() { cout << \"ConcreteA::operation2\" << endl; } }; class ConcreteB : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408B public: void operation1() { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteB::operation1\" << endl; } void operation2() { cout << \"ConcreteB::operation2\" << endl; } }; AbstractClass* absClass[] = { new ConcreteA(), new ConcreteB() }; for (auto x: absClass) { x -> run(); delete x; } \u7b56\u7565\u6a21\u5f0f \u62bd\u8c61\u7c7b\u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b\uff0c\u521d\u59cb\u5316\u65f6\u63a5\u6536\u5404\u6b65\u64cd\u4f5c\u7684\u5177\u4f53\u7684\u7b56\u7565\u5b50\u7c7b\u3002 \u7236\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u7b56\u7565\u3002 \u5219\u4e00\u5171\u9700\u8981m+n\u4e2a\u7b56\u7565\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 \u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 class AbstractClass { // \u83b7\u53d6\u4e0d\u540c\u7684\u7b56\u7565\u7c7b\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u7b56\u7565\u6307\u9488 Op1Strategy *op1_strategy; Op2Strategy *op2_strategy; public: // \u5404\u4e2a\u7b56\u7565\u7c7b\u7684\u7ec4\u5408 AbstractClass(Op1Strategy* op1, Op2Strategy* op2) : op1_strategy(op1), op2_strategy(op2) {} // \u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b void run() { op1_strategy->operate(); // \u6267\u884c\u7b56\u7565 op2_strategy->operate(); } }; // \u64cd\u4f5c1\u7b56\u7565\u57fa\u7c7b class Op1Strategy { public: virtual void operate() = 0; } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b01 class Op1StrategyImpl1: public Op1Strategy { public: void operate() { cout << \"Operation1 Implementation 1\" << endl; } } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b02 class Op1StrategyImpl2: public Op1Strategy { public: void operate() { cout << \"Operation1 Implementation 2\" << endl; } } // in main: Op1StrategyImpl1* op1imp1 = new Op1StrategyImpl1(); Op2StrategyImpl1* op2imp1 = new Op2StrategyImpl1(); AbstractClass* solve = new AbstractClass(op1imp1, op2imp2); solve->run(); \u7ed3\u6784\u578b\u6a21\u5f0f \u80fd\u5728\u7ed3\u6784\u5c42\u9762\u4e0a\u5c3d\u53ef\u80fd\u7684\u89e3\u8026\u5408 \u9002\u914d\u5668\u6a21\u5f0f \u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u7c7b\u53ef\u4ee5\u5728\u7edf\u4e00\u7684\u63a5\u53e3\u73af\u5883\u4e0b\u5de5\u4f5c\u3002 \u7ec4\u5408\u9002\u914d //\u5806\u6808\u57fa\u7c7b class Stack { public: virtual ~Stack() { } virtual bool full() = 0; virtual bool empty() = 0; virtual void push(int i) = 0; virtual void pop() = 0; virtual int size() = 0; virtual int top() = 0; } class Vector2Stack : public Stack { private: std::vector<int> m_data; //\u5c06vector\u7684\u63a5\u53e3\u7ec4\u5408\u8fdb\u6765\u5b9e\u73b0\u5177\u4f53\u529f\u80fd const int m_size; public: Vector2Stack(int size) : m_size(size) { } bool full() { return (int)m_data.size() >= m_size; } //\u6ee1\u6808\u68c0\u6d4b bool empty() { return (int)m_data.size() == 0; } //\u7a7a\u6808\u68c0\u6d4b void push(int i) { m_data.push_back(i); } //\u5165\u6808 void pop() { if (!empty()) m_data.pop_back(); } //\u51fa\u6808 int size() { return m_data.size(); } //\u83b7\u53d6\u5806\u6808\u5df2\u7528\u7a7a\u95f4 int top() { //\u83b7\u53d6\u6808\u5934\u5185\u5bb9 if (!empty()) return m_data[m_data.size()-1]; else return INT_MIN; } }; Vector2Stack stack(10); \u7ee7\u627f\u9002\u914d //\u76f4\u63a5\u7ee7\u627fvector\u5e76\u6539\u9020\u63a5\u53e3\uff0c\u91c7\u7528\u79c1\u6709\u7ee7\u627f\u53ef\u4ee5\u4f7f\u5f97\u5916\u754c\u53ea\u80fd\u63a5\u89e6\u5230Vector2Stack\u4e2d\u7684\u63a5\u53e3 class Vector2Stack : private std::vector<int>, public Stack { public: Vector2Stack(int size) : vector<int>(size) { } bool full() { return false; } bool empty() { return vector<int>::empty(); } void push(int i) { push_back(i); } void pop() { pop_back(); } int size() { return vector<int>::size(); } int top() { return back(); } }; Vector2Stack stack(10); \u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f \u5728\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u5c42\uff0c\u5c06\u590d\u6742\u64cd\u4f5c\u5305\u88f9\u5728\u5185\u90e8\u4e0d\u5bf9\u5916\u90e8\u7c7b\u5f00\u653e\uff0c\u4ec5\u5bf9\u5916\u5f00\u653e\u529f\u80fd\u63a5\u53e3\uff0c\u5373\u53ef\u5b8c\u6210\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd9\u5c31\u662f\u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f\u3002 \u9002\u914d\u5668\u7684\u6838\u5fc3\u8981\u7d20\u662f\u53d8\u6362\u63a5\u53e3\uff0c\u4ee3\u7406\u7684\u6838\u5fc3\u8981\u7d20\u662f\u5206\u5272\u8bbf\u95ee\u5bf9\u8c61\u4e0e\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4ee5\u51cf\u5c11\u8026\u5408\uff0c\u5e76\u80fd \u5728\u4e2d\u95f4\u589e\u52a0\u5404\u79cd\u63a7\u5236\u529f\u80fd \u3002 template <typename T> //\u63d0\u524d\u58f0\u660e\u667a\u80fd\u6307\u9488\u6a21\u677f\u7c7b class SmartPtr; //\u8f85\u52a9\u6307\u9488\uff0c\u7528\u4e8e\u5b58\u50a8\u6307\u9488\u8ba1\u6570\u4ee5\u53ca\u5c01\u88c5\u5b9e\u9645\u6307\u9488\u5730\u5740 template <typename T> class U_Ptr { private: friend class SmartPtr<T>; U_Ptr(T *ptr) :p(ptr), count(1) { } ~U_Ptr() { delete p; } int count; T *p; //\u6570\u636e\u5b58\u653e\u5730\u5740 }; template <typename T> //\u667a\u80fd\u6307\u9488 class SmartPtr { private: U_Ptr<T> *rp; //\u8fdb\u884c\u5b9e\u9645\u6307\u9488\u64cd\u4f5c\u7684\u8f85\u52a9\u6307\u9488 public: SmartPtr(T *ptr) :rp(new U_Ptr<T>(ptr)) { } //\u8c03\u52a8\u62f7\u8d1d\u6784\u9020\u5373\u589e\u52a0\u5f15\u7528\u8ba1\u6570 SmartPtr(const SmartPtr<T> &sp) :rp(sp.rp) { ++rp->count; } SmartPtr& operator=(const SmartPtr<T>& rhs) { ++rhs.rp->count; //\u8d4b\u503c\u53f7\u540e\u7684\u6307\u9488\u5f15\u7528\u52a01 if (--rp->count == 0) delete rp; //\u539f\u5185\u90e8\u6307\u9488\u5f15\u7528\u51cf1 rp = rhs.rp; //\u4ee3\u7406\u65b0\u7684\u6307\u9488 return *this; } ~SmartPtr() { //\u53ea\u6709\u5f15\u7528\u6b21\u6570\u4e3a0\u624d\u4f1a\u91ca\u653e if (--rp->count == 0) delete rp; } //\u5bf9\u667a\u80fd\u6307\u9488\u64cd\u4f5c\u7b49\u540c\u4e8e\u5bf9\u5185\u90e8\u8f85\u52a9\u6307\u9488\u64cd\u4f5c T & operator *() { return *(rp->p); } T* operator ->() { return rp->p; } }; int main(int argc, char *argv[]) { //\u58f0\u660e\u6307\u9488 int *i = new int(2); //\u4f7f\u7528\u4ee3\u7406\u6765\u5305\u88f9\u6307\u9488 SmartPtr<int> ptr1(i); SmartPtr<int> ptr2(ptr1); SmartPtr<int> ptr3 = ptr2; //\u4e4b\u540e\u7684\u64cd\u4f5c\u5747\u901a\u8fc7\u4ee3\u7406\u8fdb\u884c cout << *ptr1 << endl; *ptr1 = 20; cout << *ptr2 << endl; return 0; } \u88c5\u9970\u5668\u6a21\u5f0f \u7edf\u4e00\u7ee7\u627f\u81eaComponent\u3002 \u6700\u540e\u662f\u94fe\u5f0f\u8c03\u7528\u3002 #include <iostream> using namespace std; //\u6240\u6709View\u7684\u57fa\u7c7b class Component { public: virtual ~Component() { } virtual void draw() = 0; }; //\u4e00\u4e2a\u57fa\u672c\u7684TextView\u7c7b class TextView : public Component { public: void draw() { cout << \"TextView.\" << endl; } }; //\u88c5\u9970\u5668\u7684\u6838\u5fc3\u5185\u6db5\u5728\u4e8e\u7528\u88c5\u9970\u5668\u7c7b\u6574\u4f53\u5305\u88f9\u6539\u52a8\u4e4b\u524d\u7684\u7c7b\uff0c\u4ee5\u4fdd\u7559\u539f\u6765\u7684\u5168\u90e8\u63a5\u53e3 //\u5728\u539f\u6765\u63a5\u53e3\u4fdd\u7559\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u65b0\u529f\u80fd\u6269\u5145 class Decorator : public Component { //\u8fd9\u91cc\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8ba9Decorator\u80fd\u591f\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u4e0d\u65ad\u589e\u52a0\u65b0\u529f\u80fd Component* _component; public: Decorator(Component* component) : _component(component) { } virtual void addon() = 0; void draw() { addon(); _component -> draw(); } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u8fb9\u6846 class Border : public Decorator { public: Border(Component* component) : Decorator(component) { } void addon() { cout << \"Bordered \"; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u6c34\u5e73\u6eda\u52a8\u6761 class HScroll : public Decorator { public: HScroll(Component* component): Decorator(component) { } void addon() { cout << \"HScrolled \"; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u5782\u76f4\u6eda\u52a8\u6761 class VScroll : public Decorator { public: VScroll(Component* component): Decorator(component) { } void addon() { cout << \"VScrolled \"; } }; int main() { //\u57fa\u7840\u7684textView TextView textView; //\u5728\u57fa\u7840textView\u4e0a\u589e\u52a0\u6eda\u52a8\u6761 VScroll vs_TextView(&textView); //\u5728\u589e\u52a0\u5782\u76f4\u6eda\u52a8\u6761\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6eda\u52a8\u6a2a\u6761 HScroll hs_vs_TextView(&vs_TextView); //\u5728\u589e\u52a0\u6c34\u5e73\u4e0e\u5782\u76f4\u6eda\u52a8\u6761\u4e4b\u540e\u589e\u52a0\u8fb9\u6846 Border b_hs_vs_TextView(&hs_vs_TextView); b_hs_vs_TextView.draw(); return 0; } \u521b\u5efa\u578b\u6a21\u5f0f \u5355\u4f8b\u6a21\u5f0f \u5de5\u5382\u6a21\u5f0f class TeaFactory { public: void setMilk(int amount) { ... } void setSugar(int amount) { ... } Tea *createTea(const string &type) { Tea *tea = nullptr; if (type == \"GreenTea\") tea = new GreenTea; else if (type == \"BlackTea\") tea = new Blacktea; else ... // \u5176\u4ed6\u53ef\u80fd\u7684\u8336\u53f6\u7c7b\u578b if (milkAmount > 0) tea->addMilk(...); if (sugarAmount > 0) tea->addSugar(...); ... // \u5176\u4ed6\u7684\u5c5e\u6027\u914d\u7f6e } }; \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f class AbstractLanguageFactory { public: virtual Lexer *createLexer(); virtual Parser *createParser(); virtual Generator *createGenerator(); }; class CppFactory : public AbstractLanguageFactory { public: Lexer *createLexer() { return new CppLexer; } Parser *createParser() { return new CppParser; } Generator *createGenerator() { return new CppGenerator; } }; class JavaFactory : public AbstractLanguageFactory { ... }; class Compiler { AbstractFactory *factory; public: Compiler(AbstractFactory *factory) { this->factory = factory; } LexResult *lex(Code *input) { Lexer *lexer = factory->createLexer(); return lexer->lex(input); } ParseResult *parse(LexResult *input) { Parser *parser = factory->createParser(); return parser->parse(input); } // ... }; int main() { CppFactory *cppFactory = new CppFactory(); Compiler *cppCompiler = new Compiler(cppFactory); Code *code = ... LexResult *lex = cppCompiler->lex(code); // ... } \u5b9e\u7528\u5de5\u5177\u7c7b\u77e5\u8bc6 \u6392\u5e8f bool mycmp(int a, int b) { /* a\u5728b\u524d\u8fd4\u56detrue a\u5728b\u540e\u8fd4\u56defalse */ } sort(arr + 0, arr + n, mycmp); vector<Computer> data; // Computer \u7c7b\u91cd\u8f7d\u4e86\u201c>\u201d\u3001\u201c<\u201d sort(data.begin(), data.end(), greater<Computer>()); struct Cmp { bool operator() (const Computer& _a, const Computer& _b) { return _a.stock > _b.stock; } }; sort(data.begin(), data.end(), Cmp); \u5b57\u7b26\u4e32\u7c7b \u6587\u4ef6\u8bfb\u5199 fstream #include <fstream> fstream fs1(\"./input.txt\", ios::in); fs1 >> a; fstream fs2(\"./output.txt\", ios::out); fs2 << a; ifstream fin(\"./input.txt\"); ofstream fout(\"./output.txt\"); // \u6709f\uff01\uff01\u4e0d\u662fistream / ostream \uff01 // \u5faa\u73af\u4ece\u6587\u4ef6\u8bfb\u5165\u672a\u77e5\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u76f4\u5230\u8bfb\u5b8c\u4e3a\u6b62\u3002 while (fin) {} \u8f93\u5165 string str; // \u8bfb\u5230\u7a7a\u683c cin >> str; // \u8bfb\u4e00\u6574\u884c getline(cin, str); // \u8bfb\u5230\u7279\u5b9a\u5206\u9694\u7b26\uff1b\u53ef\u4ee5\u8bfb\u5165\u6362\u884c\u7b26 getline(cin, str, '#'); // \u6d41\u64cd\u7eb5\u7b97\u5b50 cin >> ws; // ws\u7b97\u5b50\uff1b\u9664\u53bb\u524d\u5bfc\u7a7a\u683c // \u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f46\u5e76\u4e0d\u8bfb\u53d6\u3002\u5982\u679c\u5230\u7ed3\u5c3e\u4e86\u5c31\u7ec8\u6b62\u65e0\u9650\u5faa\u73af\u8bfb\u5165\u3002 int c = cin.peek(); // \u8fd4\u56de\u7684\u662fchar\u7c7b\u578b\u7684\u5b57\u7b26\uff01\uff01\u6bd4\u59820\u8fd4\u56de\u7684\u662fASCII\u780148\u3002 if (c == EOF) break; cin.get(); //\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 cin.ignore(int n=1, int delim=EOF); //\u4e22\u5f03n\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u76f4\u81f3\u9047\u5230delim\u5206\u9694\u7b26 cin.peek(); //\u67e5\u770b\u4e0b\u4e00\u4e2a\u5b57\u7b26 cin.putback(char c); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 cin.unget(); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 \u8f93\u51fa \u683c\u5f0f\u5316\u8f93\u51fa\uff1a #include <iomanip> cout << defaultfloat; //\u8fd8\u539f\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f cout << setprecision(2) << 3.1415926 << endl; //\u8f93\u51fa\u7cbe\u5ea6\u8bbe\u7f6e\u4e3a2 -> 3.2 cout << oct << 12 << \" \" << hex << 12 << endl; //\u516b\u8fdb\u5236\u8f93\u51fa -> 14 \u5341\u516d\u8fdb\u5236\u8f93\u51fa -> c cout << dec; //\u8fd8\u539f\u5341\u8fdb\u5236 cout << setw(3) << setfill('*') << 5 << endl; //\u8bbe\u7f6e\u5bf9\u9f50\u957f\u5ea6\u4e3a3\uff0c\u5bf9\u9f50\u5b57\u7b26\u4e3a* -> **5 cout << fixed << 2018.0 << \" \" << 0.0001 << endl; //\u6d6e\u70b9\u6570\u8865\u5168 -> 2018.000000 0.000100 cout << scientific << 2018.0 << \" \" << 0.0001 << endl; //\u79d1\u5b66\u8ba1\u6570\u6cd5 -> 2.018000e+03 1.000000e-04 string // \u8f6c\u6362\u4e3a\u5e38\u91cfchar\u5b57\u7b26\u4e32 str.c_str(); str.push_back('a'); str.append(s2); str += s1; \u622a\u53d6 string s0(\"0123456789\"); string s1(s0, 3, 4); // \u4eces0[3]\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\u7ed3\u679c\uff1a3456 string s2(s0, 4); // \u4eces0[4]\u5f00\u59cb\u76f4\u5230\u7ed3\u5c3e\u3002\u7ed3\u679c\uff1a456789 string s3(\"0123456789\", 4); // \u4ece\u5934\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\uff08\u53d6\u524d4\u3002\uff09\u7ed3\u679c\uff1a0123 string s4(s0.begin() + 2, s0.begin() + 6); // \u4eces0[2]\u5f00\u59cb\uff0c\u5230s0[5]\uff08s0[6]\u4e4b\u524d\uff09\u7ed3\u675f\u3002\u7ed3\u679c\uff1a2345 cout << s1 << endl; cout << s2 << endl; cout << s3 << endl; cout << s4 << endl; char[]\u8f6c\u6574\u578bint (stoi) int atoi(const char *str) // Usage: #include <stdlib.h> char s; int val = atoi(s); // \u8fdb\u5236\u8f6c\u6362 \uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8d77\u59cb\u4f4d\u7f6e\uff09 int a = stoi(\"2001\") //a=2001 std::string::size_type sz; // \u4e00\u4e2a\u5927\u5c0f\u6570\u503c size_t alias int b = stoi(\"50 cats\", &sz) //b=50 sz=2 \u8bfb\u5165\u957f\u5ea6 int c = stoi(\"40c3\", nullptr, 16) //c=0x40c3 \u5341\u516d\u8fdb\u5236 int d = stoi(\"0x7f\", nullptr, 0) //d=0x7f \u81ea\u52a8\u68c0\u67e5\u8fdb\u5236 \u53cd\u8fc7\u6765\u662fitoa\u3002\u7136\u800c\u8fd9\u4e2a\u5728\u4e00\u4e9b\u73af\u5883\u4e0b\u662f\u6ca1\u6709\u7684\u3002 https://blog.csdn.net/p312011150/article/details/81273888 number to string int a; string s = to_string(a); sstream \u8f6c\u6362 ss << sth. \u653e\u8fdb\u53bb ss >> sth. \u62ff\u51fa\u6765 int string_to_int(const string& s) { stringstream ss; ss << s; int value; ss >> value; return value; } string s; cin >> s; cout << string_to_int(s) << endl; #include <sstream> using namespace std; int main() { stringstream ss; string s(\"403\"); int value = 404; // int to string // put int to ss ss << value; // output ss to string ss >> s; cout << s << endl; // string to int // put string to ss ss << s; // output ss to int ss >> value; cout << value << endl; return 0; } sstream\u590d\u7528\u7684\u5751 ss.clear() \u662f\u72b6\u6001\u4f4d\u3002\u6bd4\u5982\u4e0a\u4e00\u6b21\u7528\u5230\u672b\u5c3e\u65f6\u4e0b\u4e00\u6b21\u518d\u7528\u5c31\u9700\u8981clear\u3002 ss.str(\"\") \u662f\u6e05\u7a7a\u5185\u5bb9\u4ee5\u4f9b\u590d\u7528\u3002 sstream\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32 https://blog.csdn.net/liitdar/article/details/82598039 \u65b0\u7684ss\u4e00\u6b21\u6027\u62fc\u63a5 ss << s1 << s2 << s3; cout << ss.str() << endl; \u7528\u8fc7\u7684ss\u5728\u5c3e\u90e8\u6dfb\u52a0 \u9700\u8981\u7528\u5230clear\u6765\u6e05\u695a\u201c\u9519\u8bef\u72b6\u6001\u201d\u3002 https://www.cnblogs.com/elenno/p/stringstream_clear.html ss >> value; // used ss.clear(); ss << \", 403\"; // add something after being used cout << ss.str() << endl; \u57fa\u4e8estringstream\u7684\u7c7b\u578b\u8f6c\u6362\u6a21\u677f\u51fd\u6570 template <class InType, class OutType> OutType convert(InType val) { static stringstream ss; ss.str(\"\"); // empty the buffer ss.clear(); // clear the state ss << val; OutType res; ss >> res; return res; } vector vector<double> vec = { 0, 1, 2, 3, 4, 5 }; for (int i = 6; i <= 10; i++) vec.push_back(i); vec.insert(vec.begin() + 4, 3.5); // \u5728index=4\u524d\u63d2\u51653.5 vec.erase(vec.begin() + 10); // \u5220\u9664index=10\uff08\u5143\u7d209\u88ab\u5220\u6389\u4e86\uff09 vec.emplace(vec.begin() + 10, 9); // \u5728index=10\u524d\u63d2\u51659 vec.emplace_back(11); vector<double> vec2(vec.begin() + 1, vec.begin() + 3); // [\u5de6, \u53f3) for (auto& i : vec) { cout << i << ' '; } cout << endl; for (auto& i : vec2) { cout << i << ' '; } \u6b63\u5219\u8868\u8fbe\u5f0f #include <regex> // \u5b57\u7b26\u4e32\u80fd\u5426\u5b8c\u5168\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f string s(\"subject\"); regex e(\"sub.*\"); cout << regex_match(s, e) << endl; // \u5b8c\u5168\u5339\u914d\uff1b\u5206\u7ec4\u6355\u83b7 // \u6bcf\u7ec4\u7528()\u6807\u8bc6\uff1b0\u53f7\u6c38\u8fdc\u662f\u88ab\u5339\u914d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab // \u4e0d\u60f3\u6355\u83b7\u7684\u5206\u7ec4\u8fd9\u6837\u6807\u8bb0\uff1a (?:pattern) string s(\"ver10\"); regex e(R\"(ver(\\d+))\"); smatch sm; // smatch \u5bf9\u8c61\u5b58\u50a8\u5206\u7ec4\u7ed3\u679c if (regex_match(s, sm, e)) // \u5224\u65ad\u662f\u5426\u6210\u529f\u5e76\u5b58\u50a8\u7ed3\u679c { cout << sm.size() << endl; // smatch\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\uff1b\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9string\u5bf9\u8c61 for (auto& i : sm) // for (int i = 0; i < sm.size(); i++) { cout << i << endl; } } // \u641c\u7d22 // \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u5b50\u4e32\uff0c\u5b58\u50a8\u5230smatch\u5bf9\u8c61\u4e2d smatch result; regex_research(s, result, re); smatch sm; name = reg_match(state, \"(My name is |I am )(\\\\w+)\")[2]; sm = reg_match(state, \"([1-9]\\\\d{0,3})[-.](1[0-2]|0?[1-9])[-.](3[01]|[12]\\\\d|0?[1-9])\"); birth = Date(sm[1], sm[2], sm[3]); phone = reg_match(state, \"\\\\d{11}\")[0]; email = reg_match(state, \"\\\\w+.?@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+\")[0]; // \u66ff\u6362 string s(\"this subject has a submarine\"); regex e(R\"(sub[\\S]*)\"); //regex_replace\u8fd4\u56de\u503c\u5373\u4e3a\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32 cout << regex_replace(s,e,\"SUB\") << endl; // this SUB has a SUB // regex_replace(s, re, s1) // \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u66ff\u6362\u4e0a\u53bb\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7 // $& \u4ee3\u8868re\u5339\u914d\u7684\u5b50\u4e32 // $1, $2 \u4ee3\u8868re\u5339\u914d\u7684\u7b2c1/2\u4e2a\u5206\u7ec4 string s(\"this subject has a submarine\"); regex e(R\"((sub)([\\S]*))\"); cout << regex_replace(s,e,\"$1 and [$2]\") << endl; // this sub and [ject] has a sub and [marine] http://tool.chinaz.com/regex/ \u8d2a\u5a6a\u4e0e\u61d2\u60f0 \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 isdigit isdigit('3'); // \u53c2\u6570\u63a5\u6536\u4e00\u4e2aint\uff1b\u63a5\u6536\u5230EOF\u8fd4\u56defalse\u53ef\u7528\u4e8e\u5224\u65ad\u8bfb\u5165\u7ed3\u675f","title":"OOP Notes for exam"},{"location":"C%2B%2B/oop/#oop-notes-for-exam","text":"","title":"OOP Notes for exam"},{"location":"C%2B%2B/oop/#_1","text":"","title":"\u57fa\u672c\u5199\u6cd5"},{"location":"C%2B%2B/oop/#makefile","text":"\u5e38\u89c4\u7248\uff1a all: test # \u53ea\u8f93\u5165make\u5b83\u5c31\u627e\u7b2c\u4e00\u4e2a test: product.o sum.o main.o functions.h g++ product.o sum.o main.o -o test # specify the name of the output product.o: product.cpp functions.h g++ -c product.cpp -o product.o # -c\u8868\u793a\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5 sum.o: sum.cpp functions.h g++ -c sum.cpp -o sum.o main.o: main.cpp functions.h g++ -c main.cpp -o main.o clean: # clean\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u4f9d\u8d56\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6240\u4ee5\u9700\u8981make clean rm *.o test \u6bd4\u8f83\u901a\u7528\u7684\u7248\u672c\uff1a #################################### # Learnt from Internet # Edited by Colin # 2020.02 #################################### cc = g++ FLAG = CXXFLAGS = -O2 --std=c++17 prom = main deps = $(shell find . -maxdepth 1 -name \"*.h\") src = $(shell find . -maxdepth 1 -name \"*.cpp\") obj = $(src:%.cpp=%.o) $(prom): $(obj) $(cc) -o $(prom) $(obj) %.o: %.cpp $(deps) $(cc) $(CXXFLAGS) $(FLAG) -c $< -o $@ # $< \u6307\u4ee3\uff08\u5192\u53f7\u540e\uff09\u7b2c\u4e00\u4e2a\u524d\u7f6e\u6761\u4ef6\uff0c\u8fd9\u91cc\u662f.cpp # $@\u6307\u4ee3\u5f53\u524d\u76ee\u6807\uff0c\u8fd9\u91cc\u5c31\u662f.o .PHONY: clean # \u4f2a\u76ee\u6807\uff0c\u907f\u514d\u6709\u4e2a\u6587\u4ef6\u53eb\u505aclean clean: rm -rf $(prom) $(obj)","title":"makefile"},{"location":"C%2B%2B/oop/#argv","text":"\u4f8b\u5b50 int main(int argc, char** argv) { int a, b; a = atoi(argv[1]); b = atoi(argv[2]); std::cout << a + b << std::endl; return 0; } argc\u662f\u53c2\u6570\u7684\u6570\u91cf\uff0c\u7b97\u4e0a\u7a0b\u5e8f\u540dargv[0]\u3002\u904d\u5386argc\u65f6\u6709\u7528\uff0c\u56e0\u4e3aargc\u4e0d\u597d\u77e5\u9053\u6709\u51e0\u4e2a\u3002 argv\u662f\u53c2\u6570\u3002\u7b2cn\u4e2a\u53c2\u6570\u4e3aargv[n]\u3002","title":"\u7a0b\u5e8f\u547d\u4ee4\u884c\u53c2\u6570 argv"},{"location":"C%2B%2B/oop/#gdb","text":"g++ -g a.cpp \u2013o a.out\u7f16\u8bd1\u7a0b\u5e8f gdb a.out \u8c03\u8bd5a.out\u7a0b\u5e8f run \u8fd0\u884c\u7a0b\u5e8f break + \u884c\u53f7 \u8bbe\u7f6e\u65ad\u70b9 break 10 if (k==2) \u53ef\u6839\u636e\u5177\u4f53\u8fd0\u884c\u6761\u4ef6\u65ad\u70b9 delete break 1 \u5220\u96641\u53f7\u65ad\u70b9 watch x \u5f53x\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u6682\u505c continue \u8df3\u81f3\u4e0b\u4e00\u4e2a\u65ad\u70b9 step \u5355\u6b65\u6267\u884c(\u8fdb\u5165) next \u5355\u6b65\u6267\u884c(\u4e0d\u8fdb\u5165) print x \u8f93\u51fa\u53d8\u91cf/\u8868\u8fbe\u5f0fx GDB\u4e2d\u8f93\u5165 p x=1\uff0c\u7a0b\u5e8f\u4e2dx\u7684\u503c\u4f1a\u88ab\u624b\u52a8\u4fee\u6539\u4e3a1 display x \u6301\u7eed\u76d1\u6d4b\u53d8\u91cf/\u8868\u8fbe\u5f0fx list \u5217\u51fa\u7a0b\u5e8f\u6e90\u4ee3\u7801 quit \u9000\u51fa \u56de\u8f66 \u91cd\u590d\u4e0a\u4e00\u6761\u6307\u4ee4 info break\u770b\u65ad\u70b9\u4fe1\u606f Disp \u5217\u4ee3\u8868\u65ad\u70b9\u88ab\u547d\u4e2d\u540e\uff0c\u8be5\u65ad\u70b9\u4fdd\u7559(keep)\u3001\u5220\u9664(del)\u8fd8\u662f\u5173\u95ed(dis) https://zhuanlan.zhihu.com/p/29468840","title":"gdb\u8c03\u8bd5"},{"location":"C%2B%2B/oop/#overload","text":"\u540c\u540d\u3001 \u53c2\u6570\u5fc5\u987b\u4e0d\u540c \u3002\u4f5c\u7528\u57df\u76f8\u540c\u3002\u8fd4\u56de\u503c\u53ef\u76f8\u540c\u4e5f\u53ef\u4e0d\u540c\u3002 \u6839\u636e\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u9645\u53c2\u6570\u51b3\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528 \u3002 \u5c5e\u4e8e\u9759\u6001\u591a\u6001\u3002\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u3002 \u5185\u7f6e\u7c7b\u578b\u8f6c\u6362\uff1a\u5f53\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u7c7b\u578b\u5339\u914d\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u5426\u5219\u624d\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362","title":"\u51fd\u6570\u91cd\u8f7d overload"},{"location":"C%2B%2B/oop/#auto","text":"\u51fd\u6570\u53c2\u6570\u4e0d\u80fd\u662fauto\u7c7b\u578b\u3002 \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570 \u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u58f0\u660e\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e auto func(char* ptr, int val) -> int;","title":"auto"},{"location":"C%2B%2B/oop/#decltype","text":"\u7c7b\u578b\u63a8\u5bfc\u3002 decltype(a)","title":"decltype"},{"location":"C%2B%2B/oop/#_2","text":"https://github.com/thu-coai/THUOOP/issues/24 // \u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u7684\u9000\u5316\u7248\u672c int a = 3; int& b = a; double c = 3.14; decay_t< decltype(b) >; // int // \u5f97\u5230\u201c\u66f4\u901a\u7528\u7248\u672c\u201d common_type_t< decltype(b) >; // int; \u4e00\u4e2a\u5c31\u76f4\u63a5\u9000\u5316 common_type_t< decltype(b), decltype(c) >; // double \u4f8b\u5b50\uff1a // max \u51fd\u6570 template<typename T1, typename T2> std::common_type_t<T1, T2> max(T1 a, T2 b) { return b < a ? a : b; } // \u8fd4\u56de\u5bb9\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u503c template <class A> auto work2(const A& _array) -> common_type_t< decltype(_array.front()) > { return _array.front(); } // \u4eff\u7167\u6b64\u65b9\u6cd5\u53ef\u4ee5\u628a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5305\u88c5\u8fdb\u6a21\u677f\u7c7b\u518d\u8fd4\u56de template <class A> auto work2(const A& _array) -> MyArray < common_type_t< decltype(_array.front()) > > { /* ... */ }","title":"\u66f4\u9ad8\u7ea7\u7684\u8fd4\u56de\u503c\u63a8\u5bfc\u7528\u6cd5"},{"location":"C%2B%2B/oop/#new-delete","text":"delete[] array \u8be6\u7ec6\u8fc7\u7a0b\u89c1PPT L5 P42","title":"new &amp; delete"},{"location":"C%2B%2B/oop/#_3","text":"#ifndef MATRIX_H #define MATRIX_H #endif","title":"\u907f\u514d\u91cd\u590d\u5305\u542b\u5934\u6587\u4ef6"},{"location":"C%2B%2B/oop/#operator","text":"bool operator< (const Computer& _y) { }","title":"operator&lt;"},{"location":"C%2B%2B/oop/#operator_1","text":"\u524d\u7f00\uff1a\u76f4\u63a5++ Test& operator++ () { ++data; return *this; // \u8fd4\u56de\u81ea\u8eab } \u540e\u7f00\uff1a\u54d1\u5143\u53c2\u6570int \u5148\u6784\u9020\u4e00\u4e2a\u539f\u6765\u7684\uff0c\u8fd4\u56de++\u4e4b\u524d\u7684\u3002 Test operator++(int) { Test test(data); ++data; return test; }","title":"operator++"},{"location":"C%2B%2B/oop/#operator_2","text":"\u53ef\u7528\u4e8e\u201c\u5b57\u5178\u201d/map\u3002 \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u662f\u5f15\u7528\uff0c\u5219\u6570\u7ec4\u8fd0\u7b97\u7b26\u8c03\u7528\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u5de6\u8fb9\uff0c\u63a5\u53d7\u8d4b\u503c\uff0c\u5373 Obj[index] = value; \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9 Var = Obj[index]; char week_name[7][4] = { \"mon\", \"tu\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\"}; class WeekTemp { int temp[7]; public: int& operator[] (const char* name) // \u5b57\u7b26\u4e32\u4f5c\u4e0b\u6807 { for (int i = 0; i < 7; i++) { if (strcmp(week_name[i], name) == 0) return temp[i]; } } };","title":"operator[]"},{"location":"C%2B%2B/oop/#operator_3","text":"\u4e3a\u4ec0\u4e48\u91cd\u8f7d\u6d41\u8fd0\u7b97\u7b26\u8981\u8fd4\u56de\u5f15\u7528\uff1f\u907f\u514d\u590d\u5236\u3002 friend istream& operator>> (istream& in, Test& dst) { in >> dst.id; return in; } friend ostream& operator<< (ostream& out, const Test& src) { out << src.id << endl; return out; } cin >> obj; cout << obj << endl; \u9700\u8981\u4f7f\u7528\u53cb\u5143\u51fd\u6570 \u3002\u56e0\u4e3a\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u53c2\u6570this\u3002\u800c\u6d41\u64cd\u4f5c\u7b26\u5de6\u8fb9\u5fc5\u987b\u662f\u6d41\u7c7b\u578b\u3002\u53cb\u5143\u51fd\u6570\u5c31\u6ca1\u6709\u90a3\u4e2athis\uff0c\u6ee1\u8db3\u4e86\u8981\u6c42\u3002","title":"operator&lt;&lt;"},{"location":"C%2B%2B/oop/#_4","text":"\u53cb\u5143\u4e0d\u7ee7\u627f\uff01 class Y {}; // Y\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 class A { int data; // \u79c1\u6709\u6570\u636e\u6210\u5458 enum { a = 100 }; // \u79c1\u6709\u679a\u4e3e\u9879 friend class X; // \u53cb\u5143\u7c7b\u524d\u7f6e\u58f0\u660e\uff08\u8be6\u7ec6\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 friend Y; // \u53cb\u5143\u7c7b\u58f0\u660e\uff08\u7b80\u5355\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 (C++11\u8d77) }; class X {}; // X\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458","title":"\u53cb\u5143\u4e0e\u53cb\u5143\u7c7b"},{"location":"C%2B%2B/oop/#static","text":"\u9759\u6001\u53d8\u91cf\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u53d8\u91cf \u5b9a\u4e49\u793a\u4f8b\uff1astatic int i = 1; \u521d\u59cb\u5316\uff1a\u521d\u6b21\u5b9a\u4e49\u65f6\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5982\u679c\u5b9a\u4e49\u65f6\u4e0d\u521d\u59cb\u5316\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a0 \u9759\u6001\u5c40\u90e8\u53d8\u91cf \u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u5c06\u6301\u7eed\u5230 \u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f \u9759\u6001\u5168\u5c40\u53d8\u91cf \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c \u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u51b2\u7a81 \u9759\u6001\u51fd\u6570\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u51fd\u6570 \u5b9a\u4e49\u793a\u4f8b\uff1astatic int func() {\u2026} \u9759\u6001\u51fd\u6570 \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u51b2\u7a81","title":"\u9759\u6001 static"},{"location":"C%2B%2B/oop/#_5","text":"\u5c5e\u4e8e\u6574\u4e2a\u7c7b\uff1b\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5df2\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u9759\u6001\u6570\u636e\u6210\u5458\u5e94\u8be5\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\uff0c\u5728.cpp\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u5728.h\u6587\u4ef6\u4e2d\u540c\u65f6\u5b8c\u6210\u58f0\u660e\u548c\u5b9a\u4e49\uff0c\u94fe\u63a5\u5c06\u65e0\u6cd5\u8fdb\u884c\u3002\u56e0\u4e3a\u53ef\u80fd\u5934\u6587\u4ef6\u88ab\u5305\u542b\u4e86\u591a\u6b21\uff0c\u4ece\u800c\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u3002 test.h\uff1a class Test { public: static int count; //\u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458\uff1b\u5bf9\u7c7b\u5b9e\u4f8b\u8ba1\u6570\u7528 Test(); ~Test(); }; test.cpp\uff1a #include \u201cTest.h\u201d int Test::count = 0; //\u5b9a\u4e49\u9759\u6001\u6570\u636e\u6210\u5458\uff08\u8981\u52a0\u4e0a\u7c7b\u578b\uff09 Test::Test() { count ++; } Test::~Test() { count --; } main.cpp\uff1a #include <iostream> #include \u201cTest.h\u201d using namespace std; int main() { Test t1[10]; cout << \u201cTest#: \u201d << Test::count << \u201c or \u201d << t1[0].count << endl; //\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458 }","title":"\u9759\u6001\u6570\u636e\u6210\u5458\uff08\u9759\u6001\u6210\u5458\u53d8\u91cf\uff09\uff08\u201c\u7c7b\u53d8\u91cf\u201d\uff09"},{"location":"C%2B%2B/oop/#_6","text":"\u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\uff0c\u5426\u5219\u76f8\u5f53\u4e8e\u4f7f\u7528\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf static int how_many() { return count; } cout << Test::how_many() << endl;","title":"\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"C%2B%2B/oop/#_7","text":"","title":"\u5f15\u7528"},{"location":"C%2B%2B/oop/#_8","text":"\u7c7b\u6210\u5458\u91cc\u6709\u6307\u9488\u65f6\u6700\u597d\u8fd9\u6837\uff0c\u907f\u514d\u51fd\u6570\u7ed3\u675f\u65f6delete\u4e86\u5f62\u53c2\u91cc\u7684\u6307\u9488\u3002","title":"\u5f15\u7528\u4f20\u53c2\u4e0d\u6784\u9020\u4e5f\u4e0d\u6790\u6784"},{"location":"C%2B%2B/oop/#_9","text":"","title":"\u5f15\u7528\u4e0d\u80fd\u6539\u6307\u5411"},{"location":"C%2B%2B/oop/#_10","text":"\u53c2\u6570\u662f\u8bed\u8a00\u89c4\u5b9a\u7684\uff0c\u662f\u540c\u7c7b\u5bf9\u8c61\u7684\u5e38\u91cf\u5f15\u7528 MyClass(const MyClass& src) {} \u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\uff0c\u5219\u81ea\u52a8\u5408\u6210\uff0c\u91c7\u7528~~\u4f4d\u62f7\u8d1d(Bitcopy)~~\uff0c\u5373\u76f4\u63a5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u7c7b\u7684\u6240\u6709\u6570\u636e\u6210\u5458\u3002 \u88ab\u8c03\u7528\u7684\u4e09\u79cd\u5e38\u89c1\u60c5\u51b5\uff1a 1\u3001\u7528\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u5b9a\u4e49\u53e6\u4e00\u4e2a\u65b0\u7684\u7c7b\u5bf9\u8c61 Test a; Test c = a; // \u5e76\u4e0d\u662f\u8c03\u7528\u91cd\u8f7d\u7684\u7b49\u53f7\uff01\uff01\u800c\u662f\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff01 Test b(a); 2\u3001\u51fd\u6570\u8c03\u7528\u65f6\u4ee5\u7c7b\u7684\u5bf9\u8c61\u4e3a\u5f62\u53c2 \u51fd\u6570\u8c03\u7528\uff0c\u5f62\u53c2\u4f20\u53c2 Func(Test a) 3\u3001\u51fd\u6570\u8fd4\u56de\u7c7b\u5bf9\u8c61 Test Func(void) \u8fd4\u56de\u503c\u65f6\u6784\u9020\u4e34\u65f6\u5bf9\u8c61 MyClass res = f(a) \u6ca1\u6709RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u4e34\u65f6\u53d8\u91cf\u518d\u7ed9 res \u3002 \u7981\u6b62RVO\u7684\u7f16\u8bd1\u9009\u9879\uff1a -fno-elide-constructors","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"C%2B%2B/oop/#_11","text":"int &&e = a + b; int &&j = lvalue; // NOT allowed \u5de6\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u5de6\u503c\uff0c\u53f3\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u53f3\u503c\u3002 \u5e38\u91cf\u5de6\u503c\u5f15\u7528\u80fd\u4e5f\u7ed1\u5b9a\u53f3\u503c\u3002 const int &e = 3; void ref(int &&x) { cout << \"right \" << x << endl; } ref(404); \u6df7\u6dc6\uff1a\u53f3\u503c\u5f15\u7528\u672c\u8eab\u4e3a\u5de6\u503c\u3002","title":"\u53f3\u503c\u5f15\u7528"},{"location":"C%2B%2B/oop/#_12","text":"Test(Test&& t) : buf(t.buf) { //\u76f4\u63a5\u590d\u5236\u5730\u5740\uff0c\u907f\u514d\u62f7\u8d1d cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl; t.buf = nullptr; // \u5c06t.buf\u6539\u4e3anullptr\uff0c\u4f7f\u5176\u4e0d\u518d\u6307\u5411\u539f\u6765\u5185\u5b58\u533a\u57df // \u8fd9\u4e4b\u540et\u5c31\u7528\u4e0d\u4e86\u4e86\uff1b\u5b83\u7684\u5730\u5740\u73b0\u5728\u88ab\u62f7\u8d1d\u76ee\u6807\u5bf9\u8c61\u6240\u6709 } \u7981\u6b62RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u79fb\u52a8\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u518d\u79fb\u52a8\u7ed9\u76ee\u6807\u5bf9\u8c61\u3002 std::move \uff1a\u5c06\u5de6\u503c\u8f6c\u5316\u4e3a\u53f3\u503c move\u51fd\u6570\u672c\u8eab\u4e0d\u5bf9\u5bf9\u8c61\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u4ec5\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u8f6c\u6362\u4e3a\u53f3\u503c\u3002 \u79fb\u52a8\u7684\u5177\u4f53\u64cd\u4f5c\u5728\u79fb\u52a8\u6784\u9020\u51fd\u6570\u5185\u5b9e\u73b0\u3002 Test y = std::move(x); f(std::move(z)); // \u8c03\u7528f\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4f20\u53c2\u7248\u672c // \u6027\u80fd\u66f4\u597d\u7684swap\u51fd\u6570 template <class T> swap(T& a, T& b) { T tmp(std::move(a)); a = std::move(b); b = std::move(tmp); }","title":"\u79fb\u52a8\u6784\u9020\u51fd\u6570"},{"location":"C%2B%2B/oop/#_13","text":"\u8d4b\u503c\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u8981\u662f\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570(non-static member function)\uff0c \u4e0d\u80fd\u662f\u53cb\u5143\u51fd\u6570 \u3002 MyClass& operator= (const MyClass& right) { if (this != &right) { // \u907f\u514d\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1 // \u5c06right\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u5f53\u524d\u5bf9\u8c61\u4e2d... } return *this; // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61 } \u6ce8\u610f\u533a\u5206\u4e0b\u9762\u4e24\u79cd\u4ee3\u7801\uff1a // \u5df2\u7ecf\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u8d4b\u503c\uff0c\u8c03\u7528\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 ClassName a; ClassName b; a = b; // a\u672a\u5b9a\u4e49\uff1b\u7528b\u521d\u59cb\u5316a ClassName a = b;","title":"\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#_14","text":"Test& operator= (Test&& right) { if (this == &right) // \u907f\u514d\u81ea\u5df1\u7ed9\u81ea\u5df1\uff08\u65e0\u7528\u64cd\u4f5c\uff09 cout << \"same obj!\\n\"; else { this->buf = right.buf; // \u76f4\u63a5\u8d4b\u503c\u5730\u5740 right.buf = nullptr; // \u539f\u6765\u7684\u7f6e\u7a7a cout << \"operator=(Test&&) called.\\n\u201c; } return *this; }","title":"\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#_15","text":"\u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\u5fc5\u987b\u6070\u597d\u7528\u4e00\u79cd\u3002","title":"\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#_16","text":"// Src -> Dst \u7684\u8f6c\u6362 class Src { public: operator Dst() const { // \u8fd4\u56de\u503c\u7c7b\u578b\u662fDst\uff1b\u5728convert function\u4e2d\u5fc5\u987b\u7701\u7565\u4e0d\u5199 Dst ret; // ... return ret; } }","title":"\u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#_17","text":"class Src; // \u524d\u7f6e\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728Dst\u4e2d\u8981\u7528\u5230Src\u7c7b class Dst { public: Dst(const Src& s) { // cout << \"Dst::Dst(const Src&)\" << endl; } };","title":"\u6784\u9020\u51fd\u6570\u8f6c\u6362\u6cd5"},{"location":"C%2B%2B/oop/#_18","text":"\u5982\u679c\u7528explicit\u4fee\u9970\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u6216\u7c7b\u578b\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff0c\u5219\u76f8\u5e94\u7684\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u663e\u5f0f\u5730\u8fdb\u884c\u3002 explicit operator Dst() const; explicit Dst(const Src& s); Dst d1(s); //\u53ef\u4ee5\u6267\u884c\uff0c\u88ab\u8ba4\u4e3a\u662f\u663e\u5f0f\u521d\u59cb\u5316","title":"\u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#_19","text":"const_cast\uff0c\u53bb\u9664\u7c7b\u578b\u7684const\u6216volatile\u5c5e\u6027\u3002 static_cast\uff0c\u7c7b\u4f3c\u4e8eC\u98ce\u683c\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u65e0\u6761\u4ef6\u8f6c\u6362\uff0c\u9759\u6001\u7c7b\u578b\u8f6c\u6362\u3002 dynamic_cast\uff0c\u52a8\u6001\u7c7b\u578b\u8f6c\u6362\uff0c\u5982 \u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u4e4b\u95f4 \u7684\u591a\u6001\u7c7b\u578b\u8f6c\u6362\u3002 reinterpret_cast\uff0c\u4ec5\u4ec5\u91cd\u65b0\u89e3\u91ca\u7c7b\u578b\uff0c\u4f46\u6ca1\u6709\u8fdb\u884c\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362\u3002 \u5982\uff1a Dst d2 = static_cast<Dst>(s);","title":"\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#_20","text":"\u6784\u9020\u987a\u5e8f\uff1a\u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u6790\u6784\u987a\u5e8f\uff1a\u4e0e\u6784\u9020\u987a\u5e8f\u76f8\u53cd","title":"\u7c7b\u7684\u7ec4\u5408"},{"location":"C%2B%2B/oop/#_21","text":"class Child : Father {}; // \u9ed8\u8ba4\u4e3aprivate\u7ee7\u627f class Child : public Father {}; class Child : protected Father {}; // \u5f88\u5c11\u88ab\u4f7f\u7528 \u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u53cb\u5143\u51fd\u6570\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u88ab\u7ee7\u627f\uff01 \u5b50\u7c7b\u82e5\u60f3\u8981\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u6210\u5458\u5217\u8868 \u4e2d\u8fdb\u884c\u3002 Derive(int i) : Base(i) {}; \u7ee7\u627f\u7236\u7c7b\u6784\u9020\u51fd\u6570 Base(int i) : data(i) {}; using Base::Base; ///\u76f8\u5f53\u4e8e Derive(int i):Base(i) {}; // \u5f53\u7236\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4e00\u53e5using\u53ef\u4ee5\u81ea\u52a8\u6784\u9020\u76f8\u5e94\u7684\u591a\u4e2a","title":"\u7c7b\u7684\u7ee7\u627f"},{"location":"C%2B%2B/oop/#redefining","text":"\u76ee\u7684\uff1a\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u51fd\u6570\uff0c\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u7279\u6b8a\u529f\u80fd\u3002 \u5c4f\u853d\u4e86\u57fa\u7c7b\u7684\u6240\u6709\u5176\u5b83\u540c\u540d\u51fd\u6570\u3002 \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u4e0d\u540c \u76f8\u5f53\u4e8e\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u51fd\u6570\u3002\u4e00\u822c\u4e0d\u6d89\u53ca\u865a\u51fd\u6570\u3002 \u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u901a\u8fc7using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u6d3e\u751f\u7c7b\u4e2d\u201c\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u5373\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002","title":"\u91cd\u5199\u9690\u85cf redefining"},{"location":"C%2B%2B/oop/#_22","text":"\u53ea\u5bf9public\u7ee7\u627f\u6709\u6548\uff0c\u5728\u7ee7\u627f\u56fe\u4e0a\u662f\u4e0a\u5347\u7684\uff1b\u5bf9private\u3001protected\u7ee7\u627f\u65e0\u6548\u3002","title":"\u5411\u4e0a\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#_23","text":"\u901a\u8fc7\u57fa\u7c7b \u6307\u9488\u6216\u5f15\u7528 \u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\u65f6\u2026\u2026 virtual int func(int a); \u534f\u53d8\uff1a\u6d3e\u751f\u7c7b\uff08\u5b50\u7c7b\uff09\u865a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u548c\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u76f8\u540c \u5b9e\u73b0\u539f\u7406\uff1a\u865a\u51fd\u6570\u8868\u3002\u5728\u6784\u9020\u51fd\u6570\u7684\u5f00\u5934\u63d2\u5165\u4e86\u521d\u59cb\u5316VPTR\u7684\u4ee3\u7801\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u88ab\u8c03\u7528\u7684\u53ea\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u672c\u5730\u7248\u672c\uff0c\u5373\u865a\u673a\u5236\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e0d\u5de5\u4f5c\u3002 \u6790\u6784\u51fd\u6570\u5f80\u5f80\u662f\u865a\u51fd\u6570\u3002 \u865a\u673a\u5236\u5728\u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u4e0d\u5de5\u4f5c\u3002 \u91cd\u8981\u539f\u5219\uff1a \u603b\u662f\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bbe\u7f6e\u4e3a\u865a\u6790\u6784\u51fd\u6570","title":"\u865a\u51fd\u6570"},{"location":"C%2B%2B/oop/#override","text":"\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\uff0c \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u4e00\u822c\u60c5\u51b5\u5e94\u76f8\u540c \u3002 \u5c4f\u853d\u4e86\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u51fd\u6570\u3002 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u3002\u665a\u6346\u7ed1\uff08\u53ea\u5bf9\u865a\u51fd\u6570\u8d77\u4f5c\u7528\uff09\u3002 // in Father virtual void f(int a) {} // in Child virtual void f(int a) override {} // final \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u865a\u51fd\u6570\u4e0d\u80fd\u88ab\u540e\u7eed\u5b50\u7c7boverride virtual void f(int a) final {} \u4f7f\u7528const\u4fee\u9970\u6210\u5458\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u91cd\u5199\u8986\u76d6\u5931\u6548","title":"\u91cd\u5199\u8986\u76d6 override"},{"location":"C%2B%2B/oop/#_24","text":"\u7eaf\u865a\u51fd\u6570\u7684\u58f0\u660e\uff1a virtual int f(int a) = 0; // \u5728\u7c7b\u5916\u5b9a\u4e49\u51fd\u6570\uff0c\u63d0\u4f9b\u5b9e\u73b0 int MyClass::f(int a) { return 1; } \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u5c31\u662f \u62bd\u8c61\u7c7b \u3002\u4f5c\u7528\u65f6\u63d0\u4f9b\u63a5\u53e3\u3002 \u62bd\u8c61\u7c7b\u4e0d\u80fd\u5b9a\u4e49\u5bf9\u8c61\uff01\uff01\uff08\u5373\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002\uff09 \u7eaf\u865a\u51fd\u6570\u88aboverride\u4e4b\u524d\u8fd8\u662f\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u88ab\u5168\u90e8\u5b9e\u73b0\uff08\u9664\u4e86\u7eaf\u865a\u6790\u6784\u51fd\u6570\uff09\uff0c\u5219\u5176\u5b50\u7c7b\u8fd8\u662f\u62bd\u8c61\u7c7b\uff0c\u8fd8\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002 \u7eaf\u865a\u6790\u6784\u51fd\u6570 \u4ecd\u7136\u9700\u8981\u51fd\u6570\u4f53\u3002 \u76ee\u7684\uff1a\u4f7f\u57fa\u7c7b\u6210\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u57fa\u7c7b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6709\u5176\u4ed6\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u6790\u6784\u51fd\u6570\u4e0d\u5fc5\u662f\u7eaf\u865a\u7684\u3002","title":"\u62bd\u8c61\u7c7b\u4e0e\u7eaf\u865a\u51fd\u6570"},{"location":"C%2B%2B/oop/#dynamic_cast","text":"SrcClass* p1; TargetClass* p2 = dynamic_cast<TargetClass*>(p1); Father* p1; Child* p2 = dynamic_cast<Child*>(p1);","title":"\u5411\u4e0b\u7c7b\u578b\u8f6c\u6362 dynamic_cast"},{"location":"C%2B%2B/oop/#template","text":"\u6a21\u677f\u53c2\u6570\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u3002\u56e0\u6b64\u4e0d\u80fd\u4e3a\u53d8\u91cf\uff0c\u53ea\u80fd\u662f\u5e38\u91cf\u3002\u9759\u591a\u6001\u3002 \u51fd\u6570\u6a21\u677f template <typename T> // template <class T> T sum(T a, T b) { return a + b; } // \u6307\u5b9a\u8c03\u7528\u7c7b\u578b sum<int>(9, 2.1); \u7c7b\u6a21\u677f template <typename T> class A { T data; public: void print(); template <typename T1> T1 get(); }; //\u7c7b\u5916\u5b9a\u4e49\u7c7b\u6a21\u677f\u4e2d\u7684\u6210\u5458\u51fd\u6570 template <typename T> void A<T>::print() {} // \u201c\u53cc\u91cd\u6a21\u677f\u201d template <typename T> template <typename T1> T1 A<T>::get() {} A<int> a; \u7c7b\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 template <typename T, unsigned size> class Array { T data[size]; public: void print(); }; A<int, 10> a;","title":"\u6a21\u677f template"},{"location":"C%2B%2B/oop/#_25","text":"\u666e\u901a\u6570\u7ec4\uff1b\u628a\u5927\u5c0f\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570n\uff1b\u6ce8\u610f\u7b26\u53f7\u201c&\u201d\u3002 template <class A, int n> void work(const A (&_array)[n]) { } // call the function double arr = { 0, 1, 2 }; work(arr);","title":"\u4f20\u9012\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570"},{"location":"C%2B%2B/oop/#thread","text":"void test(int seconds) { this_thread::sleep_for(chrono::seconds(seconds)); } int main() { thread t_nothing; // \u521b\u5efa\u4e00\u4e2a\u7a7athread thread t1(test, 3); // \u521b\u5efa\u4e00\u4e2athread thread t2(test, 2); // thread \u521b\u5efa\u4e4b\u540e\u5230\u9500\u6bc1\u4e4b\u524d\uff0c\u5fc5\u987b\u51b3\u5b9ajoin\u8fd8\u662fdetach t1.join(); t2.detach(); // \u529f\u80fd\u6027\u63a5\u53e3 this_thread::get_id(); this_thread::sleep_for(); this_thread::sleep_until(); this_thread::yield(); return 0; }","title":"\u591a\u7ebf\u7a0b thread"},{"location":"C%2B%2B/oop/#_26","text":"#include <iostream> #include <cmath> #include <vector> #include <thread> using namespace std; thread* threads[4]; // \u7ebf\u7a0b\u6307\u9488 int thread_total[4]; //\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8ba1\u6570\u5668 int total = 0, mi, mx; //\u603b\u8ba1\u6570\u5668 bool check_num(int num) { /* ... */ } //\u679a\u4e3e\u662f\u5426\u4e3a\u7d20\u6570 //\u7edf\u8ba1[l,r)\u4e4b\u95f4\u7684\u7d20\u6570\u4e2a\u6570 //\u5b58\u5165thread_total[num]\u4e2d void check(int l, int r, int num) { thread_total[num] = 0; for (int i = l; i < r; i++) if (check_num(i)) thread_total[num]++; } int main() { mi = 1; for (int i = 0; i < 4; i++) { // \u7528\u5faa\u73af\u521b\u5efa\u7ebf\u7a0b mx = mi + 5000000 / 4; if (mx > 5000000) mx = 5000000; //\u4e3a\u7b2ci\u4e2a\u7ebf\u7a0b\u5206\u914d[mi,mx)\u533a\u95f4\u7684\u4efb\u52a1 threads[i] = new thread(check, mi, mx, i); mi = mx; } //\u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6240\u6709\u5b50\u7ebf\u7a0b\u5b8c\u6210\u7edf\u8ba1 for (int i = 0; i < 4; i++) threads[i]->join(); //\u6c47\u603b\u5b50\u7ebf\u7a0b\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u91ca\u653ethread\u5b9e\u4f8b for (int i = 0; i < 4; i++) { total += thread_total[i]; delete threads[i]; } //\u8f93\u51fa cout << total << endl; return 0; }","title":"\u4e3b\u4ece\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#mutex","text":"static mutex exclusive; // \u4e92\u65a5\u91cf void check_range(int l, int r) { int tmp_total = 0; for (int i = l; i < r; i++) if (check_num(i)) tmp_total++; exclusive.lock(); //\u52a0\u9501 total+=tmp_total; exclusive.unlock(); //\u89e3\u9501 }","title":"\u4e92\u65a5\u9501\u6a21\u5f0f mutex"},{"location":"C%2B%2B/oop/#async-future","text":"#include <future> #include <chrono> int worker(int arg) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int main() { future<int> fut = async(worker, 403); // auto fut = async(worker, 403); // future\u7684\u63a5\u53e3 fut.wait(); // \u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u7ebf\u7a0b\u7ed3\u675f int res = fut.get(); // get\u8fd0\u884c\u7ed3\u679c\uff1b\u4e00\u4e2afuture\u53ea\u80fd\u88abget\u4e00\u6b21 fut.wait_for(chrono::milliseconds(100)); // \u8d85\u65f6\u540e\u8fd4\u56de\u4e00\u4e2afuture_status\uff0c\u5e76\u53d6\u6d88\u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u963b\u585e /* future_status::deferred \u4ecd\u672a\u542f\u52a8 future_status::ready \u7ed3\u679c\u5c31\u7eea future_status::timeout \u5df2\u8d85\u8fc7\u65f6\u9650\uff0c\u5f02\u6b65\u7ebf\u7a0b\u4ecd\u5728\u6267\u884c */ return 0; }","title":"\u5f02\u6b65 async future"},{"location":"C%2B%2B/oop/#_27","text":"int worker(int arg) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int input() { /* ... */ } vector<future<int>> future_lists; // \u5f02\u6b65\u7ebf\u7a0b\u5bf9\u8c61\u8868 vector<int> num_lists; // \u8f93\u5165\u6570\u636e\u8868 int main() { while (ture) { int num = input(); //\u521b\u5efa\u5f02\u6b65\u7ebf\u7a0b future_lists.push_back(async(worker, num)); num_lists.push_back(num); res_lists.push_back(0); //\u901a\u8fc7future\u68c0\u6d4b\u6bcf\u4e00\u4e2a\u5f02\u6b65\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210 for (int i = future_lists.size() - 1; i >= 0; i--) { //\u6bcf\u4e2afuture\u7b49\u5f850.1\u79d2\u6765\u68c0\u6d4b\u72b6\u6001 future_status status = future_lists[i].wait_for( chrono::milliseconds(100)); if (status == future_status::ready) // \u5df2\u7ecf\u5f97\u5230\u4e86\u7ed3\u679c { // \u8f93\u51fa\u7ed3\u679c cout << num_lists[i] << \" : \" << future_lists[i].get() << endl; //\u5220\u9664\u5df2\u7ecf\u5b8c\u6210\u4efb\u52a1\u7684future future_lists.erase(future_lists.begin() + i); num_lists.erase(num_lists.begin() + i); } } return 0; }","title":"\u8f6e\u8be2"},{"location":"C%2B%2B/oop/#promise","text":"","title":"promise"},{"location":"C%2B%2B/oop/#_28","text":"double work(int& x); // [\u8fd4\u56de\u503c] (*[\u58f0\u660e\u7684\u53d8\u91cf\u540d])([\u53c2\u6570\u7c7b\u578b\u5217\u8868]) double (*fp)(int&) = work; // \u81ea\u52a8\u63a8\u5bfc auto fp = work;","title":"\u51fd\u6570\u6307\u9488"},{"location":"C%2B%2B/oop/#_29","text":"\u7c7b\u7684\u5bf9\u8c61\uff0c\u7528\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u770b\u505a\u51fd\u6570\u5bf9\u8c61\u3002\u672b\u5c3e\u5e26\u62ec\u53f7\u3002 // \u4eff\u7167greater<int>()\u5b9e\u73b0\u51fd\u6570\u5bf9\u8c61 template<class T> class Greater { public: bool operator()(const T &a, const T &b) const { // \u91cd\u8f7d()\uff1b\u7528\u4e8e\u6392\u5e8f\u7684cmp\u51fd\u6570\u7684\u7279\u70b9\uff1a\u4e09\u4e2aconst return a > b; } }; Greater<double>()(4.3, 1.0);","title":"\u51fd\u6570\u5bf9\u8c61"},{"location":"C%2B%2B/oop/#function","text":"function\u4e3a\u51fd\u6570\u6307\u9488\u4e0e\u5bf9\u8c61\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3 // function<[\u8fd4\u56de\u503c](\u53c2\u6570\u5217\u8868)> func = f; void process(function<int()> f1, function<double(int)> f2) {} int work1(); class Work2 { public: double operator()(int a) { /* ... */ } }; process(work1, Work2());","title":"function \u7c7b"},{"location":"C%2B%2B/oop/#_30","text":"#include <memory>","title":"\u667a\u80fd\u6307\u9488"},{"location":"C%2B%2B/oop/#unique_ptr","text":"\u72ec\u5360\u3002\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u8be5\u5bf9\u8c61\u3002 unique_ptr<string> p3 (new string (\"auto\")); unique_ptr<string> p4\uff1b // \u4e0d\u80fd\u518d p4 = p3; // \u8fd9\u6837new\u5b8c\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u8bb0\u5f97\u53bbdelete\u4e86\uff0c\u907f\u514d\u4e86\u5185\u5b58\u6cc4\u6f0f","title":"unique_ptr"},{"location":"C%2B%2B/oop/#shared_ptr","text":"\u5171\u4eab\u3002\u8ba1\u6570\u3002\u591a\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u76f8\u540c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u548c\u5176\u76f8\u5173 \u8d44\u6e90\u4f1a\u5728\u201c\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u88ab\u9500\u6bc1\u201d\u65f6\u5019\u91ca\u653e \u3002 // \u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u88f8\u6307\u9488\u521d\u59cb\u5316\u591a\u4e2a\u667a\u80fd\u6307\u9488 int* p = new int(); shared_ptr<int> p1(p); shared_ptr<int> p2(p); // \u4f1a\u4ea7\u751f\u591a\u4e2a\u8f85\u52a9\u6307\u9488\uff01 shared_ptr<int> sp(new int(1)); string *s1 = new string(\"s1\"); shared_ptr<string> sp1(s1); shared_ptr<string> sp2; sp2 = sp1; cout << sp1.use_count() <<endl; //\u67e5\u770b\u5f15\u7528\u8ba1\u6570 cout << sp2.use_count() << endl; cout << sp1.unique() << endl; // \u662f\u5426\u72ec\u5360 cout << sp1 << endl; // sp1\u4ee3\u8868\u7684\u6307\u9488 cout << sp1.get() << endl; // \u540c\u4e0a cout << sp1 << endl; // \"s1\"\uff1b\u76f8\u5f53\u4e8e*(sp1\u4ee3\u8868\u7684\u6307\u9488)\uff0c\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61 sp1.reset(); // \u6e05\u9664\u6307\u9488\u5e76\u51cf\u5c11\u5f15\u7528\u8ba1\u6570 // \u667a\u80fd\u6307\u9488\u7684\u5411\u4e0b\u8f6c\u6362 dynamic_pointer_cast<Child>(p);","title":"shared_ptr"},{"location":"C%2B%2B/oop/#weak_ptr","text":"\u6307\u5411\u5bf9\u8c61\uff0c\u4f46\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u3002 shared_ptr<int> sp(new int(3)); weak_ptr<int> wp1 = sp; wp.use_count() //\u83b7\u53d6\u5f15\u7528\u8ba1\u6570 wp.reset() //\u6e05\u9664\u6307\u9488 wp.expired() //\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u65e0\u6548 sp = wp.lock() //\u4ece\u5f31\u5f15\u7528\u83b7\u5f97\u4e00\u4e2a\u667a\u80fd\u6307\u9488","title":"weak_ptr \u5f31\u5f15\u7528"},{"location":"C%2B%2B/oop/#lambda","text":"[capture] (parameters) mutable -> return-type {statement} [](int x) { return x % 2 == 0;} // \u5224\u65adx\u662f\u5426\u662f\u5076\u6570","title":"Lambda \u51fd\u6570"},{"location":"C%2B%2B/oop/#_31","text":"\u80fd\u4ee5\u6700\u5c11\u7684\u4ee3\u7801\u53d8\u52a8\u5b8c\u6210\u529f\u80fd\u7684\u589e\u51cf","title":"\u884c\u4e3a\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_32","text":"//\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public: virtual ~Iterator() { } virtual Iterator& operator++() = 0; virtual float& operator++(int) = 0; virtual float& operator*() = 0; virtual float* operator->() = 0; virtual bool operator!=(const Iterator &other) const = 0; bool operator==(const Iterator &other) const { return !(*this != other); } }; class Collection { public: virtual ~Collection() { } virtual Iterator* begin() const = 0; virtual Iterator* end() const = 0; virtual int size() = 0; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float *_data; //ArrayCollection\u7684\u6570\u636e int _index; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public: ArrayIterator(float* data, int index) : _data(data), _index(index) { } ArrayIterator(const ArrayIterator& other) : _data(other._data), _index(other._index) { } ~ArrayIterator() { } Iterator& operator++() { _index++; return *this; } /* Iterator operator++(int) { ArrayIterator ret(*this); _index++; return ret; } */ float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } float& operator*() //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c { return *(_data + _index); } float* operator->() { return (_data + _index); } bool operator!=(const Iterator &other) const //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e { return (_data != ((ArrayIterator*)(&other))->_data || _index != ((ArrayIterator*)(&other))->_index); } }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float* _data; int _size; public: ArrayCollection() : _size(10) { _data = new float[_size]; } ArrayCollection(int size, float* data) : _size(size) { _data = new float[_size]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for (int i = 0; i < size; i++) *(_data+i) = *(data+i); } ~ArrayCollection() { delete[] _data; } int size() { return _size; } Iterator* begin() const //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator(_data, 0); } Iterator* end() const //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator(_data, _size); } }; // in main: float scores[]={ 90, 20, 40, 40, 30, 60, 70, 30, 90, 100 }; Collection *collection = new ArrayCollection(10, scores); Iterator* begin = collection -> begin(); Iterator* end = collection -> end(); int passed = 0; for (Iterator* p = begin; *p != *end; (*p)++) { if (**p >= 60) passed ++; } cout << passed << endl; // 5 \u5b9a\u4e49\u5b9e\u73b0\u5206\u5f00\u7248\u672c\uff1a //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public: virtual ~Iterator() { } virtual Iterator& operator++() = 0; virtual Iterator& operator++(int) = 0; virtual float& operator*() = 0; virtual float* operator->() = 0; virtual bool operator!=(const Iterator &other) const = 0; bool operator==(const Iterator &other) const { return !(*this != other); } }; class Collection { public: virtual ~Collection() { } virtual Iterator* begin() const = 0; virtual Iterator* end() const = 0; virtual int size() = 0; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float *_data; //ArrayCollection\u7684\u6570\u636e int _index; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public: ArrayIterator(float* data, int index) : _data(data), _index(index) { } ArrayIterator(const ArrayIterator& other) : _data(other._data), _index(other._index) { } ~ArrayIterator() { } Iterator& operator++(); Iterator& operator++(int); float& operator*(); float* operator->(); bool operator!=(const Iterator &other) const; }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float* _data; int _size; public: ArrayCollection() : _size(10){_data = new float[_size]; } ArrayCollection(int size, float* data) : _size(size) { _data = new float[_size]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for (int i = 0; i < size; i++) *(_data+i) = *(data+i); } ~ArrayCollection() { delete[] _data; } int size() { return _size; } Iterator* begin() const; Iterator* end() const; }; Iterator* ArrayCollection::begin() const { //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator(_data, 0); } Iterator* ArrayCollection::end() const { //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator(_data, _size); } //\u8fed\u4ee3\u5668\u5404\u79cd\u5185\u5bb9\u7684\u5b9e\u73b0 Iterator& ArrayIterator::operator++() { _index++; return *this; } //\u56e0\u4e3a\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c06\u7a7a\u95f4\u6307\u9488\u4f4d\u7f6e+1\u5373\u53ef\uff0c\u53ef\u4ee5\u601d\u8003\u4e0b\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8fd4\u56defloat&\uff0c\u800c\u4e0d\u662fIterator /* float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } */ Iterator& ArrayIterator::operator++(int) { ArrayIterator ret(*this); _index++; return ret; } //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c float& ArrayIterator::operator*() { return *(_data + _index); } float* ArrayIterator::operator->() { return (_data + _index); } //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e bool ArrayIterator::operator!=(const Iterator &other) const { return (_data != ((ArrayIterator*)(&other))->_data || _index != ((ArrayIterator*)(&other))->_index); } hasNext\u5b9e\u73b0\u6a21\u5f0f\uff1a class Item { public: Item(const string& strName, const float& price): m_name(strName),m_price(price) {} Item(const Item& item): m_name(item.m_name),m_price(item.m_price) {} string tostring() { std::stringstream buffer; buffer << m_price; string strPrice = buffer.str(); string strName = m_name + \" :\"; return strName + strPrice; } private: string m_name; float m_price; }; class Container; class Menu; class MenuIterator; class Iterator { public: virtual ~Iterator() {} //virtual void first() = 0; virtual void next() = 0; virtual bool hasnext() = 0; virtual Item* current() = 0; protected: Container * m_pContainer; }; class Container { public: virtual ~Container() {}; protected: //Observer(){}; }; class Menu : public Container { public: virtual ~Menu() { for(int i=0 ; i< m_items.size(); i++) { delete m_items[i]; } } int size() { return m_items.size(); } Item* value(int nIndex) { if(nIndex >= 0 && nIndex < m_items.size()) { return m_items[nIndex]; } else { return NULL; } } void additem(Item& item) { Item *pItem = new Item(item); m_items.push_back(pItem); } private: friend class MenuIterator; vector<Item*> m_items; }; class MenuIterator : public Iterator { Menu* m_menu; int curpos; public: MenuIterator(Menu& a): m_menu(&a), curpos(0) {} /*virtual void first() { curpos=0; }*/ virtual void next() { curpos++; } virtual bool hasnext() { if(curpos >= 0 && curpos < m_menu->m_items.size()) return true; else return false; } virtual Item* current() { return m_menu->value(curpos); } }; int main() { Item it1(\"chicken\", 10.0); Item it2(\"Apple\", 5.0); Item it3(\"Beaf\", 20.0); Item it4(\"soup\",15.0); Menu menu; menu.additem(it1); menu.additem(it2); menu.additem(it3); menu.additem(it4); Iterator* iter = new MenuIterator(menu); while(iter->hasnext()) { Item* pItem = iter->current(); if(pItem) cout << pItem->tostring() << endl; iter->next(); } }","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_33","text":"\u62bd\u8c61\u7236\u7c7b\u5b9a\u4e49\u63a5\u53e3\u3001\u6d41\u7a0b\uff0c\uff08\u6bcf\u79cd\u7ec4\u5408\u7684\uff09\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\u3002\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\u3002 \u62bd\u8c61\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u3002 \u5219\u4e00\u5171\u9700\u8981m*n\u4e2a\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 class AbstractClass { public: virtual void operation1() = 0; virtual void operation2() = 0; void run() { // \u5b9a\u4e49\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b operation1(); operation2(); } }; class ConcreteA : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408A public: void operation1() { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteA::operation1\" << endl; } void operation2() { cout << \"ConcreteA::operation2\" << endl; } }; class ConcreteB : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408B public: void operation1() { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteB::operation1\" << endl; } void operation2() { cout << \"ConcreteB::operation2\" << endl; } }; AbstractClass* absClass[] = { new ConcreteA(), new ConcreteB() }; for (auto x: absClass) { x -> run(); delete x; }","title":"\u6a21\u677f\u65b9\u6cd5"},{"location":"C%2B%2B/oop/#_34","text":"\u62bd\u8c61\u7c7b\u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b\uff0c\u521d\u59cb\u5316\u65f6\u63a5\u6536\u5404\u6b65\u64cd\u4f5c\u7684\u5177\u4f53\u7684\u7b56\u7565\u5b50\u7c7b\u3002 \u7236\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u7b56\u7565\u3002 \u5219\u4e00\u5171\u9700\u8981m+n\u4e2a\u7b56\u7565\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 \u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 class AbstractClass { // \u83b7\u53d6\u4e0d\u540c\u7684\u7b56\u7565\u7c7b\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u7b56\u7565\u6307\u9488 Op1Strategy *op1_strategy; Op2Strategy *op2_strategy; public: // \u5404\u4e2a\u7b56\u7565\u7c7b\u7684\u7ec4\u5408 AbstractClass(Op1Strategy* op1, Op2Strategy* op2) : op1_strategy(op1), op2_strategy(op2) {} // \u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b void run() { op1_strategy->operate(); // \u6267\u884c\u7b56\u7565 op2_strategy->operate(); } }; // \u64cd\u4f5c1\u7b56\u7565\u57fa\u7c7b class Op1Strategy { public: virtual void operate() = 0; } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b01 class Op1StrategyImpl1: public Op1Strategy { public: void operate() { cout << \"Operation1 Implementation 1\" << endl; } } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b02 class Op1StrategyImpl2: public Op1Strategy { public: void operate() { cout << \"Operation1 Implementation 2\" << endl; } } // in main: Op1StrategyImpl1* op1imp1 = new Op1StrategyImpl1(); Op2StrategyImpl1* op2imp1 = new Op2StrategyImpl1(); AbstractClass* solve = new AbstractClass(op1imp1, op2imp2); solve->run();","title":"\u7b56\u7565\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_35","text":"\u80fd\u5728\u7ed3\u6784\u5c42\u9762\u4e0a\u5c3d\u53ef\u80fd\u7684\u89e3\u8026\u5408","title":"\u7ed3\u6784\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_36","text":"\u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u7c7b\u53ef\u4ee5\u5728\u7edf\u4e00\u7684\u63a5\u53e3\u73af\u5883\u4e0b\u5de5\u4f5c\u3002","title":"\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_37","text":"//\u5806\u6808\u57fa\u7c7b class Stack { public: virtual ~Stack() { } virtual bool full() = 0; virtual bool empty() = 0; virtual void push(int i) = 0; virtual void pop() = 0; virtual int size() = 0; virtual int top() = 0; } class Vector2Stack : public Stack { private: std::vector<int> m_data; //\u5c06vector\u7684\u63a5\u53e3\u7ec4\u5408\u8fdb\u6765\u5b9e\u73b0\u5177\u4f53\u529f\u80fd const int m_size; public: Vector2Stack(int size) : m_size(size) { } bool full() { return (int)m_data.size() >= m_size; } //\u6ee1\u6808\u68c0\u6d4b bool empty() { return (int)m_data.size() == 0; } //\u7a7a\u6808\u68c0\u6d4b void push(int i) { m_data.push_back(i); } //\u5165\u6808 void pop() { if (!empty()) m_data.pop_back(); } //\u51fa\u6808 int size() { return m_data.size(); } //\u83b7\u53d6\u5806\u6808\u5df2\u7528\u7a7a\u95f4 int top() { //\u83b7\u53d6\u6808\u5934\u5185\u5bb9 if (!empty()) return m_data[m_data.size()-1]; else return INT_MIN; } }; Vector2Stack stack(10);","title":"\u7ec4\u5408\u9002\u914d"},{"location":"C%2B%2B/oop/#_38","text":"//\u76f4\u63a5\u7ee7\u627fvector\u5e76\u6539\u9020\u63a5\u53e3\uff0c\u91c7\u7528\u79c1\u6709\u7ee7\u627f\u53ef\u4ee5\u4f7f\u5f97\u5916\u754c\u53ea\u80fd\u63a5\u89e6\u5230Vector2Stack\u4e2d\u7684\u63a5\u53e3 class Vector2Stack : private std::vector<int>, public Stack { public: Vector2Stack(int size) : vector<int>(size) { } bool full() { return false; } bool empty() { return vector<int>::empty(); } void push(int i) { push_back(i); } void pop() { pop_back(); } int size() { return vector<int>::size(); } int top() { return back(); } }; Vector2Stack stack(10);","title":"\u7ee7\u627f\u9002\u914d"},{"location":"C%2B%2B/oop/#_39","text":"\u5728\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u5c42\uff0c\u5c06\u590d\u6742\u64cd\u4f5c\u5305\u88f9\u5728\u5185\u90e8\u4e0d\u5bf9\u5916\u90e8\u7c7b\u5f00\u653e\uff0c\u4ec5\u5bf9\u5916\u5f00\u653e\u529f\u80fd\u63a5\u53e3\uff0c\u5373\u53ef\u5b8c\u6210\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd9\u5c31\u662f\u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f\u3002 \u9002\u914d\u5668\u7684\u6838\u5fc3\u8981\u7d20\u662f\u53d8\u6362\u63a5\u53e3\uff0c\u4ee3\u7406\u7684\u6838\u5fc3\u8981\u7d20\u662f\u5206\u5272\u8bbf\u95ee\u5bf9\u8c61\u4e0e\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4ee5\u51cf\u5c11\u8026\u5408\uff0c\u5e76\u80fd \u5728\u4e2d\u95f4\u589e\u52a0\u5404\u79cd\u63a7\u5236\u529f\u80fd \u3002 template <typename T> //\u63d0\u524d\u58f0\u660e\u667a\u80fd\u6307\u9488\u6a21\u677f\u7c7b class SmartPtr; //\u8f85\u52a9\u6307\u9488\uff0c\u7528\u4e8e\u5b58\u50a8\u6307\u9488\u8ba1\u6570\u4ee5\u53ca\u5c01\u88c5\u5b9e\u9645\u6307\u9488\u5730\u5740 template <typename T> class U_Ptr { private: friend class SmartPtr<T>; U_Ptr(T *ptr) :p(ptr), count(1) { } ~U_Ptr() { delete p; } int count; T *p; //\u6570\u636e\u5b58\u653e\u5730\u5740 }; template <typename T> //\u667a\u80fd\u6307\u9488 class SmartPtr { private: U_Ptr<T> *rp; //\u8fdb\u884c\u5b9e\u9645\u6307\u9488\u64cd\u4f5c\u7684\u8f85\u52a9\u6307\u9488 public: SmartPtr(T *ptr) :rp(new U_Ptr<T>(ptr)) { } //\u8c03\u52a8\u62f7\u8d1d\u6784\u9020\u5373\u589e\u52a0\u5f15\u7528\u8ba1\u6570 SmartPtr(const SmartPtr<T> &sp) :rp(sp.rp) { ++rp->count; } SmartPtr& operator=(const SmartPtr<T>& rhs) { ++rhs.rp->count; //\u8d4b\u503c\u53f7\u540e\u7684\u6307\u9488\u5f15\u7528\u52a01 if (--rp->count == 0) delete rp; //\u539f\u5185\u90e8\u6307\u9488\u5f15\u7528\u51cf1 rp = rhs.rp; //\u4ee3\u7406\u65b0\u7684\u6307\u9488 return *this; } ~SmartPtr() { //\u53ea\u6709\u5f15\u7528\u6b21\u6570\u4e3a0\u624d\u4f1a\u91ca\u653e if (--rp->count == 0) delete rp; } //\u5bf9\u667a\u80fd\u6307\u9488\u64cd\u4f5c\u7b49\u540c\u4e8e\u5bf9\u5185\u90e8\u8f85\u52a9\u6307\u9488\u64cd\u4f5c T & operator *() { return *(rp->p); } T* operator ->() { return rp->p; } }; int main(int argc, char *argv[]) { //\u58f0\u660e\u6307\u9488 int *i = new int(2); //\u4f7f\u7528\u4ee3\u7406\u6765\u5305\u88f9\u6307\u9488 SmartPtr<int> ptr1(i); SmartPtr<int> ptr2(ptr1); SmartPtr<int> ptr3 = ptr2; //\u4e4b\u540e\u7684\u64cd\u4f5c\u5747\u901a\u8fc7\u4ee3\u7406\u8fdb\u884c cout << *ptr1 << endl; *ptr1 = 20; cout << *ptr2 << endl; return 0; }","title":"\u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_40","text":"\u7edf\u4e00\u7ee7\u627f\u81eaComponent\u3002 \u6700\u540e\u662f\u94fe\u5f0f\u8c03\u7528\u3002 #include <iostream> using namespace std; //\u6240\u6709View\u7684\u57fa\u7c7b class Component { public: virtual ~Component() { } virtual void draw() = 0; }; //\u4e00\u4e2a\u57fa\u672c\u7684TextView\u7c7b class TextView : public Component { public: void draw() { cout << \"TextView.\" << endl; } }; //\u88c5\u9970\u5668\u7684\u6838\u5fc3\u5185\u6db5\u5728\u4e8e\u7528\u88c5\u9970\u5668\u7c7b\u6574\u4f53\u5305\u88f9\u6539\u52a8\u4e4b\u524d\u7684\u7c7b\uff0c\u4ee5\u4fdd\u7559\u539f\u6765\u7684\u5168\u90e8\u63a5\u53e3 //\u5728\u539f\u6765\u63a5\u53e3\u4fdd\u7559\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u65b0\u529f\u80fd\u6269\u5145 class Decorator : public Component { //\u8fd9\u91cc\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8ba9Decorator\u80fd\u591f\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u4e0d\u65ad\u589e\u52a0\u65b0\u529f\u80fd Component* _component; public: Decorator(Component* component) : _component(component) { } virtual void addon() = 0; void draw() { addon(); _component -> draw(); } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u8fb9\u6846 class Border : public Decorator { public: Border(Component* component) : Decorator(component) { } void addon() { cout << \"Bordered \"; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u6c34\u5e73\u6eda\u52a8\u6761 class HScroll : public Decorator { public: HScroll(Component* component): Decorator(component) { } void addon() { cout << \"HScrolled \"; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u5782\u76f4\u6eda\u52a8\u6761 class VScroll : public Decorator { public: VScroll(Component* component): Decorator(component) { } void addon() { cout << \"VScrolled \"; } }; int main() { //\u57fa\u7840\u7684textView TextView textView; //\u5728\u57fa\u7840textView\u4e0a\u589e\u52a0\u6eda\u52a8\u6761 VScroll vs_TextView(&textView); //\u5728\u589e\u52a0\u5782\u76f4\u6eda\u52a8\u6761\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6eda\u52a8\u6a2a\u6761 HScroll hs_vs_TextView(&vs_TextView); //\u5728\u589e\u52a0\u6c34\u5e73\u4e0e\u5782\u76f4\u6eda\u52a8\u6761\u4e4b\u540e\u589e\u52a0\u8fb9\u6846 Border b_hs_vs_TextView(&hs_vs_TextView); b_hs_vs_TextView.draw(); return 0; }","title":"\u88c5\u9970\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_41","text":"","title":"\u521b\u5efa\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_42","text":"","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_43","text":"class TeaFactory { public: void setMilk(int amount) { ... } void setSugar(int amount) { ... } Tea *createTea(const string &type) { Tea *tea = nullptr; if (type == \"GreenTea\") tea = new GreenTea; else if (type == \"BlackTea\") tea = new Blacktea; else ... // \u5176\u4ed6\u53ef\u80fd\u7684\u8336\u53f6\u7c7b\u578b if (milkAmount > 0) tea->addMilk(...); if (sugarAmount > 0) tea->addSugar(...); ... // \u5176\u4ed6\u7684\u5c5e\u6027\u914d\u7f6e } };","title":"\u5de5\u5382\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_44","text":"class AbstractLanguageFactory { public: virtual Lexer *createLexer(); virtual Parser *createParser(); virtual Generator *createGenerator(); }; class CppFactory : public AbstractLanguageFactory { public: Lexer *createLexer() { return new CppLexer; } Parser *createParser() { return new CppParser; } Generator *createGenerator() { return new CppGenerator; } }; class JavaFactory : public AbstractLanguageFactory { ... }; class Compiler { AbstractFactory *factory; public: Compiler(AbstractFactory *factory) { this->factory = factory; } LexResult *lex(Code *input) { Lexer *lexer = factory->createLexer(); return lexer->lex(input); } ParseResult *parse(LexResult *input) { Parser *parser = factory->createParser(); return parser->parse(input); } // ... }; int main() { CppFactory *cppFactory = new CppFactory(); Compiler *cppCompiler = new Compiler(cppFactory); Code *code = ... LexResult *lex = cppCompiler->lex(code); // ... }","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#_45","text":"","title":"\u5b9e\u7528\u5de5\u5177\u7c7b\u77e5\u8bc6"},{"location":"C%2B%2B/oop/#_46","text":"bool mycmp(int a, int b) { /* a\u5728b\u524d\u8fd4\u56detrue a\u5728b\u540e\u8fd4\u56defalse */ } sort(arr + 0, arr + n, mycmp); vector<Computer> data; // Computer \u7c7b\u91cd\u8f7d\u4e86\u201c>\u201d\u3001\u201c<\u201d sort(data.begin(), data.end(), greater<Computer>()); struct Cmp { bool operator() (const Computer& _a, const Computer& _b) { return _a.stock > _b.stock; } }; sort(data.begin(), data.end(), Cmp);","title":"\u6392\u5e8f"},{"location":"C%2B%2B/oop/#_47","text":"","title":"\u5b57\u7b26\u4e32\u7c7b"},{"location":"C%2B%2B/oop/#fstream","text":"#include <fstream> fstream fs1(\"./input.txt\", ios::in); fs1 >> a; fstream fs2(\"./output.txt\", ios::out); fs2 << a; ifstream fin(\"./input.txt\"); ofstream fout(\"./output.txt\"); // \u6709f\uff01\uff01\u4e0d\u662fistream / ostream \uff01 // \u5faa\u73af\u4ece\u6587\u4ef6\u8bfb\u5165\u672a\u77e5\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u76f4\u5230\u8bfb\u5b8c\u4e3a\u6b62\u3002 while (fin) {}","title":"\u6587\u4ef6\u8bfb\u5199 fstream"},{"location":"C%2B%2B/oop/#_48","text":"string str; // \u8bfb\u5230\u7a7a\u683c cin >> str; // \u8bfb\u4e00\u6574\u884c getline(cin, str); // \u8bfb\u5230\u7279\u5b9a\u5206\u9694\u7b26\uff1b\u53ef\u4ee5\u8bfb\u5165\u6362\u884c\u7b26 getline(cin, str, '#'); // \u6d41\u64cd\u7eb5\u7b97\u5b50 cin >> ws; // ws\u7b97\u5b50\uff1b\u9664\u53bb\u524d\u5bfc\u7a7a\u683c // \u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f46\u5e76\u4e0d\u8bfb\u53d6\u3002\u5982\u679c\u5230\u7ed3\u5c3e\u4e86\u5c31\u7ec8\u6b62\u65e0\u9650\u5faa\u73af\u8bfb\u5165\u3002 int c = cin.peek(); // \u8fd4\u56de\u7684\u662fchar\u7c7b\u578b\u7684\u5b57\u7b26\uff01\uff01\u6bd4\u59820\u8fd4\u56de\u7684\u662fASCII\u780148\u3002 if (c == EOF) break; cin.get(); //\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 cin.ignore(int n=1, int delim=EOF); //\u4e22\u5f03n\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u76f4\u81f3\u9047\u5230delim\u5206\u9694\u7b26 cin.peek(); //\u67e5\u770b\u4e0b\u4e00\u4e2a\u5b57\u7b26 cin.putback(char c); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 cin.unget(); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26","title":"\u8f93\u5165"},{"location":"C%2B%2B/oop/#_49","text":"\u683c\u5f0f\u5316\u8f93\u51fa\uff1a #include <iomanip> cout << defaultfloat; //\u8fd8\u539f\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f cout << setprecision(2) << 3.1415926 << endl; //\u8f93\u51fa\u7cbe\u5ea6\u8bbe\u7f6e\u4e3a2 -> 3.2 cout << oct << 12 << \" \" << hex << 12 << endl; //\u516b\u8fdb\u5236\u8f93\u51fa -> 14 \u5341\u516d\u8fdb\u5236\u8f93\u51fa -> c cout << dec; //\u8fd8\u539f\u5341\u8fdb\u5236 cout << setw(3) << setfill('*') << 5 << endl; //\u8bbe\u7f6e\u5bf9\u9f50\u957f\u5ea6\u4e3a3\uff0c\u5bf9\u9f50\u5b57\u7b26\u4e3a* -> **5 cout << fixed << 2018.0 << \" \" << 0.0001 << endl; //\u6d6e\u70b9\u6570\u8865\u5168 -> 2018.000000 0.000100 cout << scientific << 2018.0 << \" \" << 0.0001 << endl; //\u79d1\u5b66\u8ba1\u6570\u6cd5 -> 2.018000e+03 1.000000e-04","title":"\u8f93\u51fa"},{"location":"C%2B%2B/oop/#string","text":"// \u8f6c\u6362\u4e3a\u5e38\u91cfchar\u5b57\u7b26\u4e32 str.c_str(); str.push_back('a'); str.append(s2); str += s1;","title":"string"},{"location":"C%2B%2B/oop/#_50","text":"string s0(\"0123456789\"); string s1(s0, 3, 4); // \u4eces0[3]\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\u7ed3\u679c\uff1a3456 string s2(s0, 4); // \u4eces0[4]\u5f00\u59cb\u76f4\u5230\u7ed3\u5c3e\u3002\u7ed3\u679c\uff1a456789 string s3(\"0123456789\", 4); // \u4ece\u5934\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\uff08\u53d6\u524d4\u3002\uff09\u7ed3\u679c\uff1a0123 string s4(s0.begin() + 2, s0.begin() + 6); // \u4eces0[2]\u5f00\u59cb\uff0c\u5230s0[5]\uff08s0[6]\u4e4b\u524d\uff09\u7ed3\u675f\u3002\u7ed3\u679c\uff1a2345 cout << s1 << endl; cout << s2 << endl; cout << s3 << endl; cout << s4 << endl;","title":"\u622a\u53d6"},{"location":"C%2B%2B/oop/#charint-stoi","text":"int atoi(const char *str) // Usage: #include <stdlib.h> char s; int val = atoi(s); // \u8fdb\u5236\u8f6c\u6362 \uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8d77\u59cb\u4f4d\u7f6e\uff09 int a = stoi(\"2001\") //a=2001 std::string::size_type sz; // \u4e00\u4e2a\u5927\u5c0f\u6570\u503c size_t alias int b = stoi(\"50 cats\", &sz) //b=50 sz=2 \u8bfb\u5165\u957f\u5ea6 int c = stoi(\"40c3\", nullptr, 16) //c=0x40c3 \u5341\u516d\u8fdb\u5236 int d = stoi(\"0x7f\", nullptr, 0) //d=0x7f \u81ea\u52a8\u68c0\u67e5\u8fdb\u5236 \u53cd\u8fc7\u6765\u662fitoa\u3002\u7136\u800c\u8fd9\u4e2a\u5728\u4e00\u4e9b\u73af\u5883\u4e0b\u662f\u6ca1\u6709\u7684\u3002 https://blog.csdn.net/p312011150/article/details/81273888","title":"char[]\u8f6c\u6574\u578bint (stoi)"},{"location":"C%2B%2B/oop/#number-to-string","text":"int a; string s = to_string(a);","title":"number to string"},{"location":"C%2B%2B/oop/#sstream","text":"ss << sth. \u653e\u8fdb\u53bb ss >> sth. \u62ff\u51fa\u6765 int string_to_int(const string& s) { stringstream ss; ss << s; int value; ss >> value; return value; } string s; cin >> s; cout << string_to_int(s) << endl; #include <sstream> using namespace std; int main() { stringstream ss; string s(\"403\"); int value = 404; // int to string // put int to ss ss << value; // output ss to string ss >> s; cout << s << endl; // string to int // put string to ss ss << s; // output ss to int ss >> value; cout << value << endl; return 0; }","title":"sstream \u8f6c\u6362"},{"location":"C%2B%2B/oop/#sstream_1","text":"ss.clear() \u662f\u72b6\u6001\u4f4d\u3002\u6bd4\u5982\u4e0a\u4e00\u6b21\u7528\u5230\u672b\u5c3e\u65f6\u4e0b\u4e00\u6b21\u518d\u7528\u5c31\u9700\u8981clear\u3002 ss.str(\"\") \u662f\u6e05\u7a7a\u5185\u5bb9\u4ee5\u4f9b\u590d\u7528\u3002","title":"sstream\u590d\u7528\u7684\u5751"},{"location":"C%2B%2B/oop/#sstream_2","text":"https://blog.csdn.net/liitdar/article/details/82598039","title":"sstream\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32"},{"location":"C%2B%2B/oop/#ss","text":"ss << s1 << s2 << s3; cout << ss.str() << endl;","title":"\u65b0\u7684ss\u4e00\u6b21\u6027\u62fc\u63a5"},{"location":"C%2B%2B/oop/#ss_1","text":"\u9700\u8981\u7528\u5230clear\u6765\u6e05\u695a\u201c\u9519\u8bef\u72b6\u6001\u201d\u3002 https://www.cnblogs.com/elenno/p/stringstream_clear.html ss >> value; // used ss.clear(); ss << \", 403\"; // add something after being used cout << ss.str() << endl;","title":"\u7528\u8fc7\u7684ss\u5728\u5c3e\u90e8\u6dfb\u52a0"},{"location":"C%2B%2B/oop/#stringstream","text":"template <class InType, class OutType> OutType convert(InType val) { static stringstream ss; ss.str(\"\"); // empty the buffer ss.clear(); // clear the state ss << val; OutType res; ss >> res; return res; }","title":"\u57fa\u4e8estringstream\u7684\u7c7b\u578b\u8f6c\u6362\u6a21\u677f\u51fd\u6570"},{"location":"C%2B%2B/oop/#vector","text":"vector<double> vec = { 0, 1, 2, 3, 4, 5 }; for (int i = 6; i <= 10; i++) vec.push_back(i); vec.insert(vec.begin() + 4, 3.5); // \u5728index=4\u524d\u63d2\u51653.5 vec.erase(vec.begin() + 10); // \u5220\u9664index=10\uff08\u5143\u7d209\u88ab\u5220\u6389\u4e86\uff09 vec.emplace(vec.begin() + 10, 9); // \u5728index=10\u524d\u63d2\u51659 vec.emplace_back(11); vector<double> vec2(vec.begin() + 1, vec.begin() + 3); // [\u5de6, \u53f3) for (auto& i : vec) { cout << i << ' '; } cout << endl; for (auto& i : vec2) { cout << i << ' '; }","title":"vector"},{"location":"C%2B%2B/oop/#_51","text":"#include <regex> // \u5b57\u7b26\u4e32\u80fd\u5426\u5b8c\u5168\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f string s(\"subject\"); regex e(\"sub.*\"); cout << regex_match(s, e) << endl; // \u5b8c\u5168\u5339\u914d\uff1b\u5206\u7ec4\u6355\u83b7 // \u6bcf\u7ec4\u7528()\u6807\u8bc6\uff1b0\u53f7\u6c38\u8fdc\u662f\u88ab\u5339\u914d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab // \u4e0d\u60f3\u6355\u83b7\u7684\u5206\u7ec4\u8fd9\u6837\u6807\u8bb0\uff1a (?:pattern) string s(\"ver10\"); regex e(R\"(ver(\\d+))\"); smatch sm; // smatch \u5bf9\u8c61\u5b58\u50a8\u5206\u7ec4\u7ed3\u679c if (regex_match(s, sm, e)) // \u5224\u65ad\u662f\u5426\u6210\u529f\u5e76\u5b58\u50a8\u7ed3\u679c { cout << sm.size() << endl; // smatch\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\uff1b\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9string\u5bf9\u8c61 for (auto& i : sm) // for (int i = 0; i < sm.size(); i++) { cout << i << endl; } } // \u641c\u7d22 // \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u5b50\u4e32\uff0c\u5b58\u50a8\u5230smatch\u5bf9\u8c61\u4e2d smatch result; regex_research(s, result, re); smatch sm; name = reg_match(state, \"(My name is |I am )(\\\\w+)\")[2]; sm = reg_match(state, \"([1-9]\\\\d{0,3})[-.](1[0-2]|0?[1-9])[-.](3[01]|[12]\\\\d|0?[1-9])\"); birth = Date(sm[1], sm[2], sm[3]); phone = reg_match(state, \"\\\\d{11}\")[0]; email = reg_match(state, \"\\\\w+.?@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+\")[0]; // \u66ff\u6362 string s(\"this subject has a submarine\"); regex e(R\"(sub[\\S]*)\"); //regex_replace\u8fd4\u56de\u503c\u5373\u4e3a\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32 cout << regex_replace(s,e,\"SUB\") << endl; // this SUB has a SUB // regex_replace(s, re, s1) // \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u66ff\u6362\u4e0a\u53bb\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7 // $& \u4ee3\u8868re\u5339\u914d\u7684\u5b50\u4e32 // $1, $2 \u4ee3\u8868re\u5339\u914d\u7684\u7b2c1/2\u4e2a\u5206\u7ec4 string s(\"this subject has a submarine\"); regex e(R\"((sub)([\\S]*))\"); cout << regex_replace(s,e,\"$1 and [$2]\") << endl; // this sub and [ject] has a sub and [marine] http://tool.chinaz.com/regex/ \u8d2a\u5a6a\u4e0e\u61d2\u60f0","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"C%2B%2B/oop/#isdigit","text":"isdigit('3'); // \u53c2\u6570\u63a5\u6536\u4e00\u4e2aint\uff1b\u63a5\u6536\u5230EOF\u8fd4\u56defalse\u53ef\u7528\u4e8e\u5224\u65ad\u8bfb\u5165\u7ed3\u675f","title":"\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 isdigit"},{"location":"Jupyter/jupyter/","text":"Jupyter 1 Jupyter Lab Jupyter Notebook","title":"Jupyter"},{"location":"Jupyter/jupyter/#jupyter","text":"1","title":"Jupyter"},{"location":"Jupyter/jupyter/#jupyter-lab","text":"","title":"Jupyter Lab"},{"location":"Jupyter/jupyter/#jupyter-notebook","text":"","title":"Jupyter Notebook"}]}