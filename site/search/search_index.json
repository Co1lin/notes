{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Colin's Notebook https://notes.valderfield.com https://github.com/Co1lin/notes This is my personal notebook, in which I will write down some CS related things. Since I can't find a satisfying notebook project which supports online editing and managing on web, and also using Markdown, now I use code-server to edit and this MkDocs project to publish. The files are also availiable on GitHub , so you can pull requests.","title":"Welcome to Colin's Notebook"},{"location":"#welcome-to-colins-notebook","text":"https://notes.valderfield.com https://github.com/Co1lin/notes This is my personal notebook, in which I will write down some CS related things. Since I can't find a satisfying notebook project which supports online editing and managing on web, and also using Markdown, now I use code-server to edit and this MkDocs project to publish. The files are also availiable on GitHub , so you can pull requests.","title":"Welcome to Colin's Notebook"},{"location":"DSA_Review/","text":"DSA Note that in this document there are some images with transparent backgound, so a bright theme may be more suitable to read them. Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Acknowledgement Thanks for Data Structure and Algorithm Course of CST, THU. Most of the content are extracted from the course material. Also thanks for my friends for their sincere help and ideas or images. 2. Basis of Performance Analysis 2.1 Notation \\(T(n)\\) \uff1a\u4e3a\u6c42\u89e3\u89c4\u6a21\u4e3an\u7684\u95ee\u9898\uff0c\u6240\u9700\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u6b21\u6570\u3002 \\(O(f(n))\\) \uff1a \\(T(n) = O(f(n)) ~ \\Leftrightarrow T(n) < c \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u662f\u4e0a\u754c\u3002 \\(\\Omega(f(n))\\) \uff1a \\(T(n) = \\Omega(f(n)) ~ \\Leftrightarrow T(n) > c \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u662f\u4e0b\u754c\u3002 \\(\\Theta(f(n))\\) \uff1a \\(T(n) = \\Theta(f(n)) ~ \\Leftrightarrow c_1 \\cdot f(n)> T(n) > c_2 \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u4e0e \\(T(n)\\) \u540c\u9636\u3002 2.2 NP = P ? P\u95ee\u9898\uff1a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3\u3002 NP\u95ee\u9898\uff1a\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u5f97\u51fa\u6b63\u786e\u89e3\u7684\u95ee\u9898\u3002 2.3 Series and Corresponding Complexity 2.3.1 \u5e38\u7528\u7ea7\u6570\uff1a\u7b97\u672f\u3001\u5e42\u3001\u51e0\u4f55\u3001\u5bf9\u6570\u7b49 2.3.2 \u4e0d\u5e38\u89c1\u7684\u5206\u6570\u7ea7\u6570 2.4 Master Thm. \u4e0d\u540c\u5206\u6cbb\u5bf9\u5e94\u7684\u590d\u6742\u5ea6\uff1a \u5206\u6cbb\u901a\u5e38\u9012\u63a8\u5f62\u5f0f\uff1a \\(T(n) = a \\cdot T(\\frac{n}{b}) + O(f(n))\\) \u5373\uff1a\u539f\u95ee\u9898\u88ab\u5206\u4e3aa\u4e2a\u89c4\u6a21\u5747\u4e3a \\(n/b\\) \u7684\u5b50\u4efb\u52a1\uff1b\uff08\u6bcf\u4e00\u5c42\uff09\u4efb\u52a1\u7684\u5212\u5206\u3001\u89e3\u7684\u5408\u5e76\u8017\u65f6 \\(f(n)\\) \u3002 [1] \\(f(n) = O(n^{log_b a - \\epsilon}) ~ \\Rightarrow T(n) = \\Theta(n^{log_b a})\\) \uff08 \\(f(n)\\) \u8981\u5c0f\u4e8eO\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3aO\u662f\u5176\u4e0a\u754c\uff09 e.g. kd-search: \\(T(n) = 2T(n/4)+O(1) = O(\\sqrt{n})\\) [2] \\(f(n) = O(n^{log_b a} \\cdot log^k n) ~ \\Rightarrow T(n) = \\Theta(n^{log_b a} \\cdot log^{k+1}n)\\) e.g. Binary search: \\(T(n) = 1T(n/2)+O(1) = O(nlogn)\\) e.g. Merge Sort: \\(T(n) = 2T(n/2)+O(n) = O(nlogn)\\) [3] \\(f(n) = \\Omega(n^{log_b a + \\epsilon}) ~ \\Rightarrow T(n) = \\Theta(f(n))\\) e.g. quickSelect: \\(T(n) = 1T(n/2)+O(n) = O(n)\\) 3. Binary Search Optimization: Only one comparison in each loop. Return the maximum element that is not greater than e. BinarySearch ( data , e , lo , hi ) : // [lo, hi) { while ( lo < hi ) { median = ( lo + hi ) / 2 if ( e < data [ median ]) hi = mi // [lo, mi) else // (data[median] <= e) lo = mi + 1 // [mi + 1, hi) = (mi, hi) } // break when (lo == hi) return ( lo - 1 ) } Correctness: \u4ee5\u4e0b\u9648\u8ff0\u5728\u7b97\u6cd5\u6267\u884c\u5168\u8fc7\u7a0b\u4e2d\u603b\u662f\u5bf9\u7684\uff1a A[lo - 1] \u662f\u5df2\u77e5\u7684\u5c0f\u4e8e\u7b49\u4e8ee\u7684\u6570\uff08 A[0] ~ A[lo - 1] \uff09\u4e2d\u6700\u5927\u7684 A[hi] \u662f\u5df2\u77e5\u7684\u5927\u4e8ee\u7684\u6570\uff08 A[hi] ~ A[n] \uff09\u4e2d\u6700\u5c0f\u7684 \u636e\u6b64\uff0c\u53ef\u4ee5\u4ee5\u521d\u59cb\u72b6\u6001\u6210\u7acb\u4e3a\u57fa\uff0c\u8fdb\u884c\u6570\u5b66\u5f52\u7eb3\uff1b\u6309\u7167\u5faa\u73af\u4e2d\u7684\u4e24\u4e2a\u5206\u652f\u5206\u522b\u5f52\u7eb3\uff0c\u53d1\u73b0\u65e0\u8bba\u54ea\u4e2a\u5206\u652f\uff0c\u4e24\u4e2a\u6761\u4ef6\u4ecd\u7136\u662f\u5bf9\u7684\u3002\u56e0\u6b64\u6700\u540e A[lo - 1] \u662f\u5df2\u77e5\u7684\u5c0f\u4e8e\u7b49\u4e8ee\u7684\u6570\u4e2d\u6700\u5927\u7684\u3002 4. Sort Algorithms 4.1 BubbleSort \\(O(n^2)\\) \u3002\u4e25\u683c\u4e0d\u7b49\u5173\u7cfb\u624d\u4ea4\u6362\uff08\u76f8\u7b49\u4e0d\u4ea4\u6362\uff09\u5c31\u662f\u7a33\u5b9a\u7684\u3002 4.1.1 Improvement \u82e5\u67d0\u4e00\u8d9f\u626b\u63cf\u672a\u53d1\u73b0\u9006\u5e8f\u5bf9\uff0c\u5219\u8bf4\u660e\u5df2\u7ecf\u90fd\u6709\u5e8f\u6392\u5217\u4e86\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u3002 \u8fdb\u4e00\u6b65\u6539\u8fdb\uff1a\u867d\u7136\u7ea2\u8272unsorted\u90e8\u5206\u672a\u6709\u5e8f\uff0c\u4f46\u662f\u5b83\u7684\u67d0\u4e2a\u540e\u7f00\u53ef\u80fd\u6709\u5e8f\u3002\u7ef4\u62a4\u4e00\u4e2alast\u503c\uff0c\u521d\u59cb\u503c\u4e3alo\uff0c\u6bcf\u6b21\u53d1\u73b0\u9006\u5e8f\u5bf9i\uff0ci+1\u65f6\uff0c\u5c31\u4ee4 last=i \u3002\u5982\u6b64\u4ece\u524d\u5411\u540e\u626b\u63cf\u4e00\u8d9f\u4e4b\u540e\uff0clast\u8bb0\u5f55\u7684\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u9006\u5e8f\u5bf9\u7684\u4f4d\u7f6e\u3002\u5982\u6b64\uff0c\u9006\u5e8f\u5bf9\u53ea\u53ef\u80fd\u5b58\u5728\u4e8e [lo, last) \u4e2d\u3002\u7279\u6b8a\u5730\uff0c\u5982\u679c\u6574\u8d9f\u626b\u63cf\u6ca1\u6709\u53d1\u73b0\u9006\u5e8f\u5bf9\uff0c\u5219last\u4ecd\u7136\u4e3alo\u503c\u3002\u4e4b\u540e\u7684 hi=last \u64cd\u4f5c\u4f1a\u4f7f hi == lo \uff0c\u4ece\u800c\u7ec8\u6b62\u5faa\u73af\u3002 4.2 MergeSort \\(O(nlogn)\\) \u3002\u4f18\u5148\u5de6\u8fb9\u7684\u5143\u7d20\u8fdb\u5165\u5f52\u5e76\uff0c\u7a33\u5b9a\u3002 4.3 QuickSort Expected - \\(O(nlogn)\\) \u3002 \u4e0d\u7a33\u5b9a\uff01 QuickSort ( lo , hi ) : { // [lo, hi) if ( hi - lo >= 2 ) { mi = partition ( lo , hi - 1 ) QuickSort ( lo , mi ) QuickSort ( mi + 1 , hi ) } } 4.3.1 Partition \u968f\u673a\u9009\u62e9\u4e00\u70b9\u4f5c\u4e3apivot\uff08\u8f74\u70b9\uff09\uff0c\u8ba9\u5176\u5c31\u4f4d\u3002 LUG\u7248\u7684Partition\u5982\u56fe\u6240\u793a\u3002\u59cb\u7ec8\u6709\uff1aL = [start, lo)\uff0cU = [lo, hi]\uff0cG = (hi, end]\u3002 Partition(lo, hi): { // [lo, hi] swap(data[lo], data[randint(lo, hi)]) pivot = data[lo] // \u968f\u673a\u9009\u53d6\u8f74\u70b9 while (lo < hi) { while (lo < hi && pivot < data[hi]) // pivot\u5c0f\u4e8eG\u533a\u95f4\u5de6\u8fb9\u5f85\u62d3\u5c55\u8282\u70b9\u65f6 hi-- // \u5411\u5de6\u62d3\u5c55G if (lo < hi) // \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u5220\u6389 data[lo++] = data[hi] // \u628aG\u533a\u95f4\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u6570\u653e\u5728L\u53f3\u7aef\uff08\u76f8\u5f53\u4e8e\u62d3\u5c55L\uff09 while (lo < hi && data[lo] < pivot) // pivot\u5927\u4e8eL\u533a\u95f4\u53f3\u8fb9\u5f85\u62d3\u5c55\u8282\u70b9\u65f6 lo++ // \u5411\u53f3\u62d3\u5c55L if (lo < hi) // \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u5220\u6389 data[hi--] = data[lo] // \u628aL\u533a\u95f4\u53f3\u8fb9\u5927\u4e8e\u7b49\u4e8epivot\u7684\u6570\u653e\u5728G\u5de6\u7aef\uff08\u76f8\u5f53\u4e8e\u62d3\u5c55G\uff09 } // \u7ee7\u7eed\u5faa\u73af\u62d3\u5c55G\u3001L // assert: lo == hi return lo } 4.4 Quick Selection QuickSelect(lo, hi, k): { while (lo < hi) { // perform quick partition on [lo, hi] swap(data[lo], data[randint(lo, hi)]) i = lo, j = hi, pivot = data[lo] // ... quick partition on [i, j] // finish with i == j; data[i] is the pivot // shrink [lo, hi] which contains k_th element if (k <= i) hi = i - 1 if (i <= k) lo = i + 1 } } 4.5 HeapSort \u603b\u590d\u6742\u5ea6 \\((n + nlogn) = O(nlogn)\\) \u3002 \u4e0d\u7a33\u5b9a\uff01 \u3010 \\(O(n)\\) \u3011\u5c31\u5730 Floyd Heapify\uff1b\u5806\u533a\u95f4\uff08\u524d\u9762\uff09\u4e3a\u6574\u4e2a\u6570\u7ec4\uff1b\u5df2\u6392\u5e8f\u533a\u95f4\uff08\u540e\u9762\uff09\u4e3a\u7a7a\u3002 \u5c06\u7b2c0\u4e2a\u5143\u7d20\uff08\u5806\u9876\u5143\u7d20\uff1btop()\uff09\u4e0e\u5806\u533a\u95f4\u7684\u672b\u5c3e\u5143\u7d20swap\uff0c\u5806\u7684\u533a\u95f4--\uff0c\u5df2\u6392\u5e8f\u533a\u95f4++\u3002 \u3010 \\(O(logn)\\) \u3011\u5728\u65b0\u7684\u5806\u533a\u95f4\uff0c\u5c06\u521a\u6362\u5230\u9876\u7684\u5143\u7d20shift down\uff0c\u5f97\u5230\u5408\u6cd5\u7684\u5806\u3002 \u5c06\u5806\u9876\u5143\u7d20\u4e0e\u5806\u533a\u95f4\u7684\u672b\u5c3e\u5143\u7d20swap\uff0c...... 4.6 RadixSort \u4f4e\u4f4d\u4f18\u5148 \u7684\u57fa\u6570\u6392\u5e8f\u3002 \u6570\u636e\u89c4\u6a21\u4e3an\uff0c\u6570\u5b57\u4f4d\u6570\u4e3at\uff0c\u6bcf\u4e00\u4f4d\u7684\u8303\u56f4\u4e3a \\((0, M]\\) \u3002 \u590d\u6742\u5ea6 \\(O(t*(n+M))\\) \u3002\uff08\u4e00\u822c\u4f18\u4e8e \\(O(nlogn)\\) \u3002\uff09\u7a33\u5b9a\uff01 4.7 SelectionSort \\(O(n^2)\\) \u3002\u5982\u679c\u7528swap\u6a21\u5f0f\uff0c \u4e0d\u7a33\u5b9a \uff01\u5982\u679c\u7528\u201c\u6eda\u52a8\u201d\u6a21\u5f0f\uff0c\u7a33\u5b9a\u3002 \u524dk\u4e2a\u5143\u7d20\u5df2\u7ecf\u6709\u5e8f\uff1b\u8003\u67e5\u7b2ck+1\u4e2a\u4f4d\u7f6e\uff1b\u904d\u5386k+1\u5f80\u540e\u7684\u6240\u6709\u5143\u7d20\uff0c\u9009\u62e9\u6700\u5c0f\u7684\u4e0e\u5f53\u524d\u7b2ck+1\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u4ea4\u6362\uff08swap\uff09\u3002 4.8 InsertionSort \\(O(n^2)\\) \u3002\u7a33\u5b9a\u3002 \u7c7b\u4f3c\u4e8e\u5c06\u624b\u4e2d\u7684\u6251\u514b\u724c\u8fdb\u884c\u6392\u5e8f\u3002 \u524dk\u4e2a\u5143\u7d20\u5df2\u7ecf\u6709\u5e8f\uff1b\u8003\u67e5\u7b2ck+1\u4e2a\u5143\u7d20\uff0c\u4ece\u7b2ck\u4e2a\u5143\u7d20\u5411\u524d\u904d\u5386\uff0c\u5bfb\u627e\u5408\u9002\u4f4d\u7f6e\uff0c\u5c06\u5176\u63d2\u5165\u5176\u4e2d\uff0c\u4f7f\u5f97\u6709\u5e8f\u533a\u95f4\u6210\u4e3a\u524dk+1\u4e2a\u5143\u7d20\u3002 4.9 ShellSort ShellSort(data): { // \u53d6\u67d0\u9012\u589e\u5e8f\u5217H H = { w_1 = 1, w_2, w_3, ... } // \u9009H\u5e8f\u5217\u4e2d\u5c0f\u4e8en\u7684\u6700\u540e\u4e00\u9879 k = max{i | w_i < n} // \u4eceH\u5e8f\u5217\u7b2ck\u9879\u5f80\u524d... for (t = k; t > 0; t--) { \u5c06data\u89c6\u4f5c\u5bbd\u5ea6\u4e3aw_t\u7684\u77e9\u9635B_t \u5bf9B_t\u7684\u6bcf\u4e00\u5217\u5206\u522b\u63d2\u5165\u6392\u5e8f\uff1aB_t[i], i = 0, 1, ..., w_t - 1 // \u6392\u5b8c\u540e\u91cd\u65b0\u7ec4\u6210\u6210\u4e00\u4f4d\u7684data\u5f62\u5f0f } // \u6700\u540e\u4e00\u6b21\u5faa\u73af w_t == 1 , \u610f\u5473\u7740\u4e00\u7ef4\u6392\u5e8f\u5b8c\u6210 } e.g. \u7ec4\u7ec7\u6210\u5bbd\u5ea6\u4e3a3\u7684\u77e9\u9635\u7684\u4e00\u6b21\u6392\u5e8f\uff1a 4.9.1 Complexity \\(H_{shell}={1,2,4,8,...}\\) : \\(O(n^2)\\) \uff08\u6784\u9020\u5947\u5076\u5206\u522b\u6709\u5e8f\u4f46\u6240\u6709\u5947\u5747\u5927\u4e8e\u5076\u3002\uff09 \\(H_{ps}=\\{ 2^k-1 \\}\\) : \\(O(n^{3/2})\\) \\(H_{pratt}=\\{ 2^p3^q \\} = 1,2,3,4,6,8,9,12\\) : \\(O(nlog^{2}n)\\) \\(H_{sedgewick}=\\{ 9\\cdot4^k - 9\\cdot2^k + 1 ~|~ 4^k - 3\\cdot2^k + 1 \\}\\) : \\(O(n^{4/3})\\) ; Average - \\(O(n^{7/6})\\) 4.9.2 Correctness Knuth's Thm. A g-ordered sequence REMAINS g-ordered after being h-sorted. Thm. A sequence is g-ordered and h-ordered \\(\\Rightarrow\\) It is \\(ng+mh\\) - ordered. (Linear Combination) Thm. The numbers \\(\\ge ((g-1)(h-1) - 1)\\) must be linear combinations of g and h. \\(\\Rightarrow\\) The numbers that can form inversion pairs with the i-th number are limited to a decreasing interval as \\(h\\) decrease. \\(\\Rightarrow\\) The number of inversion pairs will always keep or decrease.(?) 5. Tree \u6df1\u5ea6 \\(depth(v)=|path(v)|\\) \uff0c\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684 \u8fb9\u7684\u6570\u76ee \u3002 \\(depth(root)=0\\) \u3002 \u9ad8\u5ea6 \\(height(T)\\) \uff1a\u6811T\u7684\u6240\u6709\u8282\u70b9\u6df1\u5ea6\u7684\u6700\u5927\u503c\u3002\u53ea\u6709\u6839\u7684\u6811\uff1a0\uff1b\u7a7a\u6811\uff1a-1\u3002 \u5ea6 \\(degree\\) \uff1achildren\u7684\u4e2a\u6570\u3002 6. BST 6.1 DS \u5de6-\u4e2d-\u53f3\uff1a\u5c0f-\u4e2d-\u5927\u3002 \u4e2d\u5e8f\u904d\u5386\u4e3a\u5355\u8c03\u4e0d\u4e0b\u964d\u5e8f\u5217\u3002 Property: Catalan Number n\u4e2a\u4e92\u5f02\u8282\u70b9\u968f\u673a\u7ec4\u6210\u7684\u4e8c\u53c9\u6811\uff0c\u8bb0\u5171\u6709 \\(S(n)\\) \u68f5\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u5219\uff1a \\(S(n) = Catalan(n) = \\sum_{k=1}^n S(k-1)S(n-k) = {(2n)! \\over (n+1)!n!}\\) \u3002 \u82e5\u5404\u79cdBST\u7b49\u6982\u7387\u51fa\u73b0\uff0c\u5219\u5e73\u5747\u9ad8\u5ea6 \\(\\Theta(\\sqrt{n})\\) \u3002 \u82e5n\u4e2a\u4e92\u5f02\u8bcd\u6761\u6309\u5404\u79cd\u6392\u5217\u6b21\u5e8f\uff08\u5404\u79cd\u6392\u5217\u7b49\u6982\u7387\uff09\u63d2\u5165\uff0c\u5e73\u5747\u9ad8\u5ea6 \\(\\Theta(logn)\\) \u3002 6.2 Algorithm 6.2.1 Insert \u63d2\u5165\u7684\u8282\u70b9\u5fc5\u4e3a\u53f6\u8282\u70b9\u3002 6.2.2 Delete \u5982\u679c\u662f\u53f6\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664\u3002 \u5982\u679c\u4e0d\u662f\u53f6\u8282\u70b9\uff0c\u627e\u5230\u5176\uff08x\uff09\u300c\u76f4\u63a5\u540e\u7ee7\u300d\uff08w\uff09\uff0c\u4ea4\u6362\u4e24\u8005\uff1b\u8ba9w\u7684\u53f3\u5b50\u6811\u4ee3\u66ffw\uff0c\u5b8c\u6210\u5220\u9664\u3002 7. k-D Tree 7.1 Algorithm 7.1.1 Query - KdSearch(v, R) Search starts at v; query range is R Key idea: Recurse in when there's intersection. Report it when it is enclosed. kdSearch ( v , R ) : if v is leaf : if v in R : report ( v ) if v -> lChild in R : reportSubtree ( v -> lChild ) else if v -> lChild have intersection with R : kdSearch ( v -> lChild , R ) if v -> rChild in R : reportSubtree ( v -> lChild ) else if v -> rChild have intersection with R : kdSearch ( v -> rChild , R ) Complexity: For each edge of R, no more than 2 out of the 4 grandchildren of each node will intersect with it, which means recursing. R has 4 edges, so multiply 4 for the upper bound complexity. Using the Master Thm., \\(Q(n) = 2 + 2Q(n/4), Q(1) = O(1) \\Rightarrow Q(n) = O(\\sqrt{n})\\) Report + Search: \\(O(r + \\sqrt{n})\\) \u603b\u7ed3\uff1a Query: \\(O(r + n^{1-1/d})\\) Construct: \\(O(nlogn)\\) 8. AVL Tree 8.1 Definition \u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u7edd\u5bf9\u503c\u57281\u5185 8.2 Algorithm 8.2.1 Insert \u4ece\u63d2\u5165\u8282\u70b9\uff08\u53f6\u5b50\uff09\u7684parent\uff08hot\uff09\u5f00\u59cb\u7f51\u4e0a\u8d70\uff0c\u7ef4\u62a4\u9ad8\u5ea6\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u5931\u8861\u8282\u70b9g\uff1b\u901a\u8fc7 tallerChild(tallerChild(g)) \u786e\u5b9ap\uff0cv\uff0c\u7136\u540e\u7528\u4e00\u6b213+4\u91cd\u6784\u91cd\u5e73\u8861\u3002 \u7531\u4e8e \u201c\u9ad8\u5ea6\u590d\u539f\u201d \u6027\u8d28\uff0c\u6574\u4e2ainsert\u6700\u591a1\u6b213+4\u91cd\u6784\uff082\u6b21rotate\uff09\u3002 \\(O(logn)\\) \u3002 8.2.2 Delete \u7528BST\u7684\u5220\u9664 \uff0c\u5220\u9664x\uff0c\u8bb0\u5f55hot\u3002 \u4ecehot\u5411\u4e0a\uff0c\u4e00\u65e6\u53d1\u73b0g\u5931\u8861\uff0c\u901a\u8fc7 tallerChild(tallerChild(g)) \u786e\u5b9ap\uff0cv\uff0c\u7136\u540e\u7528\u4e00\u6b213+4\u91cd\u6784\u91cd\u5e73\u8861\u3002 \u5931\u8861\u53ef\u80fd\u4f20\u64ad\uff0c\u9700\u8981\u4e00\u76f4\u5411\u4e0a\uff0c\u6267\u884c\u591a\u6b213+4\u91cd\u6784\u3002 \\(O(logn)\\) \u3002 8.2.3 3+4 Reconstruction \u5404\u79cd\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u90fd\u53ef\u4ee5\u6309\u7167\u201c\u4e2d\u5e8f\u201d\u7edf\u4e00\u5e73\u8861\u3002 9. Splay Tree 9.1 Splay \u53cc\u5c42\u65cb\u8f6c\u4e4b\u201c\u987a\u5411\u60c5\u51b5\u201d\uff1a \u53cc\u5c42\u65cb\u8f6c\u4e4b\u201c\u53cd\u5411\u60c5\u51b5\u201d\uff1a \u5355\u5c42\u65cb\u8f6c\uff1a\u5f53\u5f85splay\u81f3\u6839\u7684\u8282\u70b9\u7684parent\u4e3aroot\u65f6\uff1a 9.2 Search \u4e3a\u4fdd\u8bc1\u6027\u80fd\uff0c\u9700\u5c06\u6700\u540e\u8bbf\u95ee\u7684\u8282\u70b9\u65cb\u8f6c\u81f3root\u3002 search ( value ) : { p = searchIn ( root , value , hot ) root = splay ( p ? p : hot ) return root } \uff08hot\u8bb0\u5f55\u4e86search\u4e2d\u6700\u540e\u5230\u8fbe\u7684\u8282\u70b9\uff09 9.3 Insert \u8c03\u7528Splay\u7684search\u7b97\u6cd5\uff0c\u5f85\u63d2\u5165\u8282\u70b9\u4e0d\u5728\u6811\u4e2d\uff0c\u67e5\u627e\u5931\u8d25\u3002 \u4f46\u201c\u5f85\u63d2\u5165\u4f4d\u7f6e\u201d\u7684\u7236\u8282\u70b9hot\uff0c\u8bb0\u4e3at\uff0c\u5df2\u7ecf\u88ab\u65cb\u8f6c\u81f3\u6839\u3002 \u6839\u636et\u4e0e\u8981\u63d2\u5165\u7684\u6570\u503c\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5c06t\u53ca\u5176\u5b50\u6811\u4e0ev\u91cd\u7ec4\u4e3a\u65b0\u7684\u6811\u3002\u6700\u540e\u65b0\u63d2\u5165\u7684v\u4f5c\u4e3aroot\u3002 Corner Case: \u5f53 \u8fde\u7eed\u63d2\u5165\u6709\u5e8f\u5e8f\u5217 \u65f6\uff0cSplay\u4f1a\u5448\u73b0\u94fe\u72b6\u3002\u5f53\u7136\uff0c\u4e0d\u4e00\u5b9a\u5b8c\u5168\u6709\u5e8f\uff0c\u5982\uff1a3\uff0c2\uff0c1\uff0c4\uff0c5\uff0c6\uff0c7\uff0c\u2026\u2026\u4e5f\u53ef\u4ee5\u5f62\u6210\u94fe\u72b6\u3002 9.4 Delete \u67e5\u627e\uff08search\uff09\u5f85\u5220\u9664\u503cv\uff0cv\u4f1a\u88abSplay\u81f3root\u3002 \u5220\u9664v\uff0c\u5269\u4e0b\u5b83\u7684\u4e24\u4e2a\u5b50\u6811 \\(T_L\\) \u3001 \\(T_R\\) \u3002 \u5728 \\(T_R\\) \u4e2d\u67e5\u627ev\uff1b\u8fd9\u4e00\u67e5\u627e\u5fc5\u5b9a\u5931\u8d25\uff0c\u4f46\u4f1a\u5c06 \\(T_R\\) \u4e2d\u7684\u6700\u5c0f\u503cm\uff0c\u5373v\u7684\u76f4\u63a5\u540e\u7ee7\uff0c\u65cb\u8f6c\u81f3\u5b50\u6811 \\(T_R\\) \u7684\u6839\u3002 \u7531\u4e8em\u662fv\u7684\u76f4\u63a5\u540e\u7ee7\uff0c\u56e0\u6b64 \\(T_R\\) \u4e2dm\u7684\u5de6\u5b50\u6811\u5fc5\u4e3a\u7a7a\u3002\u76f4\u63a5\u5c06 \\(T_L\\) \u4f5c\u4e3am\u7684\u5de6\u5b50\u6811\u3002\u5b8c\u6210\u3002 10. Red Black Tree 10.1 Definition \u4e3a\u6240\u6709\u6709\u9700\u8981\u7684\u8282\u70b9\u5f15\u5165 n+1 \u4e2a\u5916\u90e8\u8282\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u975e\u7a7a\u3002 \u6811\u6839root\uff1a\u9ed1\u8272 \u5916\u90e8\u8282\u70b9\uff1a\u9ed1\u8272 \u5176\u4f59\u8282\u70b9\uff1a\u82e5\u4e3a\u7ea2\uff0c\u5219\u53ea\u80fd\u6709\u9ed1\u5b69\u5b50\uff08\u7ea2\u4e4b\u5b50\uff0c\u4e4b\u7236\u5fc5\u4e3a\u9ed1\uff09 \u5916\u90e8\u8282\u70b9\u5411\u4e0a\u5230\u6839\uff1a\u9014\u4e2d\u9ed1\u8282\u70b9\u6570\u76ee\u76f8\u7b49\uff08\u6240\u6709\u5916\u90e8\u8282\u70b9\u7684 \u9ed1\u6df1\u5ea6 \u76f8\u7b49\uff09 10.2 DS Lifting : \u5c06\u6bcf\u4e2a\u7ea2\u8282\u70b9\u63d0\u5347\uff0c\u4f7f\u4e4b\u4e0e\u5176parent\uff08\u5fc5\u4e3a\u9ed1\uff09\u201c\u7b49\u9ad8\u201d\uff1b\u6216\u8bf4\uff0c\u5c06\u9ed1\u8282\u70b9\u4e0e\u5176\u7ea2\u5b69\u5b50\u89c6\u4f5c\u4e00\u4e2a\u5927\u7684\u8282\u70b9\u3002\u5982\u6b64\uff0c\u5c06\u7ea2\u9ed1\u6811\u53d8\u6362\u4e3a\u4e86 4\u9636B\u6811\uff08(2, 4)-Tree\uff09 \u3002 \u53ef\u4ee5\u9a8c\u8bc1\uff0cLifting\u4e4b\u540e\u7684B\u6811\u4e2d\uff0c\u540c\u4e00\u8282\u70b9\u4e0d\u4f1a\u5305\u542b\u7d27\u90bb\u7684\u7ea2\u8272key\u3002 10.3 Algorithm 10.3.1 Insert \u8c03\u7528BST\u7684\u6807\u51c6search\uff1b\u5f85\u63d2\u5165key\u4e0d\u5b58\u5728\uff1bsearch\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e86hot\u3002 \u521b\u5efa \u7ea2\u8282\u70b9 x\uff0c\u4ee5hot\u4e3aparent\uff0c\u9ed1\u9ad8\u5ea6-1\u3002 \u82e5x\u7684parent p\u4e3a\u7ea2\uff0c\u5219\u53cc\u7ea2\u4fee\u6b63\u3002 10.3.2 Double Red Issue \u63d2\u5165x\u540e\uff0c\u4f9d\u6b21\u786e\u8ba4\u5176\u7956\u5148p\uff0cg\u3002\u82e5p\u4e3a\u7ea2\uff0c\u5219\u9700\u53cc\u7ea2\u4fee\u6b63\u3002 \u603b\u56fe\uff1a \u8003\u67e5u\uff1a [1] u\u4e3ablack\uff1a \uff081\uff09recolor\uff08\u91cd\u65b0\u67d3\u8272\uff09\uff1a\u65e0\u8bba\u987a\u5411\uff08a\uff09\u8fd8\u662f\u53cd\u5411\uff08b\uff09\uff0c\u6309\u4e2d\u5e8f\u904d\u5386\uff0c\u8ba9x\uff0cp\uff0cg\u4e2d\uff0c\u5728 \u4e2d\u95f4\u7684\u4e3ablack\uff0c\u4e24\u4fa7\u7684\u4e3ared \uff1b \uff082\uff09\u7528 \u201c3+4\u91cd\u6784\u201d \u8c03\u6574\u5176\u62d3\u6251\u7ed3\u6784\u3002 \u8c03\u6574\u5b8c\u5373\u7ed3\u675f\uff0c\u65e0\u7f3a\u9677\u4f20\u9012\u3002 [2] u\u4e3ared\uff1a \uff08\u501f\u52a9B\u6811\u7684\u7406\u89e3\uff0c\u5373\u8282\u70b9\u53d1\u751f\u4e86\u4e0a\u6ea2\u3002\uff09 recolor\uff1a\u65e0\u8bba\u662f\u987a\u5411\u8fd8\u662f\u53cd\u5411\uff0c\u5747\u53ea\u9700\uff1a\u5c06p\uff0cu\u7531\u7ea2\u8f6c\u9ed1\uff08p\u3001u\u9ed1\u9ad8\u5ea6++\uff09\uff0c\u5c06g\u7531\u9ed1\u8f6c\u7ea2\u3002 \uff08\u62d3\u6251\u7ed3\u6784\u4e0d\u53d8\uff09 \u53cc\u7ea2 \u4f20\u9012 \uff1a\u7531\u4e8eg\u7684\u53d8\u7ea2\uff0c\u53ef\u80fd\u5bfc\u81f4\u53cc\u7ea2\u5411\u4e0a\u4f20\u9012\uff0c\u56e0\u6b64\u9700\u8981\u9012\u5f52\u5730\u4fee\u590d\u3002\u6709\u53ef\u80fd\u4e0a\u6eaf\u81f3root\uff0c\u4f46\u7531\u4e8e\u89c4\u5b9aroot\u5fc5\u4e3a\u9ed1\uff0c\u6545\u6b64\u5904\u4f1a\u53d1\u751f \u5168\u6811\u9ed1\u9ad8\u5ea6\u589e\u52a0 \u3002 \u603b\u7ed3\uff1a\u65f6\u95f4 \\(O(logn)\\) \u3002\u62d3\u6251\u7ed3\u6784\u6539\u53d8 \\(O(1)\\) \u3002 10.3.3 Delete \u8c03\u7528BST\u5e38\u89c4remove\u7b97\u6cd5\u3002\u5b9e\u9645\u5220\u9664\u8005\u4e3ax\u3002x\u53ef\u80fd\u6709\u53f3\u5b69\u5b50\uff0c\u4f1a\u201c\u63a5\u66ff\u201dx\u3002 \u82e5x\u548cr\u540c\u65f6\u4e3a\u9ed1\uff08c\uff09\uff0c\u5219\u9700\u53cc\u9ed1\u4fee\u6b63\u3002\u82e5\u4e0d\u662f\uff0c\u5206\u60c5\u51b5\uff1a \uff08a\uff09x\u4e3a\u7ea2\uff0cr\u4e3a\u9ed1\uff0c\u65e0\u9700\u8c03\u6574\u3002 \uff08b\uff09x\u4e3a\u9ed1\uff0cr\u4e3a\u7ea2\uff0cr\u63a5\u66ffx\u540e\u53d8\u9ed1\u3002 10.3.4 Double Black Issue \u603b\u56fe\uff1a \u82e5x\u548cr\u540c\u65f6\u4e3a\u9ed1\uff0c\u8003\u67e5r\u7684\u5144\u5f1fs\uff08\u5373p\u7684\u53e6\u4e00\u5b69\u5b50\uff09\u7684\u989c\u8272\u53cas\u7684\u5b69\u5b50\u7684\u989c\u8272\uff1a [1] \u82e5s\u4e3ablack\uff1a \uff081\uff09s\u81f3\u5c11\u6709\u4e00\u5b69\u5b50c\u4e3ared\uff1a \uff08\u5bf9\u5e94B\u6811\u4e0b\u6ea2\u3002\uff09 \u91c7\u7528\u201c3+4\u91cd\u6784\u201d\u8c03\u6574\u62d3\u6251\u7ed3\u6784\uff0cp\u3001s\u3001c\u4e09\u8005\u4e2d\u5c45\u4e2d\u8005\u7ee7\u627fp\u539f\u5148\u7684\u989c\u8272\uff0c\u5176\u4f59\u67d3\u9ed1\u3002 \u8c03\u6574\u7acb\u5373\u7ed3\u675f\uff0c\u65e0\u4f20\u9012\uff01 \uff082\uff09s\u4e24\u5b69\u5b50\u5747\u4e3ablack\uff1a \uff08i\uff09p\u4e3ared\uff1a \uff08\u5bf9\u5e94B\u6811\u4e0b\u6ea2\u3002\uff09 \u4ee4s\u4e3ared\uff0cp\u4e3ablack\uff08a\u2192b\uff09\u3002\u65e0\u9700\u8c03\u6574\u62d3\u6251\u7ed3\u6784\u3002 \u8c03\u6574\u7acb\u5373\u7ed3\u675f\uff0c\u65e0\u4f20\u9012\uff01 \uff08ii\uff09p\u4e3ablack \uff08\u5bf9\u5e94B\u6811\uff0c\u4e0b\u6ea2\u5f15\u53d1\u4e86\u4e0a\u5c42\u4e0b\u6ea2\uff0c\u9700\u7ee7\u7eed\u9012\u5f52\u8c03\u6574\u3002\uff09 \u4ee4s\u4e3ared\u3002 \u7136\u540e\u4ee5p\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\u9ed1\u9ad8\u5ea6--\u3002\u82e5p\u6709parent g\uff0c\u5219g\u7684\u9ed1\u9ad8\u5ea6\u5931\u8861\u3002\u56e0\u6b64\u9700\u9012\u5f52\u5730 \u4e8ep\u5904 \u8fdb\u884c\u53cc\u9ed1\u4fee\u6b63\u3002 \u5411\u4e0a\u9012\u5f52\u3002\u4f46\u4ece\u7ea2\u9ed1\u6811\u6765\u770b\u62d3\u6251\u7ed3\u6784\u4e0d\u53d8\u3002 [2] \u82e5s\u4e3ared\uff1a \uff08\u5219s\u2018\u5fc5\u7136\u662f\u9ed1\u7684\uff09 \u6b64\u65f6\uff0c\u89c2\u5bdf\u4ee5p\u4e3a\u6839\u7684\u5b50\u6811\uff1as\u2018\u5fc5\u4e3a\u9ed1\uff0c\u5373\u60c5\u51b51\uff1b\u800cp\u4e3ared\uff0c\u56e0\u6b64\u4e0d\u4f1a\u662f\u300c\u60c5\u51b5[1]-\uff082\uff09\uff08ii\uff09\u300d\u3002\u4e8ex/r\u5904\u7ee7\u7eed\u9012\u5f52\u5730\u53cc\u9ed1\u4fee\u6b63\u5373\u53ef\u3002 \u9012\u5f52\u4e00\u5c42\u4fbf\u7ed3\u675f\uff0c\u4e0d\u4f1a\u4f20\u9012\uff01 \u5220\u9664\u603b\u7ed3\uff1a \u603b\u7ed3\uff1a\u5bf9\u4efb\u4f55\u64cd\u4f5c\uff0c\u62d3\u6251\u7ed3\u6784\u7684\u6539\u53d8 \\(O(1)\\) \u3002 11. B Tree 11.1 Definition m\u9636B-Tree\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709 \\(ceil(m/2) - 1 \\le n \\le m-1\\) \u4e2akey\uff0c \\(ceil(m/2) \\le n+1 \\le m\\) \u4e2a\u5206\u652f\u3002\uff08 \\(m \\ge 3\\) \uff09 \u9700\u6ee1\u8db3 \\(m\\ge n+1 \\ge ceil(m/2)\\) \u3002\uff08 \u9664\u4e86\u6839\u8282\u70b9 \u4e0d\u80fd\u5c11\u4e8e\u4e00\u534a\uff09 \u4e5f\u79f0 (ceil(m/2), m)-Tree\u3002 11.2 DS \u6bcf\u4e2a\u8282\u70b9\u4e24\u4e2aVector\uff0c\u5206\u522b\u5b58\u50a8key\uff0c\u6307\u9488\u3002 \u67d0node\u4e2d\uff0c\u4e24key\u4e4b\u95f4\u7684\u4e0b\u7ea7\u6307\u9488\u6307\u5411\u7684node\u4e2d\u7684key\u4ecb\u4e8e\u4e24key\u4e4b\u95f4\u3002 11.2.1 Limited maximum height \\(\\Omega(log_m N) \\le h \\le O(log_m N)\\) \u3002 11.3 Algorithm 11.3.1 Find \u6bcf\u4e00\u5c42\u5185\u90e8\u987a\u5e8f\u67e5\u627e\u3002\u4f46\u56e0\u4e3a\u987a\u5e8f\u5c40\u90e8\u8bbf\u95ee\u5f88\u5feb\uff0c\u65f6\u95f4\u53ef\u4ee5\u5ffd\u7565\u3002 \u5f53\u627e\u4e0d\u5230\u65f6\uff0c\u8f6c\u5165\u4e0b\u4e00\u5c42\u67e5\u627e\u3002 \\(O(logn)\\) \u3002n\u4e3akey\u7684\u4e2a\u6570\u3002 11.3.2 Insert \u5148\u63d2\u5165v\uff1a \u5bfb\u627ev\uff0c\u786e\u8ba4\u5176\u4e0d\u5b58\u5728\uff0c\u5bfb\u627e\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e86hot\uff08\u67e5\u627e\u5931\u8d25\u7684\u6700\u540e\u4e00\u4e2anode\u7684parent\uff09\u3002 \u5728hot\u91cc\u63d2\u5165v\u3002 \u89c6\u60c5\u51b5\u505a \u5206\u88c2 \u3002 11.3.3 \u4e0a\u6ea2\u4e0esplit \u4e0a\u6ea2\u8282\u70b9\u6070\u597d\u6709m\u4e2akey\u3002 \u627e\u5230\u4e0a\u6ea2\u8282\u70b9\u4e2d\u5c45\u4e2d\u7684key\uff0c\u4ee5\u4e4b\u4e3a\u754c\u5c06\u8282\u70b9\u4e00\u5206\u4e3a\u4e8c\u3002 \u5c06\u5c45\u4e2d\u7684key\u63d0\u5347\u81f3\u539f\u8282\u70b9\u7684parent\u4e2d\u3002 \u4e0a\u6ea2\u4f20\u9012\uff1a\u6700\u591a\u4f20\u5230\u6839\u3002\u5982\u679c\u6839\u6ee1\u4e86\uff0c\u5c31\u4e0a\u6ea2\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u65b0\u7684\u6839\u3002 \u663e\u7136\u4e0a\u6ea2\u4f20\u9012\u6b21\u6570\u662f\u6709\u754c\u7684\u3002 \\(O(h) = O(log_mN)\\) \u3002 11.3.4 \u5220\u9664 \u627e\u76f4\u63a5\u540e\u7ee7\u7684\u6570\uff1a\u5bf9\u4e8e\u975e\u53f6\u8282\u70b9\u9700\u5148\u627e\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\uff1a\u5148\u5f80\u53f3\u4e0b\u4e00\u6b21\uff0c\u7136\u540e\u4e00\u8def\u5411\u5de6\uff0c\u76f4\u5230\u53f6\u8282\u70b9\u3002 \u4ea4\u6362 \u5220\u9664\u4ea4\u6362\u540e\u7684\uff0c\u9700\u8981\u5220\u9664\u7684\uff0c\u5df2\u7ecf\u5728\u53f6\u8282\u70b9\u4e2d\u7684\u6570 \u5220\u9664\u540e\u9700\u8981\u5904\u7406\u4e0b\u6ea2\u3002 11.3.5 \u4e0b\u6ea2 \u4e0b\u6ea2\u8282\u70b9\u6070\u597d\u6709 \\(O(ceil(m/2) - 2)\\) \u4e2akey\u3002 \u5206\u60c5\u51b5\uff1a \uff081\uff09\uff08Rotate \\(O(1)\\) \uff09\u5de6\u5144\u5f1f\uff08\u540cparent\uff09\u5b58\u5728\uff0c\u4e14\u5176key\u4e2a\u6570-1\u4ecd\u6ee1\u8db3\u6761\u4ef6\uff1a \uff082\uff09\uff08Rotate \\(O(1)\\) \uff09\u53f3\u5144\u5f1f\uff08\u540cparent\uff09\u5b58\u5728\uff0c\u4e14\u5176key\u4e2a\u6570-1\u4ecd\u6ee1\u8db3\u6761\u4ef6\uff1a \uff083\uff09\uff08Combine \\(O(log_mN)\\) \uff09L\u6216R\u4e0d\u5b58\u5728\uff08\u4e0d\u53ef\u80fd\u540c\u65f6\u4e0d\u5b58\u5728\uff0c\u56e0\u4e3a\u4e00\u4e2anode\u81f3\u5c11\u4e24\u4e2a\u5206\u652f\uff09\uff0c\u6216key\u7684\u4e2a\u6570\u5df2\u8fbe\u4e0b\u9650\u4e0d\u80fd\u518d\u7ed9\u51fa\uff1a \u5408\u5e76\u51fa\u6765\u7684\u8282\u70b9\u4e00\u5b9a\u6ee1\u8db3key\u4e2a\u6570\u7684\u8303\u56f4\u6761\u4ef6\u3002 \u7236\u8282\u70b9P\u5c11\u4e86\u4e00\u4e2akey\uff0c\u53ef\u80fd\u4e0b\u6ea2\u3002\u56e0\u6b64\u4e0b\u6ea2\u4f1a\u4f20\u9012\u3002 12. Heap (min) (Priority Queue) \u4e0a\u5927\u4e0b\u5c0f\uff0c\u6216\u4e0a\u5c0f\u4e0b\u5927\u3002 12.1 Shift Up \\(O(logn)\\) \u3002 shift_up(i): // shift up the node with index i { while (i > 0): // i is not root { if (data[i] < data[ parent_of[i] ]): break // satisfied else: // if the parent has lower priority than data[i] swap(data[i], data[ parent_of[i] ]) // shift data[i] to the upper layer i = parent_of[i] // examine the upper layer } return i } 12.2 Shift Down \\(O(logn)\\) \u3002 shift_down(i): // shift down the node with index i { while (i != proper_parent_at(i)): { swap(i, proper_parent) i = proper_parent } return i } proper_parent_at(i): // gives the maximum value among data[i], data[ left_child[i]] or data[ right_child[i] ] // gives parent i first if i == left_child[i] or i == right_child[i] Expected - \\(O(1)\\) \u3002 12.3 Pop Delete the value at the top and replace it with the last value. Shift the current value at the top down. 12.4 Push Append the value to the last of the array. Shift the last value up. 12.5 Floyd Heapify \\(O(n)\\) \u3002 12.5.1 Combine Given two heaps and a node p. How to combine them to a new heap? Take the two heaps as childrens of p. Then shift p down . 12.5.2 Heapify For complete binary heap, shift the internel nodes down, which generates \"sub-heap\" start at the bottom. Finally a heap is constructed. heapify(size n): { for (i = n / 2 - 1; i >= 0; i--) shift_down(i) } 13. d-Heap \u591a\u53c9\u5806\u7684\u590d\u6742\u5ea6\uff1a\u201c\u4e0a\u5c71\u5bb9\u6613\u4e0b\u5c71\u96be\u201d\u3002 14. Leftlist Heap 14.1 Definition Null path length: \u82e5x\u4e3a\u5916\u90e8\u8282\u70b9\uff0c\u5219 \\(npl(x) = 0\\) \uff1b\u5426\u5219\uff0c \\(npl(x) = 1 + min(~npl(~lc(x)~), npl(~rc(x)~)~)\\) \\(npl\\) \u7684\u610f\u4e49\uff1a x\u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \u3002 \u5de6\u5f0f\u5806 \uff1a \\(\\forall x, npl(~lc(x)~) \\ge npl(~rc(x)~)\\) \u3002 \u5373\uff0c\u5bf9npl\u503c\uff0c\u4efb\u610f\u5185\u90e8\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e0d\u5c0f\u4e8e\u53f3\u5b69\u5b50\u3002 \uff08\u7136\u800c\u5982\u56fe\uff0c\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\u5e76\u4e0d\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u53f3\u5b50\u6811\u3002\uff09 \u4e8e\u662f\u6709\u6027\u8d28\uff1a \\(npl(x) = 1 + npl(rc(x))\\) \uff0c\u4e5f\u7b49\u4e8e \u6700\u53f3\u4fa7\u901a\u8def\u7684\u957f\u5ea6d \u3002 \\(d = O(logn)\\) \u3002 14.2 Algorithm merge(a,b)\uff1a \u901a\u8fc7swap\u786e\u4fdda>b\u3002 \u5c06 \\(a_R\\) \u4e0e \\(b\\) \u5408\u5e76\u6210\u65b0\u7684 \\(a_{R'}\\) \uff0c\u82e5\u65b0\u7684 \\(a_{R'}\\) \u4e0e \\(a_{L}\\) \u4e0d\u6ee1\u8db3npl\u5173\u7cfb\uff0c\u5219\u4ea4\u6362\u4e4b\u3002 \u7ef4\u62a4a\u7684npl\u3002 15. Hash Function \u8bc4\u4ef7\u6807\u51c6\u4e0e\u8bbe\u8ba1\u539f\u5219\uff1a \u786e\u5b9a\uff1a\u540c\u4e00\u5173\u952e\u7801\u603b\u662f\u88ab\u6620\u5c04\u5230\u540c\u4e00\u5730\u5740 \u5feb\u901f\uff1a\u8ba1\u7b97 \\(O(1)\\) \u6ee1\u5c04\uff1a\u5c3d\u53ef\u80fd\u5145\u5206\u5730\u8986\u76d6\u6574\u4e2a\u6563\u5217\u7a7a\u95f4 \u5747\u5300\uff1a\u6620\u5c04\u5230\u5404\u4f4d\u7f6e\u7684\u6982\u7387\u5c3d\u91cf\u63a5\u8fd1\uff0c\u907f\u514d\u805a\u96c6 16. Closed Hash Table Suggested Load Factor: \\(\\lambda < 0.5\\) . Open Addressing Strategies: 16.1 Linear Probing ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + 1) % M ] 16.1.1 Search \u4f9d\u6b21\u5411\u540e\u627e\uff0c\u5bf9\u5e94\u4e00\u4e2a\u67e5\u627e\u94fe\u3002 \u5f53\u9047\u5230\u7a7a\u6876\uff08\u4e14\u540e\u8ff0lazy tag\u4e3afalse\uff09\u65f6\uff0c\u67e5\u627e\u5931\u8d25\u3002 16.1.2 Delete with lazy tag \u5220\u9664\u65f6\uff0c\u5982\u679c\u4ec5\u4ec5\u5c06\u6876\u6e05\u7a7a\uff0c\u5219\u4f1a\u9020\u6210\u67e5\u627e\u94fe\u65ad\u88c2\u3002\u4e3a\u6b64\u7ed9\u6bcf\u4e2a\u6876\u5f15\u5165lazy tag\uff0c\u8bb0\u5f55\u8fd9\u91cc\u66fe\u7ecf\u662f\u5426\u6709\u8fc7\u5143\u7d20\u3002 16.1.3 Rehasing When the load factor is relatively large, we can rebuild the hashtable. Double the capacity of hashtable. Create new lay tags. For every item in the old table, insert it into the new hashtable. 16.2 Undirectional Quadratic Probing ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + j) % M ] ( \\(j = 0, 1, 2, ...\\) , which means the j-th trial) \u4f18\u52bf\uff1a\u8bd5\u63a2\u4f4d\u7f6e\u7684\u300c\u95f4\u8ddd\u300d\u4ee5\u7ebf\u6027\u901f\u5ea6\u589e\u957f\uff1b\u4e00\u65e6\u53d1\u751f\u51b2\u7a81\uff0c\u53ef\u4ee5\u5c3d\u5feb\u8df3\u79bb\u805a\u96c6\u533a\u6bb5\u3002 16.2.1 Avoid infinite Probing \u4e00\u79cd\u65e0\u9650\u5faa\u73af\u65e0\u6cd5\u627e\u5230\u7a7a\u6876\u7684\u60c5\u51b5\uff08hashtable M=11, a prime number; load factor = 6/11 > 0.5\uff09\uff1a Thm. M is a prime and the load factor \\(\\lambda \\le 0.5 ~ \\Rightarrow\\) Can find an available bucket. Reason: (M is not a prime \\(\\Rightarrow\\) The number of possible values of \\(n^2 ~ \\% ~ M\\) <= \\(ceil(M/2)\\) .) M is a prime \\(\\Rightarrow\\) Number of possible values of \\(n^2 ~ \\% ~ M\\) == \\(ceil(M/2)\\) , and they are exactly the first \\(ceil(M/2)\\) values. 16.3 Bidirectional Quadratic Probing ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + j * (-1)^(j-1)) % M ] ( \\(j = 0, 1, 2, ...\\) , which means the j-th trial) Thm. \u8868\u957f\u53d6\u5f62\u5982 \\(M = 4k+3\\) \u7684\u7d20\u6570\uff0c\u5219\u5fc5\u7136\u53ef\u4ee5\u4fdd\u8bc1\u67e5\u627e\u94fe\u7684\u524dM\u9879\u4e92\u5f02\uff0c\u5373\u6b63\u5411\u4e0e\u53cd\u5411\u7684\u67e5\u627e\u94fe\u65e0\u516c\u5171\u7684\u6876\u3002 17. Skip List 17.1 DS \u5bf9\u6bcf\u4e2a\u6570\uff0c\u5b83 \u7ee7\u7eed\u5728\u4e0b\u4e00\u5c42\u5b58\u5728\u7684\u6982\u7387 \\(p = 0.5\\) \u3002\u4e8e\u662f\u5404\u7eb5\u5411\u5854\u7684\u9ad8\u5ea6\u670d\u4ece\u51e0\u4f55\u5206\u5e03 \\(P(h = k) = p^{k-1}(1-p)\\) \u3002\u56e0\u6b64 \u671f\u671b\u9ad8\u5ea6 \u4e0d\u8fc7 \\(E(h) = {1 \\over 1-p} = 2\\) \u3002\u7531\u6b64\u5bfc\u51faSkip List\u7684 \u671f\u671b\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\(expected-O(n)\\) \u3002 \u5de6\u53f3\u4e3a\u54e8\u5175\u8282\u70b9\uff0c\u65b9\u4fbf\u5b9e\u73b0\u3002 \u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u4e86\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u6307\u9488\u3002 \u5bf9\u5185\u90e8\uff0c\u540c\u5c42\u8282\u70b9\u5173\u952e\u7801\u6709\u5e8f\uff1b\u5bf9\u5916\u90e8\uff0c\u65e0\u9700\u6709\u5e8f\uff0c\u53ea\u9700\u5224\u7b49\u3002 17.2 Algorithm 17.2.1 Search \u4ece\u9876\u5c42\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u3002 \u5411\u53f3\u4e0b\u65b9\u5411\u524d\u8fdb\uff1a\u5728\u6bcf\u4e00\u5c42\u5411\u53f3\u67e5\u627e\uff1b\u82e5\u9047\u5230\u76f8\u7b49\u7684key\u5219\u6210\u529f\uff1b\u82e5\u9047\u5230key\u503c\u5927\u4e8e\u67e5\u627ekey\u7684\u8282\u70b9\uff0c\u6216\u78b0\u5230\u54e8\u5175\uff0c\u5219\u8f6c\u5165\u4e0b\u4e00\u5c42\u3002\u82e5\u7a7f\u5230\u4e86-1\u5c42\uff0c\u5219\u5931\u8d25\u3002 \u8fd4\u56de\u503c\u603b\u4e3a\u4e0d\u5927\u4e8e\u67e5\u627e\u503c\u7684\u6700\u5927\u8005\u3002 \u590d\u6742\u5ea6\uff1a \\(expected-O(logn)\\) \uff1a 1\uff09\u7eb5\u5411\u8df3\u8f6c\uff1a \u8003\u67e5\u67d0\u4e00\u5ea7\u5854\u7684\u9ad8\u5ea6\uff1a \\(P(h \\ge k) = p^k\\) \u3002 \u8003\u8651\u7b2ck\u5c42List \\(S_k\\) \uff0c\u5b83\u975e\u7a7a\uff0c\u5373n\u4e2a\u53ef\u80fd\u8282\u70b9\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u5b58\u5728\u7684\u6982\u7387 \\(P(|S_k| > 0) \\le n \\cdot p^k\\) \u3002\uff08\u67d0key\u503c\u5728\u7b2ck\u5c42\u5b58\u5728\u7684\u6982\u7387\u4e3a \\(p^k\\) \u3002\uff09 \u5f97\u51fa\uff1a\u5854\u9ad8\u5ea6\u63a7\u5236\u5728 \\(O(logn)\\) \u7684\u6982\u7387\u6781\u5927\uff0c\u63a5\u8fd1\u4e8e1\u3002 \u56e0\u6b64\uff0c\u7eb5\u5411\u8df3\u8f6c\u6b21\u6570 \\(expected-O(logn)\\) \u3002 2\uff09~~\u6a2a\u5411\u8df3\u8f6c~~\u603b\u4f53\uff1a \uff08\u6559\u6750\u4e0a\u5148\u5206\u6790\u7eb5\u5411\u8df3\u8f6c\uff0c\u518d\u5206\u6790\u6a2a\u5411\u8df3\u8f6c\u3002\u4e2a\u4eba\u8ba4\u4e3a\u6a2a\u5411\u90e8\u5206\u7684\u5206\u6790\u4e0d\u591f\u597d\u3002\u4e0b\u9762\u6309\u7167\u539f\u59cb\u8bba\u6587\u7684\u601d\u8def\u7406\u89e3\u3002\u539f\u59cb\u8bba\u6587\u603b\u4f53\u8ba1\u7b97\u5305\u62ec\u6a2a\u5411\u3001\u7eb5\u5411\u5728\u5185\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u3002\uff09 \u5bf9\u67d0\u4e00\u641c\u7d22\u8def\u5f84\uff0c\u8fdb\u884c \u53cd\u5411 \u8003\u5bdf\uff0c\u5373\u4ece\u76ee\u6807\u8282\u70b9\u5411\u5de6\u4e0a\u524d\u8fdb\u8fd4\u56de\u8d77\u59cb\u8282\u70b9\u3002\u8bb0\u4e00\u4e2a\u9700\u8981\u5411\u4e0a\u722ck\u5c42\u7684\u53cd\u5411\u641c\u7d22\u8def\u5f84\u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6570\u4e3a \\(C(k)\\) \u3002 \u8bbe\u5f53\u524d\u5728\u67d0\u8282\u70b9x\uff0c\u8fd8\u9700\u5411\u4e0a\u722ck\u5c42\u3002\u6709\u4e24\u79cd\u53ef\u80fd\uff1a i\uff09x\u662f\u5854\u9876\uff0c\u6982\u7387\u4e3a \\(1-p\\) \u3002\u6b64\u65f6\u53cd\u5411\u8d70\u641c\u7d22\u8def\u5f84\uff0c\u5fc5\u7136\u662f\u5411\u5de6\u79fb\u52a8\u4e00\u6b21\uff1b\u79fb\u52a8\u540e\u8fd8\u9700\u8981\u5411\u4e0a\u722ck\u5c42\u3002 ii\uff09x\u4e0d\u662f\u5854\u9876\uff0c\u6982\u7387\u4e3ap\u3002\u6b64\u65f6\u53cd\u5411\u8d70\u641c\u7d22\u8def\u5f84\uff0c\u5fc5\u7136\u662f\u5411\u4e0a\u722c\u4e00\u5c42\uff1b\u722c\u5b8c\u8fd8\u9700\u8981\u5411\u4e0a\u722ck-1\u5c42\u3002 \u7efc\u4e0a\u6709\uff1a \\(C(0)=0\\) \\(C(k)=(1-p)(1+C(k))+p(1+C(k-1))\\) \u4e8e\u662f \\(C(k)=1/p+C(k-1) ~ \\Rightarrow ~ C(k)=k/p\\) \u3002 \u5bf9\u4e8e\u4efb\u610f\u53cd\u5411\u641c\u7d22\u8def\u5f84\uff0c\u53ef\u4ee5\u62c6\u4e3a\u4e24\u90e8\u5206\uff1a\u4ece0\u5c42\u722c\u5230 \\(O(logn)\\) \u5c42\uff08\u5854\u9ad8\u5ea6\u63a7\u5236\u5728 \\(O(logn)\\) \u7684\u6982\u7387\u6781\u5927\uff09\u3001\u722c\u5b8c\u5269\u4e0b\u7684\u5c42\u3002\u7c97\u7565\u8003\u8651\u524d\u8005\uff0c\u65f6\u95f4\u4e3a \\(C(O(logn))=O(logn)/p\\) \u3002 18. KMP \u603b\uff1a \\(O(n+m)\\) \u3002 \uff08\u4e0a\u9762\u4e3a\u4e00\u957f\u5b57\u7b26\u4e32\uff1b\u4e0b\u9762\u4e3a\u9700\u8981\u5728\u4e0a\u9762\u7684\u4e32\u4e2d\u67e5\u627e\u7684\u6a21\u5f0f\u4e32\u3002\u9ec4\u8272\u9634\u5f71\u533a\u57df\u8868\u793a\u76f8\u540c\u7684\u5b50\u4e32\u3002\uff09 \u5f53\u5931\u8d25\u65f6\uff0c j \uff08\u5411\u524d\uff09\u8df3\u8f6c\u81f3 next[j] \u7ee7\u7eed\u5c1d\u8bd5\u5339\u914d\u3002\u800c i \u59cb\u7ec8\u5411\u540e\uff0c\u4fdd\u8bc1\u4e86 \u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u82e5\u5339\u914d\u6210\u529f\uff0c\u4f1a\u6709 j == m \u8df3\u51fa\u5faa\u73af\u3002\u8fd4\u56de\u503c i - j == i - m \u5c31\u662f\u5339\u914d\u4e0a\u7684\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u626b\u63cf\u4e00\u8d9f \\(O(n)\\) \u3002 18.1 Build Next Array \\(O(m)\\) \u3002 \\(next[j]\\) \u8868\u793a\u6a21\u5f0f\u4e32pattern\u7684 \\([0, j - 1]\\) \u533a\u95f4\u5185\uff0c\u6700\u5927\u516c\u5171\u524d\u7f00\u540e\u7f00\u7684\u957f\u5ea6\u3002 \uff08\u753b\u5708\u7684j\u4ee3\u8868\u5728\u76f8\u5e94\u4f4d\u7f6e\u66f4\u65b0\u4e86next\u6570\u7ec4\u3002\uff09 19. BM Complexity comparison: (Brutal Force; KMP; BM with BC; BM with BC & GS) (Pr: The probability that the two characters you randomly picked from the character set are the same.) 19.1 Bad Character Shift \uff08\u4ec5\u6709BC\u7b56\u7565\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \uff09\u3002 \u82e5\u67d0\u5904\uff08\u4e3b\u4e32\u5b57\u7b26\u4e3aX\uff0c\u6a21\u5f0f\u4e32\u4e3aY\uff09\u5339\u914d\u5931\u8d25\uff0c\u5219\u7528BC\u8868\u627e\u5230\u6a21\u5f0f\u4e32P\u4e2d\u6700\u540e\u4e00\u4e2aX\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u5bf9\u51c6\u4e3b\u4e32\u8fdb\u884c\u5339\u914d\u3002 \u5982\u679cP\u4e2d\u6700\u540e\u4e00\u4e2aX\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728Y\u4e4b\u524d\uff0c\u5219\u76f8\u5f53\u4e8eP\u53f3\u79fb\u3002 \u82e5P\u4e2d\u6700\u540e\u4e00\u4e2aX\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728Y\u4e4b\u540e\uff0c\u5176\u5b9e \u65e0\u9700\u4e5f\u4e0d\u80fd\u5de6\u79fb \u3002\uff08\u4fdd\u6301P\u4e00\u76f4\u53f3\u79fb\u7684\u5355\u8c03\u6027\u3002\uff09\u6b64\u65f6\u76f4\u63a5\u5c06P\u53f3\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\u3002 19.1.1 Build BC Array BC\u8868\u957f\u5ea6\u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u3002 BC\u8868\u521d\u59cb\u5316\u4e3a\u6bcf\u4e00\u9879\u4e3a-1\uff0c\u5bf9\u5e94\u5b57\u7b26\u672a\u51fa\u73b0\u5728P\u4e2d\u3002 \u4ece\u5de6\u5411\u53f3\u626b\u63cfP\uff0c\u4ee4 BC[ P[i] ] = i \u5373\u53ef\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u5728P\u4e2d\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u3002 19.2 Good Suffix Shift \uff08\u5229\u7528GS\u8868\u4f18\u5316\u53ef\u4f7fBM\u7b97\u6cd5\u8fbe\u5230 \\(O(n+m)\\) \u3002\uff09 \u5bf9\u6bcf\u4e2a\u540e\u7f00U\uff0c\u627e\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u4e0eU\u76f8\u540c\u7684\u5b50\u4e32V\u3002\u82e5\u4e0d\u5b58\u5728\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u627e\u80fd\u4e0eU\u7684\u540e\u7f00\u5339\u914d\u7684\u6700\u957f\u8005\u3002 \u4e8e\u662f\u5f53\u5339\u914d\u5931\u8d25\u65f6\uff0c\u53f3\u79fbP\uff0c\u5c06V\u4e0eU\u5bf9\u9f50\u3002 19.2.1 Build GS Array GS\u8868\u7ed9\u51fa\u5728\u67d0\u5904\u5931\u914d\u65f6\uff0cP\u7684 \u53f3\u79fb\u91cf \u3002 \uff08\u5177\u4f53\u7684\u6784\u5efa\u8fc7\u7a0b\u7565\u3002\uff09","title":"DSA"},{"location":"DSA_Review/#dsa","text":"Note that in this document there are some images with transparent backgound, so a bright theme may be more suitable to read them. Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"DSA"},{"location":"DSA_Review/#1-acknowledgement","text":"Thanks for Data Structure and Algorithm Course of CST, THU. Most of the content are extracted from the course material. Also thanks for my friends for their sincere help and ideas or images.","title":"1. Acknowledgement"},{"location":"DSA_Review/#2-basis-of-performance-analysis","text":"","title":"2. Basis of Performance Analysis"},{"location":"DSA_Review/#21-notation","text":"\\(T(n)\\) \uff1a\u4e3a\u6c42\u89e3\u89c4\u6a21\u4e3an\u7684\u95ee\u9898\uff0c\u6240\u9700\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u6b21\u6570\u3002 \\(O(f(n))\\) \uff1a \\(T(n) = O(f(n)) ~ \\Leftrightarrow T(n) < c \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u662f\u4e0a\u754c\u3002 \\(\\Omega(f(n))\\) \uff1a \\(T(n) = \\Omega(f(n)) ~ \\Leftrightarrow T(n) > c \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u662f\u4e0b\u754c\u3002 \\(\\Theta(f(n))\\) \uff1a \\(T(n) = \\Theta(f(n)) ~ \\Leftrightarrow c_1 \\cdot f(n)> T(n) > c_2 \\cdot f(n)\\) \uff0ci.e. \\(f(n)\\) \u4e0e \\(T(n)\\) \u540c\u9636\u3002","title":"2.1 Notation"},{"location":"DSA_Review/#22-np-p","text":"P\u95ee\u9898\uff1a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3\u3002 NP\u95ee\u9898\uff1a\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u5f97\u51fa\u6b63\u786e\u89e3\u7684\u95ee\u9898\u3002","title":"2.2 NP = P ?"},{"location":"DSA_Review/#23-series-and-corresponding-complexity","text":"","title":"2.3 Series and Corresponding Complexity"},{"location":"DSA_Review/#231","text":"","title":"2.3.1 \u5e38\u7528\u7ea7\u6570\uff1a\u7b97\u672f\u3001\u5e42\u3001\u51e0\u4f55\u3001\u5bf9\u6570\u7b49"},{"location":"DSA_Review/#232","text":"","title":"2.3.2 \u4e0d\u5e38\u89c1\u7684\u5206\u6570\u7ea7\u6570"},{"location":"DSA_Review/#24-master-thm","text":"\u4e0d\u540c\u5206\u6cbb\u5bf9\u5e94\u7684\u590d\u6742\u5ea6\uff1a \u5206\u6cbb\u901a\u5e38\u9012\u63a8\u5f62\u5f0f\uff1a \\(T(n) = a \\cdot T(\\frac{n}{b}) + O(f(n))\\) \u5373\uff1a\u539f\u95ee\u9898\u88ab\u5206\u4e3aa\u4e2a\u89c4\u6a21\u5747\u4e3a \\(n/b\\) \u7684\u5b50\u4efb\u52a1\uff1b\uff08\u6bcf\u4e00\u5c42\uff09\u4efb\u52a1\u7684\u5212\u5206\u3001\u89e3\u7684\u5408\u5e76\u8017\u65f6 \\(f(n)\\) \u3002 [1] \\(f(n) = O(n^{log_b a - \\epsilon}) ~ \\Rightarrow T(n) = \\Theta(n^{log_b a})\\) \uff08 \\(f(n)\\) \u8981\u5c0f\u4e8eO\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3aO\u662f\u5176\u4e0a\u754c\uff09 e.g. kd-search: \\(T(n) = 2T(n/4)+O(1) = O(\\sqrt{n})\\) [2] \\(f(n) = O(n^{log_b a} \\cdot log^k n) ~ \\Rightarrow T(n) = \\Theta(n^{log_b a} \\cdot log^{k+1}n)\\) e.g. Binary search: \\(T(n) = 1T(n/2)+O(1) = O(nlogn)\\) e.g. Merge Sort: \\(T(n) = 2T(n/2)+O(n) = O(nlogn)\\) [3] \\(f(n) = \\Omega(n^{log_b a + \\epsilon}) ~ \\Rightarrow T(n) = \\Theta(f(n))\\) e.g. quickSelect: \\(T(n) = 1T(n/2)+O(n) = O(n)\\)","title":"2.4 Master Thm."},{"location":"DSA_Review/#3-binary-search","text":"Optimization: Only one comparison in each loop. Return the maximum element that is not greater than e. BinarySearch ( data , e , lo , hi ) : // [lo, hi) { while ( lo < hi ) { median = ( lo + hi ) / 2 if ( e < data [ median ]) hi = mi // [lo, mi) else // (data[median] <= e) lo = mi + 1 // [mi + 1, hi) = (mi, hi) } // break when (lo == hi) return ( lo - 1 ) } Correctness: \u4ee5\u4e0b\u9648\u8ff0\u5728\u7b97\u6cd5\u6267\u884c\u5168\u8fc7\u7a0b\u4e2d\u603b\u662f\u5bf9\u7684\uff1a A[lo - 1] \u662f\u5df2\u77e5\u7684\u5c0f\u4e8e\u7b49\u4e8ee\u7684\u6570\uff08 A[0] ~ A[lo - 1] \uff09\u4e2d\u6700\u5927\u7684 A[hi] \u662f\u5df2\u77e5\u7684\u5927\u4e8ee\u7684\u6570\uff08 A[hi] ~ A[n] \uff09\u4e2d\u6700\u5c0f\u7684 \u636e\u6b64\uff0c\u53ef\u4ee5\u4ee5\u521d\u59cb\u72b6\u6001\u6210\u7acb\u4e3a\u57fa\uff0c\u8fdb\u884c\u6570\u5b66\u5f52\u7eb3\uff1b\u6309\u7167\u5faa\u73af\u4e2d\u7684\u4e24\u4e2a\u5206\u652f\u5206\u522b\u5f52\u7eb3\uff0c\u53d1\u73b0\u65e0\u8bba\u54ea\u4e2a\u5206\u652f\uff0c\u4e24\u4e2a\u6761\u4ef6\u4ecd\u7136\u662f\u5bf9\u7684\u3002\u56e0\u6b64\u6700\u540e A[lo - 1] \u662f\u5df2\u77e5\u7684\u5c0f\u4e8e\u7b49\u4e8ee\u7684\u6570\u4e2d\u6700\u5927\u7684\u3002","title":"3. Binary Search"},{"location":"DSA_Review/#4-sort-algorithms","text":"","title":"4. Sort Algorithms"},{"location":"DSA_Review/#41-bubblesort","text":"\\(O(n^2)\\) \u3002\u4e25\u683c\u4e0d\u7b49\u5173\u7cfb\u624d\u4ea4\u6362\uff08\u76f8\u7b49\u4e0d\u4ea4\u6362\uff09\u5c31\u662f\u7a33\u5b9a\u7684\u3002","title":"4.1 BubbleSort"},{"location":"DSA_Review/#411-improvement","text":"\u82e5\u67d0\u4e00\u8d9f\u626b\u63cf\u672a\u53d1\u73b0\u9006\u5e8f\u5bf9\uff0c\u5219\u8bf4\u660e\u5df2\u7ecf\u90fd\u6709\u5e8f\u6392\u5217\u4e86\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u3002 \u8fdb\u4e00\u6b65\u6539\u8fdb\uff1a\u867d\u7136\u7ea2\u8272unsorted\u90e8\u5206\u672a\u6709\u5e8f\uff0c\u4f46\u662f\u5b83\u7684\u67d0\u4e2a\u540e\u7f00\u53ef\u80fd\u6709\u5e8f\u3002\u7ef4\u62a4\u4e00\u4e2alast\u503c\uff0c\u521d\u59cb\u503c\u4e3alo\uff0c\u6bcf\u6b21\u53d1\u73b0\u9006\u5e8f\u5bf9i\uff0ci+1\u65f6\uff0c\u5c31\u4ee4 last=i \u3002\u5982\u6b64\u4ece\u524d\u5411\u540e\u626b\u63cf\u4e00\u8d9f\u4e4b\u540e\uff0clast\u8bb0\u5f55\u7684\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u9006\u5e8f\u5bf9\u7684\u4f4d\u7f6e\u3002\u5982\u6b64\uff0c\u9006\u5e8f\u5bf9\u53ea\u53ef\u80fd\u5b58\u5728\u4e8e [lo, last) \u4e2d\u3002\u7279\u6b8a\u5730\uff0c\u5982\u679c\u6574\u8d9f\u626b\u63cf\u6ca1\u6709\u53d1\u73b0\u9006\u5e8f\u5bf9\uff0c\u5219last\u4ecd\u7136\u4e3alo\u503c\u3002\u4e4b\u540e\u7684 hi=last \u64cd\u4f5c\u4f1a\u4f7f hi == lo \uff0c\u4ece\u800c\u7ec8\u6b62\u5faa\u73af\u3002","title":"4.1.1 Improvement"},{"location":"DSA_Review/#42-mergesort","text":"\\(O(nlogn)\\) \u3002\u4f18\u5148\u5de6\u8fb9\u7684\u5143\u7d20\u8fdb\u5165\u5f52\u5e76\uff0c\u7a33\u5b9a\u3002","title":"4.2 MergeSort"},{"location":"DSA_Review/#43-quicksort","text":"Expected - \\(O(nlogn)\\) \u3002 \u4e0d\u7a33\u5b9a\uff01 QuickSort ( lo , hi ) : { // [lo, hi) if ( hi - lo >= 2 ) { mi = partition ( lo , hi - 1 ) QuickSort ( lo , mi ) QuickSort ( mi + 1 , hi ) } }","title":"4.3 QuickSort"},{"location":"DSA_Review/#431-partition","text":"\u968f\u673a\u9009\u62e9\u4e00\u70b9\u4f5c\u4e3apivot\uff08\u8f74\u70b9\uff09\uff0c\u8ba9\u5176\u5c31\u4f4d\u3002 LUG\u7248\u7684Partition\u5982\u56fe\u6240\u793a\u3002\u59cb\u7ec8\u6709\uff1aL = [start, lo)\uff0cU = [lo, hi]\uff0cG = (hi, end]\u3002 Partition(lo, hi): { // [lo, hi] swap(data[lo], data[randint(lo, hi)]) pivot = data[lo] // \u968f\u673a\u9009\u53d6\u8f74\u70b9 while (lo < hi) { while (lo < hi && pivot < data[hi]) // pivot\u5c0f\u4e8eG\u533a\u95f4\u5de6\u8fb9\u5f85\u62d3\u5c55\u8282\u70b9\u65f6 hi-- // \u5411\u5de6\u62d3\u5c55G if (lo < hi) // \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u5220\u6389 data[lo++] = data[hi] // \u628aG\u533a\u95f4\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u6570\u653e\u5728L\u53f3\u7aef\uff08\u76f8\u5f53\u4e8e\u62d3\u5c55L\uff09 while (lo < hi && data[lo] < pivot) // pivot\u5927\u4e8eL\u533a\u95f4\u53f3\u8fb9\u5f85\u62d3\u5c55\u8282\u70b9\u65f6 lo++ // \u5411\u53f3\u62d3\u5c55L if (lo < hi) // \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u5220\u6389 data[hi--] = data[lo] // \u628aL\u533a\u95f4\u53f3\u8fb9\u5927\u4e8e\u7b49\u4e8epivot\u7684\u6570\u653e\u5728G\u5de6\u7aef\uff08\u76f8\u5f53\u4e8e\u62d3\u5c55G\uff09 } // \u7ee7\u7eed\u5faa\u73af\u62d3\u5c55G\u3001L // assert: lo == hi return lo }","title":"4.3.1 Partition"},{"location":"DSA_Review/#44-quick-selection","text":"QuickSelect(lo, hi, k): { while (lo < hi) { // perform quick partition on [lo, hi] swap(data[lo], data[randint(lo, hi)]) i = lo, j = hi, pivot = data[lo] // ... quick partition on [i, j] // finish with i == j; data[i] is the pivot // shrink [lo, hi] which contains k_th element if (k <= i) hi = i - 1 if (i <= k) lo = i + 1 } }","title":"4.4 Quick Selection"},{"location":"DSA_Review/#45-heapsort","text":"\u603b\u590d\u6742\u5ea6 \\((n + nlogn) = O(nlogn)\\) \u3002 \u4e0d\u7a33\u5b9a\uff01 \u3010 \\(O(n)\\) \u3011\u5c31\u5730 Floyd Heapify\uff1b\u5806\u533a\u95f4\uff08\u524d\u9762\uff09\u4e3a\u6574\u4e2a\u6570\u7ec4\uff1b\u5df2\u6392\u5e8f\u533a\u95f4\uff08\u540e\u9762\uff09\u4e3a\u7a7a\u3002 \u5c06\u7b2c0\u4e2a\u5143\u7d20\uff08\u5806\u9876\u5143\u7d20\uff1btop()\uff09\u4e0e\u5806\u533a\u95f4\u7684\u672b\u5c3e\u5143\u7d20swap\uff0c\u5806\u7684\u533a\u95f4--\uff0c\u5df2\u6392\u5e8f\u533a\u95f4++\u3002 \u3010 \\(O(logn)\\) \u3011\u5728\u65b0\u7684\u5806\u533a\u95f4\uff0c\u5c06\u521a\u6362\u5230\u9876\u7684\u5143\u7d20shift down\uff0c\u5f97\u5230\u5408\u6cd5\u7684\u5806\u3002 \u5c06\u5806\u9876\u5143\u7d20\u4e0e\u5806\u533a\u95f4\u7684\u672b\u5c3e\u5143\u7d20swap\uff0c......","title":"4.5 HeapSort"},{"location":"DSA_Review/#46-radixsort","text":"\u4f4e\u4f4d\u4f18\u5148 \u7684\u57fa\u6570\u6392\u5e8f\u3002 \u6570\u636e\u89c4\u6a21\u4e3an\uff0c\u6570\u5b57\u4f4d\u6570\u4e3at\uff0c\u6bcf\u4e00\u4f4d\u7684\u8303\u56f4\u4e3a \\((0, M]\\) \u3002 \u590d\u6742\u5ea6 \\(O(t*(n+M))\\) \u3002\uff08\u4e00\u822c\u4f18\u4e8e \\(O(nlogn)\\) \u3002\uff09\u7a33\u5b9a\uff01","title":"4.6 RadixSort"},{"location":"DSA_Review/#47-selectionsort","text":"\\(O(n^2)\\) \u3002\u5982\u679c\u7528swap\u6a21\u5f0f\uff0c \u4e0d\u7a33\u5b9a \uff01\u5982\u679c\u7528\u201c\u6eda\u52a8\u201d\u6a21\u5f0f\uff0c\u7a33\u5b9a\u3002 \u524dk\u4e2a\u5143\u7d20\u5df2\u7ecf\u6709\u5e8f\uff1b\u8003\u67e5\u7b2ck+1\u4e2a\u4f4d\u7f6e\uff1b\u904d\u5386k+1\u5f80\u540e\u7684\u6240\u6709\u5143\u7d20\uff0c\u9009\u62e9\u6700\u5c0f\u7684\u4e0e\u5f53\u524d\u7b2ck+1\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u4ea4\u6362\uff08swap\uff09\u3002","title":"4.7 SelectionSort"},{"location":"DSA_Review/#48-insertionsort","text":"\\(O(n^2)\\) \u3002\u7a33\u5b9a\u3002 \u7c7b\u4f3c\u4e8e\u5c06\u624b\u4e2d\u7684\u6251\u514b\u724c\u8fdb\u884c\u6392\u5e8f\u3002 \u524dk\u4e2a\u5143\u7d20\u5df2\u7ecf\u6709\u5e8f\uff1b\u8003\u67e5\u7b2ck+1\u4e2a\u5143\u7d20\uff0c\u4ece\u7b2ck\u4e2a\u5143\u7d20\u5411\u524d\u904d\u5386\uff0c\u5bfb\u627e\u5408\u9002\u4f4d\u7f6e\uff0c\u5c06\u5176\u63d2\u5165\u5176\u4e2d\uff0c\u4f7f\u5f97\u6709\u5e8f\u533a\u95f4\u6210\u4e3a\u524dk+1\u4e2a\u5143\u7d20\u3002","title":"4.8 InsertionSort"},{"location":"DSA_Review/#49-shellsort","text":"ShellSort(data): { // \u53d6\u67d0\u9012\u589e\u5e8f\u5217H H = { w_1 = 1, w_2, w_3, ... } // \u9009H\u5e8f\u5217\u4e2d\u5c0f\u4e8en\u7684\u6700\u540e\u4e00\u9879 k = max{i | w_i < n} // \u4eceH\u5e8f\u5217\u7b2ck\u9879\u5f80\u524d... for (t = k; t > 0; t--) { \u5c06data\u89c6\u4f5c\u5bbd\u5ea6\u4e3aw_t\u7684\u77e9\u9635B_t \u5bf9B_t\u7684\u6bcf\u4e00\u5217\u5206\u522b\u63d2\u5165\u6392\u5e8f\uff1aB_t[i], i = 0, 1, ..., w_t - 1 // \u6392\u5b8c\u540e\u91cd\u65b0\u7ec4\u6210\u6210\u4e00\u4f4d\u7684data\u5f62\u5f0f } // \u6700\u540e\u4e00\u6b21\u5faa\u73af w_t == 1 , \u610f\u5473\u7740\u4e00\u7ef4\u6392\u5e8f\u5b8c\u6210 } e.g. \u7ec4\u7ec7\u6210\u5bbd\u5ea6\u4e3a3\u7684\u77e9\u9635\u7684\u4e00\u6b21\u6392\u5e8f\uff1a","title":"4.9 ShellSort"},{"location":"DSA_Review/#491-complexity","text":"\\(H_{shell}={1,2,4,8,...}\\) : \\(O(n^2)\\) \uff08\u6784\u9020\u5947\u5076\u5206\u522b\u6709\u5e8f\u4f46\u6240\u6709\u5947\u5747\u5927\u4e8e\u5076\u3002\uff09 \\(H_{ps}=\\{ 2^k-1 \\}\\) : \\(O(n^{3/2})\\) \\(H_{pratt}=\\{ 2^p3^q \\} = 1,2,3,4,6,8,9,12\\) : \\(O(nlog^{2}n)\\) \\(H_{sedgewick}=\\{ 9\\cdot4^k - 9\\cdot2^k + 1 ~|~ 4^k - 3\\cdot2^k + 1 \\}\\) : \\(O(n^{4/3})\\) ; Average - \\(O(n^{7/6})\\)","title":"4.9.1 Complexity"},{"location":"DSA_Review/#492-correctness","text":"Knuth's Thm. A g-ordered sequence REMAINS g-ordered after being h-sorted. Thm. A sequence is g-ordered and h-ordered \\(\\Rightarrow\\) It is \\(ng+mh\\) - ordered. (Linear Combination) Thm. The numbers \\(\\ge ((g-1)(h-1) - 1)\\) must be linear combinations of g and h. \\(\\Rightarrow\\) The numbers that can form inversion pairs with the i-th number are limited to a decreasing interval as \\(h\\) decrease. \\(\\Rightarrow\\) The number of inversion pairs will always keep or decrease.(?)","title":"4.9.2 Correctness"},{"location":"DSA_Review/#5-tree","text":"\u6df1\u5ea6 \\(depth(v)=|path(v)|\\) \uff0c\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684 \u8fb9\u7684\u6570\u76ee \u3002 \\(depth(root)=0\\) \u3002 \u9ad8\u5ea6 \\(height(T)\\) \uff1a\u6811T\u7684\u6240\u6709\u8282\u70b9\u6df1\u5ea6\u7684\u6700\u5927\u503c\u3002\u53ea\u6709\u6839\u7684\u6811\uff1a0\uff1b\u7a7a\u6811\uff1a-1\u3002 \u5ea6 \\(degree\\) \uff1achildren\u7684\u4e2a\u6570\u3002","title":"5. Tree"},{"location":"DSA_Review/#6-bst","text":"","title":"6. BST"},{"location":"DSA_Review/#61-ds","text":"\u5de6-\u4e2d-\u53f3\uff1a\u5c0f-\u4e2d-\u5927\u3002 \u4e2d\u5e8f\u904d\u5386\u4e3a\u5355\u8c03\u4e0d\u4e0b\u964d\u5e8f\u5217\u3002 Property: Catalan Number n\u4e2a\u4e92\u5f02\u8282\u70b9\u968f\u673a\u7ec4\u6210\u7684\u4e8c\u53c9\u6811\uff0c\u8bb0\u5171\u6709 \\(S(n)\\) \u68f5\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u5219\uff1a \\(S(n) = Catalan(n) = \\sum_{k=1}^n S(k-1)S(n-k) = {(2n)! \\over (n+1)!n!}\\) \u3002 \u82e5\u5404\u79cdBST\u7b49\u6982\u7387\u51fa\u73b0\uff0c\u5219\u5e73\u5747\u9ad8\u5ea6 \\(\\Theta(\\sqrt{n})\\) \u3002 \u82e5n\u4e2a\u4e92\u5f02\u8bcd\u6761\u6309\u5404\u79cd\u6392\u5217\u6b21\u5e8f\uff08\u5404\u79cd\u6392\u5217\u7b49\u6982\u7387\uff09\u63d2\u5165\uff0c\u5e73\u5747\u9ad8\u5ea6 \\(\\Theta(logn)\\) \u3002","title":"6.1 DS"},{"location":"DSA_Review/#62-algorithm","text":"","title":"6.2 Algorithm"},{"location":"DSA_Review/#621-insert","text":"\u63d2\u5165\u7684\u8282\u70b9\u5fc5\u4e3a\u53f6\u8282\u70b9\u3002","title":"6.2.1 Insert"},{"location":"DSA_Review/#622-delete","text":"\u5982\u679c\u662f\u53f6\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664\u3002 \u5982\u679c\u4e0d\u662f\u53f6\u8282\u70b9\uff0c\u627e\u5230\u5176\uff08x\uff09\u300c\u76f4\u63a5\u540e\u7ee7\u300d\uff08w\uff09\uff0c\u4ea4\u6362\u4e24\u8005\uff1b\u8ba9w\u7684\u53f3\u5b50\u6811\u4ee3\u66ffw\uff0c\u5b8c\u6210\u5220\u9664\u3002","title":"6.2.2 Delete"},{"location":"DSA_Review/#7-k-d-tree","text":"","title":"7. k-D Tree"},{"location":"DSA_Review/#71-algorithm","text":"","title":"7.1 Algorithm"},{"location":"DSA_Review/#711-query-kdsearchv-r","text":"Search starts at v; query range is R Key idea: Recurse in when there's intersection. Report it when it is enclosed. kdSearch ( v , R ) : if v is leaf : if v in R : report ( v ) if v -> lChild in R : reportSubtree ( v -> lChild ) else if v -> lChild have intersection with R : kdSearch ( v -> lChild , R ) if v -> rChild in R : reportSubtree ( v -> lChild ) else if v -> rChild have intersection with R : kdSearch ( v -> rChild , R ) Complexity: For each edge of R, no more than 2 out of the 4 grandchildren of each node will intersect with it, which means recursing. R has 4 edges, so multiply 4 for the upper bound complexity. Using the Master Thm., \\(Q(n) = 2 + 2Q(n/4), Q(1) = O(1) \\Rightarrow Q(n) = O(\\sqrt{n})\\) Report + Search: \\(O(r + \\sqrt{n})\\) \u603b\u7ed3\uff1a Query: \\(O(r + n^{1-1/d})\\) Construct: \\(O(nlogn)\\)","title":"7.1.1 Query - KdSearch(v, R)"},{"location":"DSA_Review/#8-avl-tree","text":"","title":"8. AVL Tree"},{"location":"DSA_Review/#81-definition","text":"\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u7edd\u5bf9\u503c\u57281\u5185","title":"8.1 Definition"},{"location":"DSA_Review/#82-algorithm","text":"","title":"8.2 Algorithm"},{"location":"DSA_Review/#821-insert","text":"\u4ece\u63d2\u5165\u8282\u70b9\uff08\u53f6\u5b50\uff09\u7684parent\uff08hot\uff09\u5f00\u59cb\u7f51\u4e0a\u8d70\uff0c\u7ef4\u62a4\u9ad8\u5ea6\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u5931\u8861\u8282\u70b9g\uff1b\u901a\u8fc7 tallerChild(tallerChild(g)) \u786e\u5b9ap\uff0cv\uff0c\u7136\u540e\u7528\u4e00\u6b213+4\u91cd\u6784\u91cd\u5e73\u8861\u3002 \u7531\u4e8e \u201c\u9ad8\u5ea6\u590d\u539f\u201d \u6027\u8d28\uff0c\u6574\u4e2ainsert\u6700\u591a1\u6b213+4\u91cd\u6784\uff082\u6b21rotate\uff09\u3002 \\(O(logn)\\) \u3002","title":"8.2.1 Insert"},{"location":"DSA_Review/#822-delete","text":"\u7528BST\u7684\u5220\u9664 \uff0c\u5220\u9664x\uff0c\u8bb0\u5f55hot\u3002 \u4ecehot\u5411\u4e0a\uff0c\u4e00\u65e6\u53d1\u73b0g\u5931\u8861\uff0c\u901a\u8fc7 tallerChild(tallerChild(g)) \u786e\u5b9ap\uff0cv\uff0c\u7136\u540e\u7528\u4e00\u6b213+4\u91cd\u6784\u91cd\u5e73\u8861\u3002 \u5931\u8861\u53ef\u80fd\u4f20\u64ad\uff0c\u9700\u8981\u4e00\u76f4\u5411\u4e0a\uff0c\u6267\u884c\u591a\u6b213+4\u91cd\u6784\u3002 \\(O(logn)\\) \u3002","title":"8.2.2 Delete"},{"location":"DSA_Review/#823-34-reconstruction","text":"\u5404\u79cd\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u90fd\u53ef\u4ee5\u6309\u7167\u201c\u4e2d\u5e8f\u201d\u7edf\u4e00\u5e73\u8861\u3002","title":"8.2.3 3+4 Reconstruction"},{"location":"DSA_Review/#9-splay-tree","text":"","title":"9. Splay Tree"},{"location":"DSA_Review/#91-splay","text":"\u53cc\u5c42\u65cb\u8f6c\u4e4b\u201c\u987a\u5411\u60c5\u51b5\u201d\uff1a \u53cc\u5c42\u65cb\u8f6c\u4e4b\u201c\u53cd\u5411\u60c5\u51b5\u201d\uff1a \u5355\u5c42\u65cb\u8f6c\uff1a\u5f53\u5f85splay\u81f3\u6839\u7684\u8282\u70b9\u7684parent\u4e3aroot\u65f6\uff1a","title":"9.1 Splay"},{"location":"DSA_Review/#92-search","text":"\u4e3a\u4fdd\u8bc1\u6027\u80fd\uff0c\u9700\u5c06\u6700\u540e\u8bbf\u95ee\u7684\u8282\u70b9\u65cb\u8f6c\u81f3root\u3002 search ( value ) : { p = searchIn ( root , value , hot ) root = splay ( p ? p : hot ) return root } \uff08hot\u8bb0\u5f55\u4e86search\u4e2d\u6700\u540e\u5230\u8fbe\u7684\u8282\u70b9\uff09","title":"9.2 Search"},{"location":"DSA_Review/#93-insert","text":"\u8c03\u7528Splay\u7684search\u7b97\u6cd5\uff0c\u5f85\u63d2\u5165\u8282\u70b9\u4e0d\u5728\u6811\u4e2d\uff0c\u67e5\u627e\u5931\u8d25\u3002 \u4f46\u201c\u5f85\u63d2\u5165\u4f4d\u7f6e\u201d\u7684\u7236\u8282\u70b9hot\uff0c\u8bb0\u4e3at\uff0c\u5df2\u7ecf\u88ab\u65cb\u8f6c\u81f3\u6839\u3002 \u6839\u636et\u4e0e\u8981\u63d2\u5165\u7684\u6570\u503c\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5c06t\u53ca\u5176\u5b50\u6811\u4e0ev\u91cd\u7ec4\u4e3a\u65b0\u7684\u6811\u3002\u6700\u540e\u65b0\u63d2\u5165\u7684v\u4f5c\u4e3aroot\u3002 Corner Case: \u5f53 \u8fde\u7eed\u63d2\u5165\u6709\u5e8f\u5e8f\u5217 \u65f6\uff0cSplay\u4f1a\u5448\u73b0\u94fe\u72b6\u3002\u5f53\u7136\uff0c\u4e0d\u4e00\u5b9a\u5b8c\u5168\u6709\u5e8f\uff0c\u5982\uff1a3\uff0c2\uff0c1\uff0c4\uff0c5\uff0c6\uff0c7\uff0c\u2026\u2026\u4e5f\u53ef\u4ee5\u5f62\u6210\u94fe\u72b6\u3002","title":"9.3 Insert"},{"location":"DSA_Review/#94-delete","text":"\u67e5\u627e\uff08search\uff09\u5f85\u5220\u9664\u503cv\uff0cv\u4f1a\u88abSplay\u81f3root\u3002 \u5220\u9664v\uff0c\u5269\u4e0b\u5b83\u7684\u4e24\u4e2a\u5b50\u6811 \\(T_L\\) \u3001 \\(T_R\\) \u3002 \u5728 \\(T_R\\) \u4e2d\u67e5\u627ev\uff1b\u8fd9\u4e00\u67e5\u627e\u5fc5\u5b9a\u5931\u8d25\uff0c\u4f46\u4f1a\u5c06 \\(T_R\\) \u4e2d\u7684\u6700\u5c0f\u503cm\uff0c\u5373v\u7684\u76f4\u63a5\u540e\u7ee7\uff0c\u65cb\u8f6c\u81f3\u5b50\u6811 \\(T_R\\) \u7684\u6839\u3002 \u7531\u4e8em\u662fv\u7684\u76f4\u63a5\u540e\u7ee7\uff0c\u56e0\u6b64 \\(T_R\\) \u4e2dm\u7684\u5de6\u5b50\u6811\u5fc5\u4e3a\u7a7a\u3002\u76f4\u63a5\u5c06 \\(T_L\\) \u4f5c\u4e3am\u7684\u5de6\u5b50\u6811\u3002\u5b8c\u6210\u3002","title":"9.4 Delete"},{"location":"DSA_Review/#10-red-black-tree","text":"","title":"10. Red Black Tree"},{"location":"DSA_Review/#101-definition","text":"\u4e3a\u6240\u6709\u6709\u9700\u8981\u7684\u8282\u70b9\u5f15\u5165 n+1 \u4e2a\u5916\u90e8\u8282\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u975e\u7a7a\u3002 \u6811\u6839root\uff1a\u9ed1\u8272 \u5916\u90e8\u8282\u70b9\uff1a\u9ed1\u8272 \u5176\u4f59\u8282\u70b9\uff1a\u82e5\u4e3a\u7ea2\uff0c\u5219\u53ea\u80fd\u6709\u9ed1\u5b69\u5b50\uff08\u7ea2\u4e4b\u5b50\uff0c\u4e4b\u7236\u5fc5\u4e3a\u9ed1\uff09 \u5916\u90e8\u8282\u70b9\u5411\u4e0a\u5230\u6839\uff1a\u9014\u4e2d\u9ed1\u8282\u70b9\u6570\u76ee\u76f8\u7b49\uff08\u6240\u6709\u5916\u90e8\u8282\u70b9\u7684 \u9ed1\u6df1\u5ea6 \u76f8\u7b49\uff09","title":"10.1 Definition"},{"location":"DSA_Review/#102-ds","text":"Lifting : \u5c06\u6bcf\u4e2a\u7ea2\u8282\u70b9\u63d0\u5347\uff0c\u4f7f\u4e4b\u4e0e\u5176parent\uff08\u5fc5\u4e3a\u9ed1\uff09\u201c\u7b49\u9ad8\u201d\uff1b\u6216\u8bf4\uff0c\u5c06\u9ed1\u8282\u70b9\u4e0e\u5176\u7ea2\u5b69\u5b50\u89c6\u4f5c\u4e00\u4e2a\u5927\u7684\u8282\u70b9\u3002\u5982\u6b64\uff0c\u5c06\u7ea2\u9ed1\u6811\u53d8\u6362\u4e3a\u4e86 4\u9636B\u6811\uff08(2, 4)-Tree\uff09 \u3002 \u53ef\u4ee5\u9a8c\u8bc1\uff0cLifting\u4e4b\u540e\u7684B\u6811\u4e2d\uff0c\u540c\u4e00\u8282\u70b9\u4e0d\u4f1a\u5305\u542b\u7d27\u90bb\u7684\u7ea2\u8272key\u3002","title":"10.2 DS"},{"location":"DSA_Review/#103-algorithm","text":"","title":"10.3 Algorithm"},{"location":"DSA_Review/#1031-insert","text":"\u8c03\u7528BST\u7684\u6807\u51c6search\uff1b\u5f85\u63d2\u5165key\u4e0d\u5b58\u5728\uff1bsearch\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e86hot\u3002 \u521b\u5efa \u7ea2\u8282\u70b9 x\uff0c\u4ee5hot\u4e3aparent\uff0c\u9ed1\u9ad8\u5ea6-1\u3002 \u82e5x\u7684parent p\u4e3a\u7ea2\uff0c\u5219\u53cc\u7ea2\u4fee\u6b63\u3002","title":"10.3.1 Insert"},{"location":"DSA_Review/#1032-double-red-issue","text":"\u63d2\u5165x\u540e\uff0c\u4f9d\u6b21\u786e\u8ba4\u5176\u7956\u5148p\uff0cg\u3002\u82e5p\u4e3a\u7ea2\uff0c\u5219\u9700\u53cc\u7ea2\u4fee\u6b63\u3002 \u603b\u56fe\uff1a \u8003\u67e5u\uff1a [1] u\u4e3ablack\uff1a \uff081\uff09recolor\uff08\u91cd\u65b0\u67d3\u8272\uff09\uff1a\u65e0\u8bba\u987a\u5411\uff08a\uff09\u8fd8\u662f\u53cd\u5411\uff08b\uff09\uff0c\u6309\u4e2d\u5e8f\u904d\u5386\uff0c\u8ba9x\uff0cp\uff0cg\u4e2d\uff0c\u5728 \u4e2d\u95f4\u7684\u4e3ablack\uff0c\u4e24\u4fa7\u7684\u4e3ared \uff1b \uff082\uff09\u7528 \u201c3+4\u91cd\u6784\u201d \u8c03\u6574\u5176\u62d3\u6251\u7ed3\u6784\u3002 \u8c03\u6574\u5b8c\u5373\u7ed3\u675f\uff0c\u65e0\u7f3a\u9677\u4f20\u9012\u3002 [2] u\u4e3ared\uff1a \uff08\u501f\u52a9B\u6811\u7684\u7406\u89e3\uff0c\u5373\u8282\u70b9\u53d1\u751f\u4e86\u4e0a\u6ea2\u3002\uff09 recolor\uff1a\u65e0\u8bba\u662f\u987a\u5411\u8fd8\u662f\u53cd\u5411\uff0c\u5747\u53ea\u9700\uff1a\u5c06p\uff0cu\u7531\u7ea2\u8f6c\u9ed1\uff08p\u3001u\u9ed1\u9ad8\u5ea6++\uff09\uff0c\u5c06g\u7531\u9ed1\u8f6c\u7ea2\u3002 \uff08\u62d3\u6251\u7ed3\u6784\u4e0d\u53d8\uff09 \u53cc\u7ea2 \u4f20\u9012 \uff1a\u7531\u4e8eg\u7684\u53d8\u7ea2\uff0c\u53ef\u80fd\u5bfc\u81f4\u53cc\u7ea2\u5411\u4e0a\u4f20\u9012\uff0c\u56e0\u6b64\u9700\u8981\u9012\u5f52\u5730\u4fee\u590d\u3002\u6709\u53ef\u80fd\u4e0a\u6eaf\u81f3root\uff0c\u4f46\u7531\u4e8e\u89c4\u5b9aroot\u5fc5\u4e3a\u9ed1\uff0c\u6545\u6b64\u5904\u4f1a\u53d1\u751f \u5168\u6811\u9ed1\u9ad8\u5ea6\u589e\u52a0 \u3002 \u603b\u7ed3\uff1a\u65f6\u95f4 \\(O(logn)\\) \u3002\u62d3\u6251\u7ed3\u6784\u6539\u53d8 \\(O(1)\\) \u3002","title":"10.3.2 Double Red Issue"},{"location":"DSA_Review/#1033-delete","text":"\u8c03\u7528BST\u5e38\u89c4remove\u7b97\u6cd5\u3002\u5b9e\u9645\u5220\u9664\u8005\u4e3ax\u3002x\u53ef\u80fd\u6709\u53f3\u5b69\u5b50\uff0c\u4f1a\u201c\u63a5\u66ff\u201dx\u3002 \u82e5x\u548cr\u540c\u65f6\u4e3a\u9ed1\uff08c\uff09\uff0c\u5219\u9700\u53cc\u9ed1\u4fee\u6b63\u3002\u82e5\u4e0d\u662f\uff0c\u5206\u60c5\u51b5\uff1a \uff08a\uff09x\u4e3a\u7ea2\uff0cr\u4e3a\u9ed1\uff0c\u65e0\u9700\u8c03\u6574\u3002 \uff08b\uff09x\u4e3a\u9ed1\uff0cr\u4e3a\u7ea2\uff0cr\u63a5\u66ffx\u540e\u53d8\u9ed1\u3002","title":"10.3.3 Delete"},{"location":"DSA_Review/#1034-double-black-issue","text":"\u603b\u56fe\uff1a \u82e5x\u548cr\u540c\u65f6\u4e3a\u9ed1\uff0c\u8003\u67e5r\u7684\u5144\u5f1fs\uff08\u5373p\u7684\u53e6\u4e00\u5b69\u5b50\uff09\u7684\u989c\u8272\u53cas\u7684\u5b69\u5b50\u7684\u989c\u8272\uff1a [1] \u82e5s\u4e3ablack\uff1a \uff081\uff09s\u81f3\u5c11\u6709\u4e00\u5b69\u5b50c\u4e3ared\uff1a \uff08\u5bf9\u5e94B\u6811\u4e0b\u6ea2\u3002\uff09 \u91c7\u7528\u201c3+4\u91cd\u6784\u201d\u8c03\u6574\u62d3\u6251\u7ed3\u6784\uff0cp\u3001s\u3001c\u4e09\u8005\u4e2d\u5c45\u4e2d\u8005\u7ee7\u627fp\u539f\u5148\u7684\u989c\u8272\uff0c\u5176\u4f59\u67d3\u9ed1\u3002 \u8c03\u6574\u7acb\u5373\u7ed3\u675f\uff0c\u65e0\u4f20\u9012\uff01 \uff082\uff09s\u4e24\u5b69\u5b50\u5747\u4e3ablack\uff1a \uff08i\uff09p\u4e3ared\uff1a \uff08\u5bf9\u5e94B\u6811\u4e0b\u6ea2\u3002\uff09 \u4ee4s\u4e3ared\uff0cp\u4e3ablack\uff08a\u2192b\uff09\u3002\u65e0\u9700\u8c03\u6574\u62d3\u6251\u7ed3\u6784\u3002 \u8c03\u6574\u7acb\u5373\u7ed3\u675f\uff0c\u65e0\u4f20\u9012\uff01 \uff08ii\uff09p\u4e3ablack \uff08\u5bf9\u5e94B\u6811\uff0c\u4e0b\u6ea2\u5f15\u53d1\u4e86\u4e0a\u5c42\u4e0b\u6ea2\uff0c\u9700\u7ee7\u7eed\u9012\u5f52\u8c03\u6574\u3002\uff09 \u4ee4s\u4e3ared\u3002 \u7136\u540e\u4ee5p\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\u9ed1\u9ad8\u5ea6--\u3002\u82e5p\u6709parent g\uff0c\u5219g\u7684\u9ed1\u9ad8\u5ea6\u5931\u8861\u3002\u56e0\u6b64\u9700\u9012\u5f52\u5730 \u4e8ep\u5904 \u8fdb\u884c\u53cc\u9ed1\u4fee\u6b63\u3002 \u5411\u4e0a\u9012\u5f52\u3002\u4f46\u4ece\u7ea2\u9ed1\u6811\u6765\u770b\u62d3\u6251\u7ed3\u6784\u4e0d\u53d8\u3002 [2] \u82e5s\u4e3ared\uff1a \uff08\u5219s\u2018\u5fc5\u7136\u662f\u9ed1\u7684\uff09 \u6b64\u65f6\uff0c\u89c2\u5bdf\u4ee5p\u4e3a\u6839\u7684\u5b50\u6811\uff1as\u2018\u5fc5\u4e3a\u9ed1\uff0c\u5373\u60c5\u51b51\uff1b\u800cp\u4e3ared\uff0c\u56e0\u6b64\u4e0d\u4f1a\u662f\u300c\u60c5\u51b5[1]-\uff082\uff09\uff08ii\uff09\u300d\u3002\u4e8ex/r\u5904\u7ee7\u7eed\u9012\u5f52\u5730\u53cc\u9ed1\u4fee\u6b63\u5373\u53ef\u3002 \u9012\u5f52\u4e00\u5c42\u4fbf\u7ed3\u675f\uff0c\u4e0d\u4f1a\u4f20\u9012\uff01 \u5220\u9664\u603b\u7ed3\uff1a \u603b\u7ed3\uff1a\u5bf9\u4efb\u4f55\u64cd\u4f5c\uff0c\u62d3\u6251\u7ed3\u6784\u7684\u6539\u53d8 \\(O(1)\\) \u3002","title":"10.3.4 Double Black Issue"},{"location":"DSA_Review/#11-b-tree","text":"","title":"11. B Tree"},{"location":"DSA_Review/#111-definition","text":"m\u9636B-Tree\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709 \\(ceil(m/2) - 1 \\le n \\le m-1\\) \u4e2akey\uff0c \\(ceil(m/2) \\le n+1 \\le m\\) \u4e2a\u5206\u652f\u3002\uff08 \\(m \\ge 3\\) \uff09 \u9700\u6ee1\u8db3 \\(m\\ge n+1 \\ge ceil(m/2)\\) \u3002\uff08 \u9664\u4e86\u6839\u8282\u70b9 \u4e0d\u80fd\u5c11\u4e8e\u4e00\u534a\uff09 \u4e5f\u79f0 (ceil(m/2), m)-Tree\u3002","title":"11.1 Definition"},{"location":"DSA_Review/#112-ds","text":"\u6bcf\u4e2a\u8282\u70b9\u4e24\u4e2aVector\uff0c\u5206\u522b\u5b58\u50a8key\uff0c\u6307\u9488\u3002 \u67d0node\u4e2d\uff0c\u4e24key\u4e4b\u95f4\u7684\u4e0b\u7ea7\u6307\u9488\u6307\u5411\u7684node\u4e2d\u7684key\u4ecb\u4e8e\u4e24key\u4e4b\u95f4\u3002","title":"11.2 DS"},{"location":"DSA_Review/#1121-limited-maximum-height","text":"\\(\\Omega(log_m N) \\le h \\le O(log_m N)\\) \u3002","title":"11.2.1 Limited maximum height"},{"location":"DSA_Review/#113-algorithm","text":"","title":"11.3 Algorithm"},{"location":"DSA_Review/#1131-find","text":"\u6bcf\u4e00\u5c42\u5185\u90e8\u987a\u5e8f\u67e5\u627e\u3002\u4f46\u56e0\u4e3a\u987a\u5e8f\u5c40\u90e8\u8bbf\u95ee\u5f88\u5feb\uff0c\u65f6\u95f4\u53ef\u4ee5\u5ffd\u7565\u3002 \u5f53\u627e\u4e0d\u5230\u65f6\uff0c\u8f6c\u5165\u4e0b\u4e00\u5c42\u67e5\u627e\u3002 \\(O(logn)\\) \u3002n\u4e3akey\u7684\u4e2a\u6570\u3002","title":"11.3.1 Find"},{"location":"DSA_Review/#1132-insert","text":"\u5148\u63d2\u5165v\uff1a \u5bfb\u627ev\uff0c\u786e\u8ba4\u5176\u4e0d\u5b58\u5728\uff0c\u5bfb\u627e\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e86hot\uff08\u67e5\u627e\u5931\u8d25\u7684\u6700\u540e\u4e00\u4e2anode\u7684parent\uff09\u3002 \u5728hot\u91cc\u63d2\u5165v\u3002 \u89c6\u60c5\u51b5\u505a \u5206\u88c2 \u3002","title":"11.3.2 Insert"},{"location":"DSA_Review/#1133-split","text":"\u4e0a\u6ea2\u8282\u70b9\u6070\u597d\u6709m\u4e2akey\u3002 \u627e\u5230\u4e0a\u6ea2\u8282\u70b9\u4e2d\u5c45\u4e2d\u7684key\uff0c\u4ee5\u4e4b\u4e3a\u754c\u5c06\u8282\u70b9\u4e00\u5206\u4e3a\u4e8c\u3002 \u5c06\u5c45\u4e2d\u7684key\u63d0\u5347\u81f3\u539f\u8282\u70b9\u7684parent\u4e2d\u3002 \u4e0a\u6ea2\u4f20\u9012\uff1a\u6700\u591a\u4f20\u5230\u6839\u3002\u5982\u679c\u6839\u6ee1\u4e86\uff0c\u5c31\u4e0a\u6ea2\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u65b0\u7684\u6839\u3002 \u663e\u7136\u4e0a\u6ea2\u4f20\u9012\u6b21\u6570\u662f\u6709\u754c\u7684\u3002 \\(O(h) = O(log_mN)\\) \u3002","title":"11.3.3 \u4e0a\u6ea2\u4e0esplit"},{"location":"DSA_Review/#1134","text":"\u627e\u76f4\u63a5\u540e\u7ee7\u7684\u6570\uff1a\u5bf9\u4e8e\u975e\u53f6\u8282\u70b9\u9700\u5148\u627e\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\uff1a\u5148\u5f80\u53f3\u4e0b\u4e00\u6b21\uff0c\u7136\u540e\u4e00\u8def\u5411\u5de6\uff0c\u76f4\u5230\u53f6\u8282\u70b9\u3002 \u4ea4\u6362 \u5220\u9664\u4ea4\u6362\u540e\u7684\uff0c\u9700\u8981\u5220\u9664\u7684\uff0c\u5df2\u7ecf\u5728\u53f6\u8282\u70b9\u4e2d\u7684\u6570 \u5220\u9664\u540e\u9700\u8981\u5904\u7406\u4e0b\u6ea2\u3002","title":"11.3.4 \u5220\u9664"},{"location":"DSA_Review/#1135","text":"\u4e0b\u6ea2\u8282\u70b9\u6070\u597d\u6709 \\(O(ceil(m/2) - 2)\\) \u4e2akey\u3002 \u5206\u60c5\u51b5\uff1a \uff081\uff09\uff08Rotate \\(O(1)\\) \uff09\u5de6\u5144\u5f1f\uff08\u540cparent\uff09\u5b58\u5728\uff0c\u4e14\u5176key\u4e2a\u6570-1\u4ecd\u6ee1\u8db3\u6761\u4ef6\uff1a \uff082\uff09\uff08Rotate \\(O(1)\\) \uff09\u53f3\u5144\u5f1f\uff08\u540cparent\uff09\u5b58\u5728\uff0c\u4e14\u5176key\u4e2a\u6570-1\u4ecd\u6ee1\u8db3\u6761\u4ef6\uff1a \uff083\uff09\uff08Combine \\(O(log_mN)\\) \uff09L\u6216R\u4e0d\u5b58\u5728\uff08\u4e0d\u53ef\u80fd\u540c\u65f6\u4e0d\u5b58\u5728\uff0c\u56e0\u4e3a\u4e00\u4e2anode\u81f3\u5c11\u4e24\u4e2a\u5206\u652f\uff09\uff0c\u6216key\u7684\u4e2a\u6570\u5df2\u8fbe\u4e0b\u9650\u4e0d\u80fd\u518d\u7ed9\u51fa\uff1a \u5408\u5e76\u51fa\u6765\u7684\u8282\u70b9\u4e00\u5b9a\u6ee1\u8db3key\u4e2a\u6570\u7684\u8303\u56f4\u6761\u4ef6\u3002 \u7236\u8282\u70b9P\u5c11\u4e86\u4e00\u4e2akey\uff0c\u53ef\u80fd\u4e0b\u6ea2\u3002\u56e0\u6b64\u4e0b\u6ea2\u4f1a\u4f20\u9012\u3002","title":"11.3.5 \u4e0b\u6ea2"},{"location":"DSA_Review/#12-heap-min-priority-queue","text":"\u4e0a\u5927\u4e0b\u5c0f\uff0c\u6216\u4e0a\u5c0f\u4e0b\u5927\u3002","title":"12. Heap (min) (Priority Queue)"},{"location":"DSA_Review/#121-shift-up","text":"\\(O(logn)\\) \u3002 shift_up(i): // shift up the node with index i { while (i > 0): // i is not root { if (data[i] < data[ parent_of[i] ]): break // satisfied else: // if the parent has lower priority than data[i] swap(data[i], data[ parent_of[i] ]) // shift data[i] to the upper layer i = parent_of[i] // examine the upper layer } return i }","title":"12.1 Shift Up"},{"location":"DSA_Review/#122-shift-down","text":"\\(O(logn)\\) \u3002 shift_down(i): // shift down the node with index i { while (i != proper_parent_at(i)): { swap(i, proper_parent) i = proper_parent } return i } proper_parent_at(i): // gives the maximum value among data[i], data[ left_child[i]] or data[ right_child[i] ] // gives parent i first if i == left_child[i] or i == right_child[i] Expected - \\(O(1)\\) \u3002","title":"12.2 Shift Down"},{"location":"DSA_Review/#123-pop","text":"Delete the value at the top and replace it with the last value. Shift the current value at the top down.","title":"12.3 Pop"},{"location":"DSA_Review/#124-push","text":"Append the value to the last of the array. Shift the last value up.","title":"12.4 Push"},{"location":"DSA_Review/#125-floyd-heapify","text":"\\(O(n)\\) \u3002","title":"12.5 Floyd Heapify"},{"location":"DSA_Review/#1251-combine","text":"Given two heaps and a node p. How to combine them to a new heap? Take the two heaps as childrens of p. Then shift p down .","title":"12.5.1 Combine"},{"location":"DSA_Review/#1252-heapify","text":"For complete binary heap, shift the internel nodes down, which generates \"sub-heap\" start at the bottom. Finally a heap is constructed. heapify(size n): { for (i = n / 2 - 1; i >= 0; i--) shift_down(i) }","title":"12.5.2 Heapify"},{"location":"DSA_Review/#13-d-heap","text":"\u591a\u53c9\u5806\u7684\u590d\u6742\u5ea6\uff1a\u201c\u4e0a\u5c71\u5bb9\u6613\u4e0b\u5c71\u96be\u201d\u3002","title":"13. d-Heap"},{"location":"DSA_Review/#14-leftlist-heap","text":"","title":"14. Leftlist Heap"},{"location":"DSA_Review/#141-definition","text":"Null path length: \u82e5x\u4e3a\u5916\u90e8\u8282\u70b9\uff0c\u5219 \\(npl(x) = 0\\) \uff1b\u5426\u5219\uff0c \\(npl(x) = 1 + min(~npl(~lc(x)~), npl(~rc(x)~)~)\\) \\(npl\\) \u7684\u610f\u4e49\uff1a x\u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \u3002 \u5de6\u5f0f\u5806 \uff1a \\(\\forall x, npl(~lc(x)~) \\ge npl(~rc(x)~)\\) \u3002 \u5373\uff0c\u5bf9npl\u503c\uff0c\u4efb\u610f\u5185\u90e8\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e0d\u5c0f\u4e8e\u53f3\u5b69\u5b50\u3002 \uff08\u7136\u800c\u5982\u56fe\uff0c\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\u5e76\u4e0d\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u53f3\u5b50\u6811\u3002\uff09 \u4e8e\u662f\u6709\u6027\u8d28\uff1a \\(npl(x) = 1 + npl(rc(x))\\) \uff0c\u4e5f\u7b49\u4e8e \u6700\u53f3\u4fa7\u901a\u8def\u7684\u957f\u5ea6d \u3002 \\(d = O(logn)\\) \u3002","title":"14.1 Definition"},{"location":"DSA_Review/#142-algorithm","text":"merge(a,b)\uff1a \u901a\u8fc7swap\u786e\u4fdda>b\u3002 \u5c06 \\(a_R\\) \u4e0e \\(b\\) \u5408\u5e76\u6210\u65b0\u7684 \\(a_{R'}\\) \uff0c\u82e5\u65b0\u7684 \\(a_{R'}\\) \u4e0e \\(a_{L}\\) \u4e0d\u6ee1\u8db3npl\u5173\u7cfb\uff0c\u5219\u4ea4\u6362\u4e4b\u3002 \u7ef4\u62a4a\u7684npl\u3002","title":"14.2 Algorithm"},{"location":"DSA_Review/#15-hash-function","text":"\u8bc4\u4ef7\u6807\u51c6\u4e0e\u8bbe\u8ba1\u539f\u5219\uff1a \u786e\u5b9a\uff1a\u540c\u4e00\u5173\u952e\u7801\u603b\u662f\u88ab\u6620\u5c04\u5230\u540c\u4e00\u5730\u5740 \u5feb\u901f\uff1a\u8ba1\u7b97 \\(O(1)\\) \u6ee1\u5c04\uff1a\u5c3d\u53ef\u80fd\u5145\u5206\u5730\u8986\u76d6\u6574\u4e2a\u6563\u5217\u7a7a\u95f4 \u5747\u5300\uff1a\u6620\u5c04\u5230\u5404\u4f4d\u7f6e\u7684\u6982\u7387\u5c3d\u91cf\u63a5\u8fd1\uff0c\u907f\u514d\u805a\u96c6","title":"15. Hash Function"},{"location":"DSA_Review/#16-closed-hash-table","text":"Suggested Load Factor: \\(\\lambda < 0.5\\) . Open Addressing Strategies:","title":"16. Closed Hash Table"},{"location":"DSA_Review/#161-linear-probing","text":"ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + 1) % M ]","title":"16.1 Linear Probing"},{"location":"DSA_Review/#1611-search","text":"\u4f9d\u6b21\u5411\u540e\u627e\uff0c\u5bf9\u5e94\u4e00\u4e2a\u67e5\u627e\u94fe\u3002 \u5f53\u9047\u5230\u7a7a\u6876\uff08\u4e14\u540e\u8ff0lazy tag\u4e3afalse\uff09\u65f6\uff0c\u67e5\u627e\u5931\u8d25\u3002","title":"16.1.1 Search"},{"location":"DSA_Review/#1612-delete-with-lazy-tag","text":"\u5220\u9664\u65f6\uff0c\u5982\u679c\u4ec5\u4ec5\u5c06\u6876\u6e05\u7a7a\uff0c\u5219\u4f1a\u9020\u6210\u67e5\u627e\u94fe\u65ad\u88c2\u3002\u4e3a\u6b64\u7ed9\u6bcf\u4e2a\u6876\u5f15\u5165lazy tag\uff0c\u8bb0\u5f55\u8fd9\u91cc\u66fe\u7ecf\u662f\u5426\u6709\u8fc7\u5143\u7d20\u3002","title":"16.1.2 Delete with lazy tag"},{"location":"DSA_Review/#1613-rehasing","text":"When the load factor is relatively large, we can rebuild the hashtable. Double the capacity of hashtable. Create new lay tags. For every item in the old table, insert it into the new hashtable.","title":"16.1.3 Rehasing"},{"location":"DSA_Review/#162-undirectional-quadratic-probing","text":"ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + j) % M ] ( \\(j = 0, 1, 2, ...\\) , which means the j-th trial) \u4f18\u52bf\uff1a\u8bd5\u63a2\u4f4d\u7f6e\u7684\u300c\u95f4\u8ddd\u300d\u4ee5\u7ebf\u6027\u901f\u5ea6\u589e\u957f\uff1b\u4e00\u65e6\u53d1\u751f\u51b2\u7a81\uff0c\u53ef\u4ee5\u5c3d\u5feb\u8df3\u79bb\u805a\u96c6\u533a\u6bb5\u3002","title":"16.2 Undirectional Quadratic Probing"},{"location":"DSA_Review/#1621-avoid-infinite-probing","text":"\u4e00\u79cd\u65e0\u9650\u5faa\u73af\u65e0\u6cd5\u627e\u5230\u7a7a\u6876\u7684\u60c5\u51b5\uff08hashtable M=11, a prime number; load factor = 6/11 > 0.5\uff09\uff1a Thm. M is a prime and the load factor \\(\\lambda \\le 0.5 ~ \\Rightarrow\\) Can find an available bucket. Reason: (M is not a prime \\(\\Rightarrow\\) The number of possible values of \\(n^2 ~ \\% ~ M\\) <= \\(ceil(M/2)\\) .) M is a prime \\(\\Rightarrow\\) Number of possible values of \\(n^2 ~ \\% ~ M\\) == \\(ceil(M/2)\\) , and they are exactly the first \\(ceil(M/2)\\) values.","title":"16.2.1 Avoid infinite Probing"},{"location":"DSA_Review/#163-bidirectional-quadratic-probing","text":"ht[ hash(key) % M ] is occupied \u2192 try ht[ (hash(key) + j * (-1)^(j-1)) % M ] ( \\(j = 0, 1, 2, ...\\) , which means the j-th trial) Thm. \u8868\u957f\u53d6\u5f62\u5982 \\(M = 4k+3\\) \u7684\u7d20\u6570\uff0c\u5219\u5fc5\u7136\u53ef\u4ee5\u4fdd\u8bc1\u67e5\u627e\u94fe\u7684\u524dM\u9879\u4e92\u5f02\uff0c\u5373\u6b63\u5411\u4e0e\u53cd\u5411\u7684\u67e5\u627e\u94fe\u65e0\u516c\u5171\u7684\u6876\u3002","title":"16.3 Bidirectional Quadratic Probing"},{"location":"DSA_Review/#17-skip-list","text":"","title":"17. Skip List"},{"location":"DSA_Review/#171-ds","text":"\u5bf9\u6bcf\u4e2a\u6570\uff0c\u5b83 \u7ee7\u7eed\u5728\u4e0b\u4e00\u5c42\u5b58\u5728\u7684\u6982\u7387 \\(p = 0.5\\) \u3002\u4e8e\u662f\u5404\u7eb5\u5411\u5854\u7684\u9ad8\u5ea6\u670d\u4ece\u51e0\u4f55\u5206\u5e03 \\(P(h = k) = p^{k-1}(1-p)\\) \u3002\u56e0\u6b64 \u671f\u671b\u9ad8\u5ea6 \u4e0d\u8fc7 \\(E(h) = {1 \\over 1-p} = 2\\) \u3002\u7531\u6b64\u5bfc\u51faSkip List\u7684 \u671f\u671b\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a \\(expected-O(n)\\) \u3002 \u5de6\u53f3\u4e3a\u54e8\u5175\u8282\u70b9\uff0c\u65b9\u4fbf\u5b9e\u73b0\u3002 \u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u4e86\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u6307\u9488\u3002 \u5bf9\u5185\u90e8\uff0c\u540c\u5c42\u8282\u70b9\u5173\u952e\u7801\u6709\u5e8f\uff1b\u5bf9\u5916\u90e8\uff0c\u65e0\u9700\u6709\u5e8f\uff0c\u53ea\u9700\u5224\u7b49\u3002","title":"17.1 DS"},{"location":"DSA_Review/#172-algorithm","text":"","title":"17.2 Algorithm"},{"location":"DSA_Review/#1721-search","text":"\u4ece\u9876\u5c42\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u3002 \u5411\u53f3\u4e0b\u65b9\u5411\u524d\u8fdb\uff1a\u5728\u6bcf\u4e00\u5c42\u5411\u53f3\u67e5\u627e\uff1b\u82e5\u9047\u5230\u76f8\u7b49\u7684key\u5219\u6210\u529f\uff1b\u82e5\u9047\u5230key\u503c\u5927\u4e8e\u67e5\u627ekey\u7684\u8282\u70b9\uff0c\u6216\u78b0\u5230\u54e8\u5175\uff0c\u5219\u8f6c\u5165\u4e0b\u4e00\u5c42\u3002\u82e5\u7a7f\u5230\u4e86-1\u5c42\uff0c\u5219\u5931\u8d25\u3002 \u8fd4\u56de\u503c\u603b\u4e3a\u4e0d\u5927\u4e8e\u67e5\u627e\u503c\u7684\u6700\u5927\u8005\u3002 \u590d\u6742\u5ea6\uff1a \\(expected-O(logn)\\) \uff1a 1\uff09\u7eb5\u5411\u8df3\u8f6c\uff1a \u8003\u67e5\u67d0\u4e00\u5ea7\u5854\u7684\u9ad8\u5ea6\uff1a \\(P(h \\ge k) = p^k\\) \u3002 \u8003\u8651\u7b2ck\u5c42List \\(S_k\\) \uff0c\u5b83\u975e\u7a7a\uff0c\u5373n\u4e2a\u53ef\u80fd\u8282\u70b9\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u5b58\u5728\u7684\u6982\u7387 \\(P(|S_k| > 0) \\le n \\cdot p^k\\) \u3002\uff08\u67d0key\u503c\u5728\u7b2ck\u5c42\u5b58\u5728\u7684\u6982\u7387\u4e3a \\(p^k\\) \u3002\uff09 \u5f97\u51fa\uff1a\u5854\u9ad8\u5ea6\u63a7\u5236\u5728 \\(O(logn)\\) \u7684\u6982\u7387\u6781\u5927\uff0c\u63a5\u8fd1\u4e8e1\u3002 \u56e0\u6b64\uff0c\u7eb5\u5411\u8df3\u8f6c\u6b21\u6570 \\(expected-O(logn)\\) \u3002 2\uff09~~\u6a2a\u5411\u8df3\u8f6c~~\u603b\u4f53\uff1a \uff08\u6559\u6750\u4e0a\u5148\u5206\u6790\u7eb5\u5411\u8df3\u8f6c\uff0c\u518d\u5206\u6790\u6a2a\u5411\u8df3\u8f6c\u3002\u4e2a\u4eba\u8ba4\u4e3a\u6a2a\u5411\u90e8\u5206\u7684\u5206\u6790\u4e0d\u591f\u597d\u3002\u4e0b\u9762\u6309\u7167\u539f\u59cb\u8bba\u6587\u7684\u601d\u8def\u7406\u89e3\u3002\u539f\u59cb\u8bba\u6587\u603b\u4f53\u8ba1\u7b97\u5305\u62ec\u6a2a\u5411\u3001\u7eb5\u5411\u5728\u5185\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u3002\uff09 \u5bf9\u67d0\u4e00\u641c\u7d22\u8def\u5f84\uff0c\u8fdb\u884c \u53cd\u5411 \u8003\u5bdf\uff0c\u5373\u4ece\u76ee\u6807\u8282\u70b9\u5411\u5de6\u4e0a\u524d\u8fdb\u8fd4\u56de\u8d77\u59cb\u8282\u70b9\u3002\u8bb0\u4e00\u4e2a\u9700\u8981\u5411\u4e0a\u722ck\u5c42\u7684\u53cd\u5411\u641c\u7d22\u8def\u5f84\u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6570\u4e3a \\(C(k)\\) \u3002 \u8bbe\u5f53\u524d\u5728\u67d0\u8282\u70b9x\uff0c\u8fd8\u9700\u5411\u4e0a\u722ck\u5c42\u3002\u6709\u4e24\u79cd\u53ef\u80fd\uff1a i\uff09x\u662f\u5854\u9876\uff0c\u6982\u7387\u4e3a \\(1-p\\) \u3002\u6b64\u65f6\u53cd\u5411\u8d70\u641c\u7d22\u8def\u5f84\uff0c\u5fc5\u7136\u662f\u5411\u5de6\u79fb\u52a8\u4e00\u6b21\uff1b\u79fb\u52a8\u540e\u8fd8\u9700\u8981\u5411\u4e0a\u722ck\u5c42\u3002 ii\uff09x\u4e0d\u662f\u5854\u9876\uff0c\u6982\u7387\u4e3ap\u3002\u6b64\u65f6\u53cd\u5411\u8d70\u641c\u7d22\u8def\u5f84\uff0c\u5fc5\u7136\u662f\u5411\u4e0a\u722c\u4e00\u5c42\uff1b\u722c\u5b8c\u8fd8\u9700\u8981\u5411\u4e0a\u722ck-1\u5c42\u3002 \u7efc\u4e0a\u6709\uff1a \\(C(0)=0\\) \\(C(k)=(1-p)(1+C(k))+p(1+C(k-1))\\) \u4e8e\u662f \\(C(k)=1/p+C(k-1) ~ \\Rightarrow ~ C(k)=k/p\\) \u3002 \u5bf9\u4e8e\u4efb\u610f\u53cd\u5411\u641c\u7d22\u8def\u5f84\uff0c\u53ef\u4ee5\u62c6\u4e3a\u4e24\u90e8\u5206\uff1a\u4ece0\u5c42\u722c\u5230 \\(O(logn)\\) \u5c42\uff08\u5854\u9ad8\u5ea6\u63a7\u5236\u5728 \\(O(logn)\\) \u7684\u6982\u7387\u6781\u5927\uff09\u3001\u722c\u5b8c\u5269\u4e0b\u7684\u5c42\u3002\u7c97\u7565\u8003\u8651\u524d\u8005\uff0c\u65f6\u95f4\u4e3a \\(C(O(logn))=O(logn)/p\\) \u3002","title":"17.2.1 Search"},{"location":"DSA_Review/#18-kmp","text":"\u603b\uff1a \\(O(n+m)\\) \u3002 \uff08\u4e0a\u9762\u4e3a\u4e00\u957f\u5b57\u7b26\u4e32\uff1b\u4e0b\u9762\u4e3a\u9700\u8981\u5728\u4e0a\u9762\u7684\u4e32\u4e2d\u67e5\u627e\u7684\u6a21\u5f0f\u4e32\u3002\u9ec4\u8272\u9634\u5f71\u533a\u57df\u8868\u793a\u76f8\u540c\u7684\u5b50\u4e32\u3002\uff09 \u5f53\u5931\u8d25\u65f6\uff0c j \uff08\u5411\u524d\uff09\u8df3\u8f6c\u81f3 next[j] \u7ee7\u7eed\u5c1d\u8bd5\u5339\u914d\u3002\u800c i \u59cb\u7ec8\u5411\u540e\uff0c\u4fdd\u8bc1\u4e86 \u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u82e5\u5339\u914d\u6210\u529f\uff0c\u4f1a\u6709 j == m \u8df3\u51fa\u5faa\u73af\u3002\u8fd4\u56de\u503c i - j == i - m \u5c31\u662f\u5339\u914d\u4e0a\u7684\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u626b\u63cf\u4e00\u8d9f \\(O(n)\\) \u3002","title":"18. KMP"},{"location":"DSA_Review/#181-build-next-array","text":"\\(O(m)\\) \u3002 \\(next[j]\\) \u8868\u793a\u6a21\u5f0f\u4e32pattern\u7684 \\([0, j - 1]\\) \u533a\u95f4\u5185\uff0c\u6700\u5927\u516c\u5171\u524d\u7f00\u540e\u7f00\u7684\u957f\u5ea6\u3002 \uff08\u753b\u5708\u7684j\u4ee3\u8868\u5728\u76f8\u5e94\u4f4d\u7f6e\u66f4\u65b0\u4e86next\u6570\u7ec4\u3002\uff09","title":"18.1 Build Next Array"},{"location":"DSA_Review/#19-bm","text":"Complexity comparison: (Brutal Force; KMP; BM with BC; BM with BC & GS) (Pr: The probability that the two characters you randomly picked from the character set are the same.)","title":"19. BM"},{"location":"DSA_Review/#191-bad-character-shift","text":"\uff08\u4ec5\u6709BC\u7b56\u7565\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \uff09\u3002 \u82e5\u67d0\u5904\uff08\u4e3b\u4e32\u5b57\u7b26\u4e3aX\uff0c\u6a21\u5f0f\u4e32\u4e3aY\uff09\u5339\u914d\u5931\u8d25\uff0c\u5219\u7528BC\u8868\u627e\u5230\u6a21\u5f0f\u4e32P\u4e2d\u6700\u540e\u4e00\u4e2aX\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u5bf9\u51c6\u4e3b\u4e32\u8fdb\u884c\u5339\u914d\u3002 \u5982\u679cP\u4e2d\u6700\u540e\u4e00\u4e2aX\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728Y\u4e4b\u524d\uff0c\u5219\u76f8\u5f53\u4e8eP\u53f3\u79fb\u3002 \u82e5P\u4e2d\u6700\u540e\u4e00\u4e2aX\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728Y\u4e4b\u540e\uff0c\u5176\u5b9e \u65e0\u9700\u4e5f\u4e0d\u80fd\u5de6\u79fb \u3002\uff08\u4fdd\u6301P\u4e00\u76f4\u53f3\u79fb\u7684\u5355\u8c03\u6027\u3002\uff09\u6b64\u65f6\u76f4\u63a5\u5c06P\u53f3\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\u3002","title":"19.1 Bad Character Shift"},{"location":"DSA_Review/#1911-build-bc-array","text":"BC\u8868\u957f\u5ea6\u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u3002 BC\u8868\u521d\u59cb\u5316\u4e3a\u6bcf\u4e00\u9879\u4e3a-1\uff0c\u5bf9\u5e94\u5b57\u7b26\u672a\u51fa\u73b0\u5728P\u4e2d\u3002 \u4ece\u5de6\u5411\u53f3\u626b\u63cfP\uff0c\u4ee4 BC[ P[i] ] = i \u5373\u53ef\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u5728P\u4e2d\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u3002","title":"19.1.1 Build BC Array"},{"location":"DSA_Review/#192-good-suffix-shift","text":"\uff08\u5229\u7528GS\u8868\u4f18\u5316\u53ef\u4f7fBM\u7b97\u6cd5\u8fbe\u5230 \\(O(n+m)\\) \u3002\uff09 \u5bf9\u6bcf\u4e2a\u540e\u7f00U\uff0c\u627e\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u4e0eU\u76f8\u540c\u7684\u5b50\u4e32V\u3002\u82e5\u4e0d\u5b58\u5728\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u627e\u80fd\u4e0eU\u7684\u540e\u7f00\u5339\u914d\u7684\u6700\u957f\u8005\u3002 \u4e8e\u662f\u5f53\u5339\u914d\u5931\u8d25\u65f6\uff0c\u53f3\u79fbP\uff0c\u5c06V\u4e0eU\u5bf9\u9f50\u3002","title":"19.2 Good Suffix Shift"},{"location":"DSA_Review/#1921-build-gs-array","text":"GS\u8868\u7ed9\u51fa\u5728\u67d0\u5904\u5931\u914d\u65f6\uff0cP\u7684 \u53f3\u79fb\u91cf \u3002 \uff08\u5177\u4f53\u7684\u6784\u5efa\u8fc7\u7a0b\u7565\u3002\uff09","title":"19.2.1 Build GS Array"},{"location":"LaTex/","text":"LaTeX A Simple template: \\documentclass { article } \\usepackage { graphicx } \\usepackage { graphics } \\usepackage { CJKutf8 } \\usepackage { indentfirst } \\setlength { \\parindent }{ 2em } \\usepackage { geometry } \\usepackage { gensymb } \\usepackage { enumerate } \\usepackage { float } \\usepackage { longtable } \\usepackage { listings } \\usepackage { xcolor } \\usepackage { caption } \\usepackage { subfigure } \\usepackage { amsmath } \\usepackage { makecell } \\usepackage { url } \\lstset { frame=shadowbox, %\u628a\u4ee3\u7801\u7528\u5e26\u6709\u9634\u5f71\u7684\u6846\u5708\u8d77\u6765 rulesepcolor= \\color { red!20!green!20!blue!20 } , %\u4ee3\u7801\u5757\u8fb9\u6846\u4e3a\u6de1\u9752\u8272 keywordstyle= \\color { blue!90 } \\bfseries , %\u4ee3\u7801\u5173\u952e\u5b57\u7684\u989c\u8272\u4e3a\u84dd\u8272\uff0c\u7c97\u4f53 commentstyle= \\color { red!10!green!70 } \\textit , % \u8bbe\u7f6e\u4ee3\u7801\u6ce8\u91ca\u7684\u989c\u8272 showstringspaces=false, %\u4e0d\u663e\u793a\u4ee3\u7801\u5b57\u7b26\u4e32\u4e2d\u95f4\u7684\u7a7a\u683c\u6807\u8bb0 numbers=left, % \u663e\u793a\u884c\u53f7 numberstyle= \\tiny , % \u884c\u53f7\u5b57\u4f53 stringstyle= \\ttfamily , % \u4ee3\u7801\u5b57\u7b26\u4e32\u7684\u7279\u6b8a\u683c\u5f0f breaklines=true, %\u5bf9\u8fc7\u957f\u7684\u4ee3\u7801\u81ea\u52a8\u6362\u884c extendedchars=false, %\u89e3\u51b3\u4ee3\u7801\u8de8\u9875\u65f6\uff0c\u7ae0\u8282\u6807\u9898\uff0c\u9875\u7709\u7b49\u6c49\u5b57\u4e0d\u663e\u793a\u7684\u95ee\u9898 %escapebegin=\\begin{CJK*},escapeend=\\end{CJK*}, % \u4ee3\u7801\u4e2d\u51fa\u73b0\u4e2d\u6587\u5fc5\u987b\u52a0\u4e0a\uff0c\u5426\u5219\u62a5\u9519 texcl=true } \\newcommand { \\RNum } [1] { \\uppercase\\expandafter { \\romannumeral #1 \\relax }} \\def\\celsius { \\ensuremath {^ \\circ\\hspace { -0.09em } \\mathrm { C }}} \\geometry { a4paper, scale = 0.8 } \\begin { document } \\begin { CJK }{ UTF8 }{ gbsn } \\title { LaTeX Example } \\author { Colin } \\maketitle % \\begin{figure}[H] % \\centering % \\includegraphics[scale = 0.5]{img/curve04} % \\caption{B - x \u5206\u5e03\u66f2\u7ebf} % \\end{figure} %\\begin{figure}[H] % \\centering % \\subfigure[]{ % \\includegraphics[scale = 0.13]{img/exp124} % } % \\subfigure[]{ % \\includegraphics[scale = 0.13]{img/exp3} % } % \\subfigure[]{ % \\includegraphics[scale = 0.1]{img/exp6} % } %\\end{figure} % \\begin{table}[H] % \\centering % \\setlength{\\tabcolsep}{3mm}{ % \\renewcommand\\arraystretch{2} % \\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|} % \\hline % \u5e8f\u53f7 & 1 & 2 & 3 & 4 & 5 & 6 & \u6807\u51c6\u5dee & $\\overline{p_\\leftrightarrow}$ & $a_\\updownarrow$ \\\\ \\hline % $p_\\leftrightarrow$/\u00b0 & 267.5 & 266.9 & 267.4 & 267.8 & 267 & 267.1 & 0.34302575 & 267.283333 & 195.1 \\\\ \\hline % \\end{tabular} % } % \\end{table} %\\begin{lstlisting}[language=c++] % // example % #include <iostream> % % int main() % { % return 0; % } %\\end{lstlisting} \\section { Section } \\end { CJK } \\end { document }","title":"LaTeX"},{"location":"LaTex/#latex","text":"A Simple template: \\documentclass { article } \\usepackage { graphicx } \\usepackage { graphics } \\usepackage { CJKutf8 } \\usepackage { indentfirst } \\setlength { \\parindent }{ 2em } \\usepackage { geometry } \\usepackage { gensymb } \\usepackage { enumerate } \\usepackage { float } \\usepackage { longtable } \\usepackage { listings } \\usepackage { xcolor } \\usepackage { caption } \\usepackage { subfigure } \\usepackage { amsmath } \\usepackage { makecell } \\usepackage { url } \\lstset { frame=shadowbox, %\u628a\u4ee3\u7801\u7528\u5e26\u6709\u9634\u5f71\u7684\u6846\u5708\u8d77\u6765 rulesepcolor= \\color { red!20!green!20!blue!20 } , %\u4ee3\u7801\u5757\u8fb9\u6846\u4e3a\u6de1\u9752\u8272 keywordstyle= \\color { blue!90 } \\bfseries , %\u4ee3\u7801\u5173\u952e\u5b57\u7684\u989c\u8272\u4e3a\u84dd\u8272\uff0c\u7c97\u4f53 commentstyle= \\color { red!10!green!70 } \\textit , % \u8bbe\u7f6e\u4ee3\u7801\u6ce8\u91ca\u7684\u989c\u8272 showstringspaces=false, %\u4e0d\u663e\u793a\u4ee3\u7801\u5b57\u7b26\u4e32\u4e2d\u95f4\u7684\u7a7a\u683c\u6807\u8bb0 numbers=left, % \u663e\u793a\u884c\u53f7 numberstyle= \\tiny , % \u884c\u53f7\u5b57\u4f53 stringstyle= \\ttfamily , % \u4ee3\u7801\u5b57\u7b26\u4e32\u7684\u7279\u6b8a\u683c\u5f0f breaklines=true, %\u5bf9\u8fc7\u957f\u7684\u4ee3\u7801\u81ea\u52a8\u6362\u884c extendedchars=false, %\u89e3\u51b3\u4ee3\u7801\u8de8\u9875\u65f6\uff0c\u7ae0\u8282\u6807\u9898\uff0c\u9875\u7709\u7b49\u6c49\u5b57\u4e0d\u663e\u793a\u7684\u95ee\u9898 %escapebegin=\\begin{CJK*},escapeend=\\end{CJK*}, % \u4ee3\u7801\u4e2d\u51fa\u73b0\u4e2d\u6587\u5fc5\u987b\u52a0\u4e0a\uff0c\u5426\u5219\u62a5\u9519 texcl=true } \\newcommand { \\RNum } [1] { \\uppercase\\expandafter { \\romannumeral #1 \\relax }} \\def\\celsius { \\ensuremath {^ \\circ\\hspace { -0.09em } \\mathrm { C }}} \\geometry { a4paper, scale = 0.8 } \\begin { document } \\begin { CJK }{ UTF8 }{ gbsn } \\title { LaTeX Example } \\author { Colin } \\maketitle % \\begin{figure}[H] % \\centering % \\includegraphics[scale = 0.5]{img/curve04} % \\caption{B - x \u5206\u5e03\u66f2\u7ebf} % \\end{figure} %\\begin{figure}[H] % \\centering % \\subfigure[]{ % \\includegraphics[scale = 0.13]{img/exp124} % } % \\subfigure[]{ % \\includegraphics[scale = 0.13]{img/exp3} % } % \\subfigure[]{ % \\includegraphics[scale = 0.1]{img/exp6} % } %\\end{figure} % \\begin{table}[H] % \\centering % \\setlength{\\tabcolsep}{3mm}{ % \\renewcommand\\arraystretch{2} % \\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|} % \\hline % \u5e8f\u53f7 & 1 & 2 & 3 & 4 & 5 & 6 & \u6807\u51c6\u5dee & $\\overline{p_\\leftrightarrow}$ & $a_\\updownarrow$ \\\\ \\hline % $p_\\leftrightarrow$/\u00b0 & 267.5 & 266.9 & 267.4 & 267.8 & 267 & 267.1 & 0.34302575 & 267.283333 & 195.1 \\\\ \\hline % \\end{tabular} % } % \\end{table} %\\begin{lstlisting}[language=c++] % // example % #include <iostream> % % int main() % { % return 0; % } %\\end{lstlisting} \\section { Section } \\end { CJK } \\end { document }","title":"LaTeX"},{"location":"Linux/","text":"Linux 1. apt Disable IPv6: apt-get -o Acquire::ForceIPv4 = true update # temperory nano /etc/apt/apt.conf.d/99force-ipv4 # permanent: add Acquire::ForceIPv4 \"true\"; 2. SSH Public Key -> Servers you want to log in Private Key -> Client [ root@client ] $ ssh-keygen # Generate public/private key pair ... Your identification has been saved in /root/.ssh/id_rsa. # private key Your public key has been saved in /root/.ssh/id_rsa.pub. # public key ... [ root@server ] $ cd ~/.ssh [ root@server ] $ cat id_rsa.pub >> authorized_keys # add public key as an authorized key on the server [ root@server ] $ chmod 600 authorized_keys # make sure the permissions is correct [ root@server ] $ chmod 700 ~/.ssh # make sure the permissions is correct Config ssh by editing /etc/ssh/sshd_config : RSAAuthentication yes PubkeyAuthentication yes PermitRootLogin yes PasswordAuthentication no 2.1 SSH Tunnel ssh -N -f -L 8008 :localhost:8008 user@serverip","title":"Linux"},{"location":"Linux/#linux","text":"","title":"Linux"},{"location":"Linux/#1-apt","text":"Disable IPv6: apt-get -o Acquire::ForceIPv4 = true update # temperory nano /etc/apt/apt.conf.d/99force-ipv4 # permanent: add Acquire::ForceIPv4 \"true\";","title":"1. apt"},{"location":"Linux/#2-ssh","text":"Public Key -> Servers you want to log in Private Key -> Client [ root@client ] $ ssh-keygen # Generate public/private key pair ... Your identification has been saved in /root/.ssh/id_rsa. # private key Your public key has been saved in /root/.ssh/id_rsa.pub. # public key ... [ root@server ] $ cd ~/.ssh [ root@server ] $ cat id_rsa.pub >> authorized_keys # add public key as an authorized key on the server [ root@server ] $ chmod 600 authorized_keys # make sure the permissions is correct [ root@server ] $ chmod 700 ~/.ssh # make sure the permissions is correct Config ssh by editing /etc/ssh/sshd_config : RSAAuthentication yes PubkeyAuthentication yes PermitRootLogin yes PasswordAuthentication no","title":"2. SSH"},{"location":"Linux/#21-ssh-tunnel","text":"ssh -N -f -L 8008 :localhost:8008 user@serverip","title":"2.1 SSH Tunnel"},{"location":"Python/","text":"Python 1. gmpy2 1.1 is_prime By Miller-Rabin tests. import gmpy2 gmpy2 . is_prime ( x ) 2. Sys.argv Example: scale = 10000 step = 10000 loop = 10 if len ( sys . argv ) >= 2 : scale = int ( sys . argv [ 1 ]) if len ( sys . argv ) >= 3 : step = int ( sys . argv [ 2 ]) if len ( sys . argv ) >= 4 : loop = int ( sys . argv [ 3 ]) 3. OS Execute a command and get its return value: not_same = os . system ( 'diff {} {} ' . format ( 'ans.txt' , 'output.txt' )) Execute a command and get its output as list by popen (seperated by lines) (pay attention to the stream redirection): std_info = os . popen ( '(gtime -f\" %e \\t\\t %M \\t\\t \" ./std < {} > {} ) 2>&1' . format ( 'input.txt' , 'ans.txt' ) ) . readlines () 4. Format Example: not_same = os . system ( 'diff {} {} ' . format ( 'ans.txt' , 'output.txt' )) The parameters substitute {} respectively in the original string.","title":"Python"},{"location":"Python/#python","text":"","title":"Python"},{"location":"Python/#1-gmpy2","text":"","title":"1. gmpy2"},{"location":"Python/#11-is_prime","text":"By Miller-Rabin tests. import gmpy2 gmpy2 . is_prime ( x )","title":"1.1 is_prime"},{"location":"Python/#2-sysargv","text":"Example: scale = 10000 step = 10000 loop = 10 if len ( sys . argv ) >= 2 : scale = int ( sys . argv [ 1 ]) if len ( sys . argv ) >= 3 : step = int ( sys . argv [ 2 ]) if len ( sys . argv ) >= 4 : loop = int ( sys . argv [ 3 ])","title":"2. Sys.argv"},{"location":"Python/#3-os","text":"Execute a command and get its return value: not_same = os . system ( 'diff {} {} ' . format ( 'ans.txt' , 'output.txt' )) Execute a command and get its output as list by popen (seperated by lines) (pay attention to the stream redirection): std_info = os . popen ( '(gtime -f\" %e \\t\\t %M \\t\\t \" ./std < {} > {} ) 2>&1' . format ( 'input.txt' , 'ans.txt' ) ) . readlines ()","title":"3. OS"},{"location":"Python/#4-format","text":"Example: not_same = os . system ( 'diff {} {} ' . format ( 'ans.txt' , 'output.txt' )) The parameters substitute {} respectively in the original string.","title":"4. Format"},{"location":"Quantitive%20Investment/","text":"Quantitive Investment & Financial Optimization It's my notes for the course Topics on Quantitive Investment and Financial Optimization . Copyright of the screenshots of slides belongs to the teacher. 1. Log Optimal Strategy 1.1 Log Utility Form From the mathematics above, we have 1.2 Volatility Pumping 2 financial assets. Each of them has different profits and risks. We need to find a proportion to invest on them, to achieve the best return. 1.2.1 Stock & Cash Stock: doubles of halves with 50% of chance Cash: just remains the value Stock does not grow over time (using the log utility form above), and neither does cash. However, if we combine them together by 0.5 and 0.5, the assets will grow!!! (~ 6% per period) So, what is important is how the inclusion of an asset into a portfolio will affect the overall return, but not its individual return . Assets are valuable as members of portfolios. 1.3 Dominance of Log Optimal Strategy The log optimal strategy is the best, from mathematical expectation. However, it has some defects. 2. The Markowitz model Choosing a portfolio of risky assets 2.1 Efficient Frontier 2.2 The Model 2.3 Linear Property Any linear combinations of any two points on the efficient frontier belong to the efficient frontier ! By having two portfolios, one can generate any portfolios on the efficient frontier. 2.4 Including a Risk-Free Asset Ref: Risk-free asset and the capital allocation line When a risk-free asset is introduced, the half-line shown in the figure is the new efficient frontier. Its vertical intercept represents a portfolio with 100% of holdings in the risk-free asset; the tangency with the parabola represents a portfolio with no risk-free holdings and 100% of assets held in the portfolio occurring at the tangency point; points between those points are portfolios containing positive amounts of both the risky tangency portfolio and the risk-free asset; and points on the half-line beyond the tangency point are leveraged portfolios involving negative ( \\(\\alpha < 0\\) ) holdings of the risk-free asset (the latter has been sold short\u2014in other words, the investor has borrowed at the risk-free rate) and an amount invested in the tangency portfolio equal to more than 100% of the investor's initial capital. By the diagram, the introduction of the risk-free asset as a possible component of the portfolio has improved the range of risk-expected return combinations available, because everywhere except at the tangency portfolio the half-line gives a higher expected return than the hyperbola does at every possible risk level.","title":"Quantitive Investment & Financial Optimization"},{"location":"Quantitive%20Investment/#quantitive-investment-financial-optimization","text":"It's my notes for the course Topics on Quantitive Investment and Financial Optimization . Copyright of the screenshots of slides belongs to the teacher.","title":"Quantitive Investment &amp; Financial Optimization"},{"location":"Quantitive%20Investment/#1-log-optimal-strategy","text":"","title":"1. Log Optimal Strategy"},{"location":"Quantitive%20Investment/#11-log-utility-form","text":"From the mathematics above, we have","title":"1.1 Log Utility Form"},{"location":"Quantitive%20Investment/#12-volatility-pumping","text":"2 financial assets. Each of them has different profits and risks. We need to find a proportion to invest on them, to achieve the best return.","title":"1.2 Volatility Pumping"},{"location":"Quantitive%20Investment/#121-stock-cash","text":"Stock: doubles of halves with 50% of chance Cash: just remains the value Stock does not grow over time (using the log utility form above), and neither does cash. However, if we combine them together by 0.5 and 0.5, the assets will grow!!! (~ 6% per period) So, what is important is how the inclusion of an asset into a portfolio will affect the overall return, but not its individual return . Assets are valuable as members of portfolios.","title":"1.2.1 Stock &amp; Cash"},{"location":"Quantitive%20Investment/#13-dominance-of-log-optimal-strategy","text":"The log optimal strategy is the best, from mathematical expectation. However, it has some defects.","title":"1.3 Dominance of Log Optimal Strategy"},{"location":"Quantitive%20Investment/#2-the-markowitz-model","text":"Choosing a portfolio of risky assets","title":"2. The Markowitz model"},{"location":"Quantitive%20Investment/#21-efficient-frontier","text":"","title":"2.1 Efficient Frontier"},{"location":"Quantitive%20Investment/#22-the-model","text":"","title":"2.2 The Model"},{"location":"Quantitive%20Investment/#23-linear-property","text":"Any linear combinations of any two points on the efficient frontier belong to the efficient frontier ! By having two portfolios, one can generate any portfolios on the efficient frontier.","title":"2.3 Linear Property"},{"location":"Quantitive%20Investment/#24-including-a-risk-free-asset","text":"Ref: Risk-free asset and the capital allocation line When a risk-free asset is introduced, the half-line shown in the figure is the new efficient frontier. Its vertical intercept represents a portfolio with 100% of holdings in the risk-free asset; the tangency with the parabola represents a portfolio with no risk-free holdings and 100% of assets held in the portfolio occurring at the tangency point; points between those points are portfolios containing positive amounts of both the risky tangency portfolio and the risk-free asset; and points on the half-line beyond the tangency point are leveraged portfolios involving negative ( \\(\\alpha < 0\\) ) holdings of the risk-free asset (the latter has been sold short\u2014in other words, the investor has borrowed at the risk-free rate) and an amount invested in the tangency portfolio equal to more than 100% of the investor's initial capital. By the diagram, the introduction of the risk-free asset as a possible component of the portfolio has improved the range of risk-expected return combinations available, because everywhere except at the tangency portfolio the half-line gives a higher expected return than the hyperbola does at every possible risk level.","title":"2.4 Including a Risk-Free Asset"},{"location":"SystemVerilog/","text":"SystemVerilog Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Preparation 1.1 Environment IDE: Quartus Lite Editor on macOS: VSCode + Verilog-HDL/SystemVerilog/Bluespec SystemVerilog + verilator (Install verilator by Homebrew, and then use it as the linter in the VSCode plugin configuration.) (Parameters for verilator: -sv --language 1800-2012 --lint-only . Example: verilator -sv --language 1800-2012 --lint-only mycode.sv ) 1.2 Example A simple example of displaying the sequence \"2021040907\" with a 7-input digital display: module seqdisplay ( input logic rst , input logic clk , output logic [ 6 : 0 ] natural , output logic [ 3 : 0 ] even , output logic [ 3 : 0 ] odd ); int counter ; logic [ 3 : 0 ] date [ 0 : 9 ] = '{ 4'h2 , 4'h0 , 4'h2 , 4'h1 , 4'h0 , 4'h4 , 4'h0 , 4'h9 , 4'h0 , 4'h7 }; logic [ 3 : 0 ] index = 0 ; initial begin even = 0 ; odd = 0 ; //date = '{ 4'h2, 4'h0, 4'h2, 4'h1, 4'h0, 4'h4, 4'h0, 4'h9, 4'h0, 4'h7 }; natural = digital_number ( 0 ); end always @ ( posedge clk ) begin if ( rst ) begin counter <= 32 'd4 _000_000 ; index = 0 ; natural <= digital_number ( date [ 0 ]); // display 0 end else begin if ( counter == 32 'd4 _000_000 ) begin // need update // display the next number natural <= digital_number ( date [ index ]); index = index + 4 'b1 ; if ( index == 10 ) begin index = 0 ; end counter <= 0 ; end else begin counter <= counter + 32 'd1 ; end end end function logic [ 6 : 0 ] digital_number ( logic [ 3 : 0 ] number ); case ( number ) 4'h0 : digital_number = 7 'b1111110 ; 4'h1 : digital_number = 7 'b0110000 ; 4'h2 : digital_number = 7 'b1101101 ; 4'h3 : digital_number = 7 'b1111001 ; 4'h4 : digital_number = 7 'b0110011 ; 4'h5 : digital_number = 7 'b1011011 ; 4'h6 : digital_number = 7 'b1011111 ; 4'h7 : digital_number = 7 'b1110000 ; 4'h8 : digital_number = 7 'b1111111 ; 4'h9 : digital_number = 7 'b1110011 ; 4'ha : digital_number = 7 'b1110111 ; 4'hb : digital_number = 7 'b0011111 ; 4'hc : digital_number = 7 'b1001110 ; 4'hd : digital_number = 7 'b0111101 ; 4'he : digital_number = 7 'b1001111 ; 4'hf : digital_number = 7 'b1000111 ; default : digital_number = 7 ' bx ; endcase endfunction endmodule 2. Basis C++\u6ce8\u91ca\u98ce\u683c \u56db\u79cd\u57fa\u672c\u7684\u503c\u6765\u8868\u793a\u786c\u4ef6\u7535\u8def\u4e2d\u7684\u7535\u5e73\u903b\u8f91: - 0\uff1a\u903b\u8f910\u6216\"\u5047\" - 1\uff1a\u903b\u8f911\u6216\"\u771f\" - x\u6216X\uff1a\u672a\u77e5 - z\u6216Z\uff1a\u9ad8\u963b \u6574\u6570\u6570\u503c\u8868\u793a\u65b9\u6cd5 \u5341\u8fdb\u5236('d \u6216 'D)\uff0c\u5341\u516d\u8fdb\u5236('h \u6216 'H)\uff0c\u4e8c\u8fdb\u5236('b \u6216 'B)\uff0c\u516b\u8fdb\u5236('o \u6216 'O) 4'b1011 // 4bit \u6570\u503c 32'h3022_c0de // 32bit \u7684\u6570\u503c \u4e0b\u5212\u7ebf\u8868\u793a\u5206\u5272\u7b26\uff0c\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u53ea\u662f\u7ed9\u4eba\u770b\u7684 \u6700\u524d\u9762\u4e0d\u5206\u914d\u4f4d\u5bbd\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5206\u914d \u7b49\u4ef7\u64cd\u4f5c\u7b26 == \uff0c != \uff1a\u4e0d\u80fd\u6bd4\u8f83x\u6216z\uff1b\u5f53\u64cd\u4f5c\u6570\u5305\u542b\u4e00\u4e2a x \u6216 z\uff0c\u5219\u7ed3\u679c\u4e3a x\uff08uncertain\uff09 === \uff0c !== \uff1a\u5168\u7b49\u6bd4\u8f83\uff1b\u53ef\u4ee5\u6bd4\u8f83x\u6216z\uff0c\u7ed3\u679c\u4e3a0\u62161 3. Data Type \u4e24\u79cd\u53d8\u91cf\uff1a4-state data types and 2-state data types Nets and variables are the two main groups of data types. Distinguishing them is the most important part to understand data types in Verilog. 3.1 Nets Nets are used to connect between hardware entities like logic gates and hence do not store any value on its own. The most popular and widely used net in digital designs is of type wire . 3.1.1 Wire \u8868\u793a\u786c\u4ef6\u5355\u5143\u4e4b\u95f4\u7684\u7269\u7406\u8fde\u7ebf\uff0c\u7531\u5176\u8fde\u63a5\u7684\u5668\u4ef6\u7684\u8f93\u51fa\u7aef\u6301\u7eed\u4e0d\u65ad\u5730\u9a71\u52a8\u3002 wire : can only be driven in assign statements \uff08\u8be6\u7ec6\u89c1\u540e\u9762\uff09 assign output = x ; 3.2 Variables A variable on the other hand is an abstraction of a data storage element and can hold values . 3.2.1 Reg Verilog data-type reg can be used to model hardware registers since it can hold values between assignments. \u8868\u793a\u5b58\u50a8\u5355\u5143\uff1b\u4fdd\u6301\u6570\u636e\u7684\u503c\u76f4\u5230\u88ab\u6539\u5199\u3002 reg : can only be driven in procedural blocks ( always , initial , task , function )\uff08\u8be6\u7ec6\u89c1\u540e\u9762\uff09 3.3 logic Based on Verilog, SystemVerilog introduces logic . Except for inout port, we can use logic to replace nearly any wire or reg in Verilog. 3.4 Scalar & Vector \u6ca1\u6709\u58f0\u660e range \u7684 wire \u548c reg \u9ed8\u8ba4\u4e3a 1-bit wide\uff0c\u4e3ascalar\u3002\u58f0\u660e\u4f4d\u5bbd\u7684\u4e3a vector\u3002 // \u4e2d\u62ec\u53f7\u5185\u4e24\u8fb9\u90fd\u4e3a\u95ed\u533a\u95f4 // \u5012\u5e8f\uff1b0\u4e3a\u6700\u4f4e\u4f4d reg [ 3 : 0 ] counter ; //\u58f0\u660e4bit\u4f4d\u5bbd\u7684\u5bc4\u5b58\u5668counter wire [ 32 - 1 : 0 ] gpio_data ; //\u58f0\u660e32bit\u4f4d\u5bbd\u7684\u7ebf\u578b\u53d8\u91cfgpio_data // \u4ee5\u4e0b\u4e0d\u5e38\u7528 wire [ 8 : 2 ] addr ; //\u58f0\u660e7bit\u4f4d\u5bbd\u7684\u7ebf\u578b\u53d8\u91cfaddr\uff0c\u4f4d\u5bbd\u8303\u56f4\u4e3a8:2 reg [ 0 : 31 ] data ; //\u58f0\u660e32bit\u4f4d\u5bbd\u7684\u5bc4\u5b58\u5668\u53d8\u91cfdata, \u6700\u9ad8\u6709\u6548\u4f4d\u4e3a0 \u5207\u7247\uff1a wire [ 9 : 0 ] data_low = data [ 0 : 9 ] ; addr_temp [ 3 : 2 ] = addr [ 8 : 7 ] + 1 'b1 ; \u6307\u5b9a\u8d77\u59cb\u3001\u4f4d\u5bbd\u548c\u9012\u589e/\u9012\u51cf\u65b9\u5411\uff1a //\u4e0b\u9762 2 \u79cd\u8d4b\u503c\u662f\u7b49\u6548\u7684 A = data1 [ 31 -: 8 ] ; A = data1 [ 31 : 24 ] ; //\u4e0b\u9762 2 \u79cd\u8d4b\u503c\u662f\u7b49\u6548\u7684 B = data1 [ 0 + : 8 ] ; B = data1 [ 0 : 7 ] ; \u7528\u5927\u62ec\u53f7\u8fdb\u884c\u62fc\u63a5 A = 4 'b1010 ; B = 1 'b1 ; Y1 = { B , A [ 3 : 2 ], A [ 0 ], 4'h3 }; //\u7ed3\u679c\u4e3aY1='b1100_0011 Y2 = { 4 { B }, 3 'd4 }; //\u7ed3\u679c\u4e3a Y2=7'b111_1100 wire [ 31 : 0 ] temp1 , temp2 ; assign temp1 = { byte1 [ 7 : 0 ], data1 [ 31 : 8 ] }; //\u6570\u636e\u62fc\u63a5 assign temp2 = { 32 { 1 'b0 } }; //\u8d4b\u503c32\u4f4d\u7684\u6570\u503c0 3.5 Array \u6570\u7ec4\u5927\u5c0f\u5728\u672b\u5c3e\u6307\u5b9a\u3002 wire [ 7 : 0 ] addr_bus [ 3 : 0 ] ; //\u75314\u4e2a8bit wire\u578b\u53d8\u91cf\u7ec4\u6210\u7684\u6570\u7ec4 wire data_bit [ 7 : 0 ][ 5 : 0 ] ; //\u58f0\u660e1bit wire\u578b\u53d8\u91cf\u7684\u4e8c\u7ef4\u6570\u7ec4 Array assignment or initialization: logic [ 3 : 0 ] date [ 0 : 9 ] = '{ 4'h2 , 4'h0 , 4'h2 , 4'h1 , 4'h0 , 4'h4 , 4'h0 , 4'h9 , 4'h0 , 4'h7 }; 3.6 Other Notes Conversion of real to int: \u76f4\u63a5\u8d4b\u503c\u4f1around\u800c\u4e0d\u662ftruncate int '( 2.2 * 3.5 ) // round integer $rtoi ( real_val ) // use system tasks will truncate 4. Building Blocks 4.1 Module A module is a block of Verilog code that implements a certain functionality. module < name > ([ port_list ]); // Contents of the module endmodule // e.g. // Module called \"dff\" has 3 inputs and 1 output port module dff ( input d , input clk , input rstn , output reg q ); // Contents of the module always @ ( posedge clk ) begin if ( ! rstn ) q <= 0 ; else q <= d ; end endmodule A top-level module is one which contains all other modules. A top-level module is not instantiated within any other module. // Top-level module module design ( [ port_list ]); // From design perspective, this is the top-level module wire _net ; mod1 mod_inst1 ( ... ); // since it contains all other modules and sub-modules mod2 mod_inst2 ( ... ); endmodule 4.2 Port input [ net_type ] [ range ] list_of_names ; // Input port inout [ net_type ] [ range ] list_of_names ; // Input & Output port output [ net_type ] [ range ] list_of_names ; // Output port driven by a wire output [ var_type ] [ range ] list_of_names ; // Output port driven by a variable module ( input signed a , b , output c ); // unsigned by default wire a , b ; // a, b are signed from port declaration reg signed c ; // c is signed from reg declaration endmodule Port connection in module instantiations: module mydesign ( input x , y , z , // x is at position 1, y at 2, x at 3 and output o ); // o is at position 4 endmodule module design_top ; wire [ 1 : 0 ] a ; wire b , c ; mydesign d0 ( . x ( a [ 0 ]), // signal \"x\" in mydesign should be connected to \"a[0]\" in this module (design_top) . y ( b ), // signal \"y\" in mydesign should be connected to \"b\" in this module (design_top) . z ( a [ 1 ]), . o ( c )); endmodule 4.3 assign Signals of type wire or a similar wire like data type requires the continuous assignment of a value. assign < net_expression > = [ drive_strength ] [ delay ] < expression of different signals or constant value > Rule: LHS: scalar or vector of net (e.g. wire ); NO reg! Whenever any operand on the RHS changes in value, LHS will be updated with the new value. (It is illegal to drive or assign reg type variables with an assign statement. This is because a reg variable is capable of storing data and does not require to be driven continuously . reg signals can only be driven in procedural blocks like initial and always .) 4.4 always always @ ( event1 or event2 ) begin [ multiple statements ] end Multiple initial and always blocks can be included in one module. But they cannot be used recursively. All of the initial and always blocks in a module are independent and parallel ! (regardless of in what order they are defined) ATTENTION : There is an confusing error that we need to avoid: (Ref: cannot use an input for if statement in Verilog ) Avoid writing this: always @ ( posedge clk or negedge rst ) begin if ( some_var == 0 ) begin // ... end end Because, when there are multiple conditional statements in the always conditions, the top \"if-else\" statement should and can only use the same conditional variables as always statement. (Don't know why.) Instead, we can split the always block into multiple ones: always @ ( posedge clk ) begin end always @ ( negedge rst ) begin end 4.5 initial initial will be executed once at t=0. 5. Function function return_type function_name ( para_type_1 para_name_1 , ... // parameters ); // function body /* different return methods: */ return 3 ; function_name = 3 ; // assign the value to the function name endfunction","title":"SystemVerilog"},{"location":"SystemVerilog/#systemverilog","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"SystemVerilog"},{"location":"SystemVerilog/#1-preparation","text":"","title":"1. Preparation"},{"location":"SystemVerilog/#11-environment","text":"IDE: Quartus Lite Editor on macOS: VSCode + Verilog-HDL/SystemVerilog/Bluespec SystemVerilog + verilator (Install verilator by Homebrew, and then use it as the linter in the VSCode plugin configuration.) (Parameters for verilator: -sv --language 1800-2012 --lint-only . Example: verilator -sv --language 1800-2012 --lint-only mycode.sv )","title":"1.1 Environment"},{"location":"SystemVerilog/#12-example","text":"A simple example of displaying the sequence \"2021040907\" with a 7-input digital display: module seqdisplay ( input logic rst , input logic clk , output logic [ 6 : 0 ] natural , output logic [ 3 : 0 ] even , output logic [ 3 : 0 ] odd ); int counter ; logic [ 3 : 0 ] date [ 0 : 9 ] = '{ 4'h2 , 4'h0 , 4'h2 , 4'h1 , 4'h0 , 4'h4 , 4'h0 , 4'h9 , 4'h0 , 4'h7 }; logic [ 3 : 0 ] index = 0 ; initial begin even = 0 ; odd = 0 ; //date = '{ 4'h2, 4'h0, 4'h2, 4'h1, 4'h0, 4'h4, 4'h0, 4'h9, 4'h0, 4'h7 }; natural = digital_number ( 0 ); end always @ ( posedge clk ) begin if ( rst ) begin counter <= 32 'd4 _000_000 ; index = 0 ; natural <= digital_number ( date [ 0 ]); // display 0 end else begin if ( counter == 32 'd4 _000_000 ) begin // need update // display the next number natural <= digital_number ( date [ index ]); index = index + 4 'b1 ; if ( index == 10 ) begin index = 0 ; end counter <= 0 ; end else begin counter <= counter + 32 'd1 ; end end end function logic [ 6 : 0 ] digital_number ( logic [ 3 : 0 ] number ); case ( number ) 4'h0 : digital_number = 7 'b1111110 ; 4'h1 : digital_number = 7 'b0110000 ; 4'h2 : digital_number = 7 'b1101101 ; 4'h3 : digital_number = 7 'b1111001 ; 4'h4 : digital_number = 7 'b0110011 ; 4'h5 : digital_number = 7 'b1011011 ; 4'h6 : digital_number = 7 'b1011111 ; 4'h7 : digital_number = 7 'b1110000 ; 4'h8 : digital_number = 7 'b1111111 ; 4'h9 : digital_number = 7 'b1110011 ; 4'ha : digital_number = 7 'b1110111 ; 4'hb : digital_number = 7 'b0011111 ; 4'hc : digital_number = 7 'b1001110 ; 4'hd : digital_number = 7 'b0111101 ; 4'he : digital_number = 7 'b1001111 ; 4'hf : digital_number = 7 'b1000111 ; default : digital_number = 7 ' bx ; endcase endfunction endmodule","title":"1.2 Example"},{"location":"SystemVerilog/#2-basis","text":"C++\u6ce8\u91ca\u98ce\u683c \u56db\u79cd\u57fa\u672c\u7684\u503c\u6765\u8868\u793a\u786c\u4ef6\u7535\u8def\u4e2d\u7684\u7535\u5e73\u903b\u8f91: - 0\uff1a\u903b\u8f910\u6216\"\u5047\" - 1\uff1a\u903b\u8f911\u6216\"\u771f\" - x\u6216X\uff1a\u672a\u77e5 - z\u6216Z\uff1a\u9ad8\u963b \u6574\u6570\u6570\u503c\u8868\u793a\u65b9\u6cd5 \u5341\u8fdb\u5236('d \u6216 'D)\uff0c\u5341\u516d\u8fdb\u5236('h \u6216 'H)\uff0c\u4e8c\u8fdb\u5236('b \u6216 'B)\uff0c\u516b\u8fdb\u5236('o \u6216 'O) 4'b1011 // 4bit \u6570\u503c 32'h3022_c0de // 32bit \u7684\u6570\u503c \u4e0b\u5212\u7ebf\u8868\u793a\u5206\u5272\u7b26\uff0c\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u53ea\u662f\u7ed9\u4eba\u770b\u7684 \u6700\u524d\u9762\u4e0d\u5206\u914d\u4f4d\u5bbd\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5206\u914d \u7b49\u4ef7\u64cd\u4f5c\u7b26 == \uff0c != \uff1a\u4e0d\u80fd\u6bd4\u8f83x\u6216z\uff1b\u5f53\u64cd\u4f5c\u6570\u5305\u542b\u4e00\u4e2a x \u6216 z\uff0c\u5219\u7ed3\u679c\u4e3a x\uff08uncertain\uff09 === \uff0c !== \uff1a\u5168\u7b49\u6bd4\u8f83\uff1b\u53ef\u4ee5\u6bd4\u8f83x\u6216z\uff0c\u7ed3\u679c\u4e3a0\u62161","title":"2. Basis"},{"location":"SystemVerilog/#3-data-type","text":"\u4e24\u79cd\u53d8\u91cf\uff1a4-state data types and 2-state data types Nets and variables are the two main groups of data types. Distinguishing them is the most important part to understand data types in Verilog.","title":"3. Data Type"},{"location":"SystemVerilog/#31-nets","text":"Nets are used to connect between hardware entities like logic gates and hence do not store any value on its own. The most popular and widely used net in digital designs is of type wire .","title":"3.1 Nets"},{"location":"SystemVerilog/#311-wire","text":"\u8868\u793a\u786c\u4ef6\u5355\u5143\u4e4b\u95f4\u7684\u7269\u7406\u8fde\u7ebf\uff0c\u7531\u5176\u8fde\u63a5\u7684\u5668\u4ef6\u7684\u8f93\u51fa\u7aef\u6301\u7eed\u4e0d\u65ad\u5730\u9a71\u52a8\u3002 wire : can only be driven in assign statements \uff08\u8be6\u7ec6\u89c1\u540e\u9762\uff09 assign output = x ;","title":"3.1.1 Wire"},{"location":"SystemVerilog/#32-variables","text":"A variable on the other hand is an abstraction of a data storage element and can hold values .","title":"3.2 Variables"},{"location":"SystemVerilog/#321-reg","text":"Verilog data-type reg can be used to model hardware registers since it can hold values between assignments. \u8868\u793a\u5b58\u50a8\u5355\u5143\uff1b\u4fdd\u6301\u6570\u636e\u7684\u503c\u76f4\u5230\u88ab\u6539\u5199\u3002 reg : can only be driven in procedural blocks ( always , initial , task , function )\uff08\u8be6\u7ec6\u89c1\u540e\u9762\uff09","title":"3.2.1 Reg"},{"location":"SystemVerilog/#33-logic","text":"Based on Verilog, SystemVerilog introduces logic . Except for inout port, we can use logic to replace nearly any wire or reg in Verilog.","title":"3.3 logic"},{"location":"SystemVerilog/#34-scalar-vector","text":"\u6ca1\u6709\u58f0\u660e range \u7684 wire \u548c reg \u9ed8\u8ba4\u4e3a 1-bit wide\uff0c\u4e3ascalar\u3002\u58f0\u660e\u4f4d\u5bbd\u7684\u4e3a vector\u3002 // \u4e2d\u62ec\u53f7\u5185\u4e24\u8fb9\u90fd\u4e3a\u95ed\u533a\u95f4 // \u5012\u5e8f\uff1b0\u4e3a\u6700\u4f4e\u4f4d reg [ 3 : 0 ] counter ; //\u58f0\u660e4bit\u4f4d\u5bbd\u7684\u5bc4\u5b58\u5668counter wire [ 32 - 1 : 0 ] gpio_data ; //\u58f0\u660e32bit\u4f4d\u5bbd\u7684\u7ebf\u578b\u53d8\u91cfgpio_data // \u4ee5\u4e0b\u4e0d\u5e38\u7528 wire [ 8 : 2 ] addr ; //\u58f0\u660e7bit\u4f4d\u5bbd\u7684\u7ebf\u578b\u53d8\u91cfaddr\uff0c\u4f4d\u5bbd\u8303\u56f4\u4e3a8:2 reg [ 0 : 31 ] data ; //\u58f0\u660e32bit\u4f4d\u5bbd\u7684\u5bc4\u5b58\u5668\u53d8\u91cfdata, \u6700\u9ad8\u6709\u6548\u4f4d\u4e3a0 \u5207\u7247\uff1a wire [ 9 : 0 ] data_low = data [ 0 : 9 ] ; addr_temp [ 3 : 2 ] = addr [ 8 : 7 ] + 1 'b1 ; \u6307\u5b9a\u8d77\u59cb\u3001\u4f4d\u5bbd\u548c\u9012\u589e/\u9012\u51cf\u65b9\u5411\uff1a //\u4e0b\u9762 2 \u79cd\u8d4b\u503c\u662f\u7b49\u6548\u7684 A = data1 [ 31 -: 8 ] ; A = data1 [ 31 : 24 ] ; //\u4e0b\u9762 2 \u79cd\u8d4b\u503c\u662f\u7b49\u6548\u7684 B = data1 [ 0 + : 8 ] ; B = data1 [ 0 : 7 ] ; \u7528\u5927\u62ec\u53f7\u8fdb\u884c\u62fc\u63a5 A = 4 'b1010 ; B = 1 'b1 ; Y1 = { B , A [ 3 : 2 ], A [ 0 ], 4'h3 }; //\u7ed3\u679c\u4e3aY1='b1100_0011 Y2 = { 4 { B }, 3 'd4 }; //\u7ed3\u679c\u4e3a Y2=7'b111_1100 wire [ 31 : 0 ] temp1 , temp2 ; assign temp1 = { byte1 [ 7 : 0 ], data1 [ 31 : 8 ] }; //\u6570\u636e\u62fc\u63a5 assign temp2 = { 32 { 1 'b0 } }; //\u8d4b\u503c32\u4f4d\u7684\u6570\u503c0","title":"3.4 Scalar &amp; Vector"},{"location":"SystemVerilog/#35-array","text":"\u6570\u7ec4\u5927\u5c0f\u5728\u672b\u5c3e\u6307\u5b9a\u3002 wire [ 7 : 0 ] addr_bus [ 3 : 0 ] ; //\u75314\u4e2a8bit wire\u578b\u53d8\u91cf\u7ec4\u6210\u7684\u6570\u7ec4 wire data_bit [ 7 : 0 ][ 5 : 0 ] ; //\u58f0\u660e1bit wire\u578b\u53d8\u91cf\u7684\u4e8c\u7ef4\u6570\u7ec4 Array assignment or initialization: logic [ 3 : 0 ] date [ 0 : 9 ] = '{ 4'h2 , 4'h0 , 4'h2 , 4'h1 , 4'h0 , 4'h4 , 4'h0 , 4'h9 , 4'h0 , 4'h7 };","title":"3.5 Array"},{"location":"SystemVerilog/#36-other-notes","text":"Conversion of real to int: \u76f4\u63a5\u8d4b\u503c\u4f1around\u800c\u4e0d\u662ftruncate int '( 2.2 * 3.5 ) // round integer $rtoi ( real_val ) // use system tasks will truncate","title":"3.6 Other Notes"},{"location":"SystemVerilog/#4-building-blocks","text":"","title":"4. Building Blocks"},{"location":"SystemVerilog/#41-module","text":"A module is a block of Verilog code that implements a certain functionality. module < name > ([ port_list ]); // Contents of the module endmodule // e.g. // Module called \"dff\" has 3 inputs and 1 output port module dff ( input d , input clk , input rstn , output reg q ); // Contents of the module always @ ( posedge clk ) begin if ( ! rstn ) q <= 0 ; else q <= d ; end endmodule A top-level module is one which contains all other modules. A top-level module is not instantiated within any other module. // Top-level module module design ( [ port_list ]); // From design perspective, this is the top-level module wire _net ; mod1 mod_inst1 ( ... ); // since it contains all other modules and sub-modules mod2 mod_inst2 ( ... ); endmodule","title":"4.1 Module"},{"location":"SystemVerilog/#42-port","text":"input [ net_type ] [ range ] list_of_names ; // Input port inout [ net_type ] [ range ] list_of_names ; // Input & Output port output [ net_type ] [ range ] list_of_names ; // Output port driven by a wire output [ var_type ] [ range ] list_of_names ; // Output port driven by a variable module ( input signed a , b , output c ); // unsigned by default wire a , b ; // a, b are signed from port declaration reg signed c ; // c is signed from reg declaration endmodule Port connection in module instantiations: module mydesign ( input x , y , z , // x is at position 1, y at 2, x at 3 and output o ); // o is at position 4 endmodule module design_top ; wire [ 1 : 0 ] a ; wire b , c ; mydesign d0 ( . x ( a [ 0 ]), // signal \"x\" in mydesign should be connected to \"a[0]\" in this module (design_top) . y ( b ), // signal \"y\" in mydesign should be connected to \"b\" in this module (design_top) . z ( a [ 1 ]), . o ( c )); endmodule","title":"4.2 Port"},{"location":"SystemVerilog/#43-assign","text":"Signals of type wire or a similar wire like data type requires the continuous assignment of a value. assign < net_expression > = [ drive_strength ] [ delay ] < expression of different signals or constant value > Rule: LHS: scalar or vector of net (e.g. wire ); NO reg! Whenever any operand on the RHS changes in value, LHS will be updated with the new value. (It is illegal to drive or assign reg type variables with an assign statement. This is because a reg variable is capable of storing data and does not require to be driven continuously . reg signals can only be driven in procedural blocks like initial and always .)","title":"4.3 assign"},{"location":"SystemVerilog/#44-always","text":"always @ ( event1 or event2 ) begin [ multiple statements ] end Multiple initial and always blocks can be included in one module. But they cannot be used recursively. All of the initial and always blocks in a module are independent and parallel ! (regardless of in what order they are defined) ATTENTION : There is an confusing error that we need to avoid: (Ref: cannot use an input for if statement in Verilog ) Avoid writing this: always @ ( posedge clk or negedge rst ) begin if ( some_var == 0 ) begin // ... end end Because, when there are multiple conditional statements in the always conditions, the top \"if-else\" statement should and can only use the same conditional variables as always statement. (Don't know why.) Instead, we can split the always block into multiple ones: always @ ( posedge clk ) begin end always @ ( negedge rst ) begin end","title":"4.4 always"},{"location":"SystemVerilog/#45-initial","text":"initial will be executed once at t=0.","title":"4.5 initial"},{"location":"SystemVerilog/#5-function","text":"function return_type function_name ( para_type_1 para_name_1 , ... // parameters ); // function body /* different return methods: */ return 3 ; function_name = 3 ; // assign the value to the function name endfunction","title":"5. Function"},{"location":"C%2B%2B/DSA01/","text":"DSA01 1. Tricks 1.1 IO inline char nchar () { // read a large amount of char to speed up reading // the codes below are widely spread and applied so the author is uncertain static const int bufl = 1 << 22 ; static char buf [ bufl ], * a , * b ; return a == b && ( b = ( a = buf ) + fread ( buf , 1 , bufl , stdin ), a == b ) ? EOF : * a ++ ; } template < class T > inline T getnum () { // read numbers of type T based on nchar() T x = 0 ; bool f = 1 ; char c = nchar (); for (; ! isdigit ( c ); c = nchar ()) if ( c == '-' ) f = 0 ; for (; isdigit ( c ); c = nchar ()) x = x * 10 + c - 48 ; return f ? x : - x ; } Disable the synchronization between C++ streams and standard C stream to speed up C++ streams. std :: ios :: sync_with_stdio ( false ); 1.2 Gprof - Performance Analysis Tool g++ main.cpp -o main -pg # use \"-pg\" compiler options ./main gprof ./main > report.txt P.S. clang: error: the clang compiler does not support -pg option on versions of OS X 10 .9 and later 1.3 Timespec timespec start , end ; clock_gettime ( CLOCK_MONOTONIC , & start ); // ... clock_gettime ( CLOCK_MONOTONIC , & end ); double deltaT = ( end . tv_sec - start . tv_sec ) * 1e3 + ( end . tv_nsec - start . tv_nsec ) * 1e-6 ; //\u8ba1\u7b97\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3ams 2. Data Structure 2.1 Complete Binary Tree Complete binary tree can be stored as an array. 2.1.1 Construction CAUTION : A complete tree with n leaves need an array with \"_size\" to store. \\(\\_size = 2 * bottomSize - 1, bottomSize = 2^{min(k)}\\) where \\(2^k \\geq n, k \\in N\\) . 2.1.2 Visit Given a node with index i, leftChild = 2 * i + 1, rightChild = 2 * i + 2. 2.2 Binary Search Tree left springs <= node <= right springs inorder tranversal sequence: non-decreasing 2.3 Balanced BST 2.4 KD-Tree 2.4.1 Requirements 2.4.1.1 1D Range Query Count the number of points belong to I = (x1, x2] among P = { p1, ... pn } (or to report the points of \\(I \\cap P\\) ). We're not satisfied by \\(O(n)\\) ! It can be solved by binary search on a sorted ( \\(O(nlogn)\\) ) vector or array. For each query, the complexity is \\(O(logn + r)\\) . 2.4.1.2 2D Range Query For higher dimension occasions, the binary search doesn't work. Somebody may consider performing binary search on each dimension one by one. But , the complexity can be very bad. (You may select nearly n points when searching on the first dimension. However, when it comes to the 2nd dimension, the remained points may be r << n . But your complexity is \\(O(n)\\) , which is expensive for r.) So we need an advanced DS, 2D-Tree. 2.4.2 1D-Tree 2.4.2.1 Data Structure A balanced binary search tree. Input data are stored in leaves. Inside nodes store the maximum value in the left child tree. 2.4.2.2 Query Algorithm Search(x): returns the maximum key not greater than x Lowest Common Ancestor : LCA(x, y) = sub_root Report the points inside [x, y]: Starting from LCA : Go to x ( by turn left as much as possible ) : Ignore turning right ; For each turning left , report the right subtree ; Go to y ( by turn right as much as possible ) : Ignore turning left ; ss For each turning right , report the left subtree ; 2.4.2.3 Complexity Preprocessing: \\(O(nlogn)\\) ; Storage: \\(O(n)\\) ; Query: \\(O(logn)\\) ; 2.4.3 2D-Tree 2.4.3.1 Data Structure Balanced Binary Search Tree. Divide the k-dim space to regions dimension by dimension. 2.4.3.2 Algorithm 2.4.3.2.1 Build build ( set P , depth ) : if P . size == 1 : // base return createLeaf ( P ) else : root = createKdNode () root -> splitDirection = dimension [ depth % k ] root -> splitLine = FindMedian ( root -> splitDirection , P ) // nth_element; Complexity: O(n) P1 , P2 = Divide ( P , root -> splitDirection , root -> splitLine ) root -> lChild = buildKdTree ( P1 , d + 1 ) root -> rChild = buildKdTree ( P2 , d + 1 ) return root Time: \\(T(n) = 2*T(\\frac{n}{2}) + O(n) \\Rightarrow T(n) = O(nlogn)\\) Storage: \\(1 + 2 + ... + O(2^{logn}) = O(n)\\) Bounding box Optimization : 2.4.3.2.2 Query - KdSearch(v, R) Search starts at v; query range is R Key idea: Recurse in when there's intersection. Report it when it is enclosed. kdSearch ( v , R ) : if v is leaf : if v in R : report ( v ) if v -> lChild in R : reportSubtree ( v -> lChild ) else if v -> lChild have intersection with R : kdSearch ( v -> lChild , R ) if v -> rChild in R : reportSubtree ( v -> lChild ) else if v -> rChild have intersection with R : kdSearch ( v -> rChild , R ) Time: No more than 2 of the 4 grandchildren of each node will recurse! \\(Q(n) = 2 + 2Q(n/4), Q(1) = O(1) \\Rightarrow Q(n) = O(\\sqrt{n})\\) Report + Search: \\(O(r + \\sqrt{n})\\) 2.5 Multi-Level Search Tree 2.5.1 Data Structure 2.5.2 Construct 2.5.3 Query 2.6 Range Tree 2.7 Interval Tree Application: Stabbing Query. Which intervals enclose the given point? 2.7.1 Data Structure 2.7.2 Construction \\(O(nlogn)\\) Node { Node * leftChild Node * rightChild mid_point starts = list of intervals overlapping mid_point sorted by left endpoints ends = list of intervals overlapping mid_point sorted by right endpoints } Sort the intervals by two approaches : begin points increasing end points decreasing ConstructIntervalTree ( vector < Interval > intervals ) : if intervals . size == 0 : return nullptr Node node vector < Num > P = endpoints of intervals // P.size = 2 * intervals.size node . mid_point = median in P left_intervals , right_intervals for interval in intervals : if interval is on the left of mid_point : left_intervals += interval else if interval is on the right of mid_point : right_intervals += interval else : // overlapping node . starts += interval , node . ends += interval sort node . starts increasingly by left endpoints sort node . ends decreasingly by right endpoints node . leftChild = ConstructIntervalTree ( left_intervals ) node . rightChild = ConstructIntervalTree ( right_intervals ) return node 2.7.3 Query \\(O(r+logn)\\) queryIntervalTree ( Node v , Num q ) : if ( ! v ) return if q < v . mid_point : // report intervals in v.intervals overlapping q for interval in v . starts : if interval . start <= q : report interval else : break queryIntervalTree ( v . leftChild , q ) else if v . mid_point < q : // report intervals in v.intervals overlapping q for interval in v . ends : if q <= interval . end : report interval else : break queryIntervalTree ( v . rightChild , q ) else : report v . intervals 2.8 Segment Tree 2.8.1 Data Structure 2.8.2 2.8.3 Construction Segment tree can be derived from complete binary tree. 2.8.3.1 Determine the Elementary Intervals Given some intervals, we use \"cursors\" or partitions to determine the elementary intervals(EI). A cursor can be regarded as a partition which splits a pair of continuous number, like: \\(5 | 6\\) . From an interval \\([x_1, y_1]\\) , we get a pair of cursors \\(c_1 = x_1 - 1, c_2 = y_1\\) . Compared to endpoints of an interval, cursors can be placed at the left or the right of a number, which distinguishes whether a number is used as a beginning points or an ending points. That's the advantage that matters! Then, we use sorted and deduplicated cursors to construct EIs. PreProcessing : get the cursors from intervals // the number of cursors: O(2n) sort the cursors // O(nlogn) deduplicate the cursors // O(n) for each cursor c [ i ] ( 0 <= i <= number of cursors - 1 ) : // the number of EIs: O(2n) = O(n) get an EI = [ c [ i ] + 1 , c [ i + 1 ] ] 2.8.3.2 Build the Segment Tree BuildSegmentTree ( current node , subset of sorted EIs ) : // O(n) range of current node = range of EIs if EIs . size == 1 : return else : BuildSegmentTree ( left child of current node , EIs [ 0 : medians ]) BuildSegmentTree ( right child of current node , EIs [ medians : ]) Total costs of building: \\(O(nlogn)\\) 2.8.4 Insert Intervals InsertSegmentTree ( current node , interval ) : if interval encloses range of the node : store the interval at current node else : if interval have intersection with range of the left child of current node : InsertSegmentTree ( left child , interval ) if interval have intersection with range of the right child of current node : InsertSegmentTree ( right child , interval ) When running InsertSegmentTree, at each level, less than 4 nodes are visited (2 stores + 2 recursions). \\(\\Rightarrow O(logn)\\) 2.8.5 Query QuerySegmentTree ( current node , interval ) : if interval have no intersections with range of current node : return if interval encloses range of current node : report all intervals stored in the current node if current node is a leaf : return if interval have intersection with range of the left child of current node : QuerySegmentTree ( left child , interval ) if interval have intersection with range of the right child of current node : QuerySegmentTree ( right child , interval ) When querying a point (degraded interval), only 1 node is visited per level, altogether \\(O(logn)\\) nodes. Total: \\(O(r + logn)\\) 2.9 Dictionary - Unordered Map - Hash Map 2.9.1 Hash Function 2.9.1.1 From Mod to MAD hash(key) = (a * key + b) % M , where M is prime. 2.9.1.2 Polynomial: string -> int 3. Algorithms 3.1 ToLeft Use cross product to judge whether a point is located at the left of a line. Line: A(x1, y1) -> B(x2, y2) Point: C(x3, y3) Calculate \\(\\overrightarrow{AB} \\times \\overrightarrow{AC}\\) // Cross product on two vectors long long crossProduct ( const long long & x1 , const long long & y1 , const long long & x2 , const long long & y2 ) { // (x1, y1) X (x2, y2) return x1 * y2 - y1 * x2 ; } The codes above are based on the following theorem: \\[(x_1, y_1, z_1) \\times (x_2, y_2, z_2) =\\begin{vmatrix} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x_1 & y_1 & z_1 \\\\ x_2 & y_2 & z_2 \\end{vmatrix} = (y_1 z_2 - y_2 z_1)\\boldsymbol{i} - (x_1 z_2 - x_2 z_1)\\boldsymbol{j} + (x_1 y_2 - x_2 y_1)\\boldsymbol{k}\\] 3.2 Bi-Connected Components Articulation Point: cut-vertex Bi-connected graph: graph without any Articulation Point \\(\\Rightarrow\\) at least two ways between any two points ??? Bi-connected components: maximal bi-connected graph; Any connected graph decomposes into a tree of biconnected components . 3.2.1 Algorithm via DFS 4. Complexity Analysis 4.1 Lower Bound 4.1.1 Algebratic Decision Tree 4.1.1.1 Comparison Tree","title":"DSA01"},{"location":"C%2B%2B/DSA01/#dsa01","text":"","title":"DSA01"},{"location":"C%2B%2B/DSA01/#1-tricks","text":"","title":"1. Tricks"},{"location":"C%2B%2B/DSA01/#11-io","text":"inline char nchar () { // read a large amount of char to speed up reading // the codes below are widely spread and applied so the author is uncertain static const int bufl = 1 << 22 ; static char buf [ bufl ], * a , * b ; return a == b && ( b = ( a = buf ) + fread ( buf , 1 , bufl , stdin ), a == b ) ? EOF : * a ++ ; } template < class T > inline T getnum () { // read numbers of type T based on nchar() T x = 0 ; bool f = 1 ; char c = nchar (); for (; ! isdigit ( c ); c = nchar ()) if ( c == '-' ) f = 0 ; for (; isdigit ( c ); c = nchar ()) x = x * 10 + c - 48 ; return f ? x : - x ; } Disable the synchronization between C++ streams and standard C stream to speed up C++ streams. std :: ios :: sync_with_stdio ( false );","title":"1.1 IO"},{"location":"C%2B%2B/DSA01/#12-gprof-performance-analysis-tool","text":"g++ main.cpp -o main -pg # use \"-pg\" compiler options ./main gprof ./main > report.txt P.S. clang: error: the clang compiler does not support -pg option on versions of OS X 10 .9 and later","title":"1.2 Gprof - Performance Analysis Tool"},{"location":"C%2B%2B/DSA01/#13-timespec","text":"timespec start , end ; clock_gettime ( CLOCK_MONOTONIC , & start ); // ... clock_gettime ( CLOCK_MONOTONIC , & end ); double deltaT = ( end . tv_sec - start . tv_sec ) * 1e3 + ( end . tv_nsec - start . tv_nsec ) * 1e-6 ; //\u8ba1\u7b97\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3ams","title":"1.3 Timespec"},{"location":"C%2B%2B/DSA01/#2-data-structure","text":"","title":"2. Data Structure"},{"location":"C%2B%2B/DSA01/#21-complete-binary-tree","text":"Complete binary tree can be stored as an array.","title":"2.1 Complete Binary Tree"},{"location":"C%2B%2B/DSA01/#211-construction","text":"CAUTION : A complete tree with n leaves need an array with \"_size\" to store. \\(\\_size = 2 * bottomSize - 1, bottomSize = 2^{min(k)}\\) where \\(2^k \\geq n, k \\in N\\) .","title":"2.1.1 Construction"},{"location":"C%2B%2B/DSA01/#212-visit","text":"Given a node with index i, leftChild = 2 * i + 1, rightChild = 2 * i + 2.","title":"2.1.2 Visit"},{"location":"C%2B%2B/DSA01/#22-binary-search-tree","text":"left springs <= node <= right springs inorder tranversal sequence: non-decreasing","title":"2.2 Binary Search Tree"},{"location":"C%2B%2B/DSA01/#23-balanced-bst","text":"","title":"2.3 Balanced BST"},{"location":"C%2B%2B/DSA01/#24-kd-tree","text":"","title":"2.4 KD-Tree"},{"location":"C%2B%2B/DSA01/#241-requirements","text":"","title":"2.4.1 Requirements"},{"location":"C%2B%2B/DSA01/#2411-1d-range-query","text":"Count the number of points belong to I = (x1, x2] among P = { p1, ... pn } (or to report the points of \\(I \\cap P\\) ). We're not satisfied by \\(O(n)\\) ! It can be solved by binary search on a sorted ( \\(O(nlogn)\\) ) vector or array. For each query, the complexity is \\(O(logn + r)\\) .","title":"2.4.1.1 1D Range Query"},{"location":"C%2B%2B/DSA01/#2412-2d-range-query","text":"For higher dimension occasions, the binary search doesn't work. Somebody may consider performing binary search on each dimension one by one. But , the complexity can be very bad. (You may select nearly n points when searching on the first dimension. However, when it comes to the 2nd dimension, the remained points may be r << n . But your complexity is \\(O(n)\\) , which is expensive for r.) So we need an advanced DS, 2D-Tree.","title":"2.4.1.2 2D Range Query"},{"location":"C%2B%2B/DSA01/#242-1d-tree","text":"","title":"2.4.2 1D-Tree"},{"location":"C%2B%2B/DSA01/#2421-data-structure","text":"A balanced binary search tree. Input data are stored in leaves. Inside nodes store the maximum value in the left child tree.","title":"2.4.2.1 Data Structure"},{"location":"C%2B%2B/DSA01/#2422-query-algorithm","text":"Search(x): returns the maximum key not greater than x Lowest Common Ancestor : LCA(x, y) = sub_root Report the points inside [x, y]: Starting from LCA : Go to x ( by turn left as much as possible ) : Ignore turning right ; For each turning left , report the right subtree ; Go to y ( by turn right as much as possible ) : Ignore turning left ; ss For each turning right , report the left subtree ;","title":"2.4.2.2 Query Algorithm"},{"location":"C%2B%2B/DSA01/#2423-complexity","text":"Preprocessing: \\(O(nlogn)\\) ; Storage: \\(O(n)\\) ; Query: \\(O(logn)\\) ;","title":"2.4.2.3 Complexity"},{"location":"C%2B%2B/DSA01/#243-2d-tree","text":"","title":"2.4.3 2D-Tree"},{"location":"C%2B%2B/DSA01/#2431-data-structure","text":"Balanced Binary Search Tree. Divide the k-dim space to regions dimension by dimension.","title":"2.4.3.1 Data Structure"},{"location":"C%2B%2B/DSA01/#2432-algorithm","text":"","title":"2.4.3.2 Algorithm"},{"location":"C%2B%2B/DSA01/#24321-build","text":"build ( set P , depth ) : if P . size == 1 : // base return createLeaf ( P ) else : root = createKdNode () root -> splitDirection = dimension [ depth % k ] root -> splitLine = FindMedian ( root -> splitDirection , P ) // nth_element; Complexity: O(n) P1 , P2 = Divide ( P , root -> splitDirection , root -> splitLine ) root -> lChild = buildKdTree ( P1 , d + 1 ) root -> rChild = buildKdTree ( P2 , d + 1 ) return root Time: \\(T(n) = 2*T(\\frac{n}{2}) + O(n) \\Rightarrow T(n) = O(nlogn)\\) Storage: \\(1 + 2 + ... + O(2^{logn}) = O(n)\\) Bounding box Optimization :","title":"2.4.3.2.1 Build"},{"location":"C%2B%2B/DSA01/#24322-query-kdsearchv-r","text":"Search starts at v; query range is R Key idea: Recurse in when there's intersection. Report it when it is enclosed. kdSearch ( v , R ) : if v is leaf : if v in R : report ( v ) if v -> lChild in R : reportSubtree ( v -> lChild ) else if v -> lChild have intersection with R : kdSearch ( v -> lChild , R ) if v -> rChild in R : reportSubtree ( v -> lChild ) else if v -> rChild have intersection with R : kdSearch ( v -> rChild , R ) Time: No more than 2 of the 4 grandchildren of each node will recurse! \\(Q(n) = 2 + 2Q(n/4), Q(1) = O(1) \\Rightarrow Q(n) = O(\\sqrt{n})\\) Report + Search: \\(O(r + \\sqrt{n})\\)","title":"2.4.3.2.2 Query - KdSearch(v, R)"},{"location":"C%2B%2B/DSA01/#25-multi-level-search-tree","text":"","title":"2.5 Multi-Level Search Tree"},{"location":"C%2B%2B/DSA01/#251-data-structure","text":"","title":"2.5.1 Data Structure"},{"location":"C%2B%2B/DSA01/#252-construct","text":"","title":"2.5.2 Construct"},{"location":"C%2B%2B/DSA01/#253-query","text":"","title":"2.5.3 Query"},{"location":"C%2B%2B/DSA01/#26-range-tree","text":"","title":"2.6 Range Tree"},{"location":"C%2B%2B/DSA01/#27-interval-tree","text":"Application: Stabbing Query. Which intervals enclose the given point?","title":"2.7 Interval Tree"},{"location":"C%2B%2B/DSA01/#271-data-structure","text":"","title":"2.7.1 Data Structure"},{"location":"C%2B%2B/DSA01/#272-construction","text":"\\(O(nlogn)\\) Node { Node * leftChild Node * rightChild mid_point starts = list of intervals overlapping mid_point sorted by left endpoints ends = list of intervals overlapping mid_point sorted by right endpoints } Sort the intervals by two approaches : begin points increasing end points decreasing ConstructIntervalTree ( vector < Interval > intervals ) : if intervals . size == 0 : return nullptr Node node vector < Num > P = endpoints of intervals // P.size = 2 * intervals.size node . mid_point = median in P left_intervals , right_intervals for interval in intervals : if interval is on the left of mid_point : left_intervals += interval else if interval is on the right of mid_point : right_intervals += interval else : // overlapping node . starts += interval , node . ends += interval sort node . starts increasingly by left endpoints sort node . ends decreasingly by right endpoints node . leftChild = ConstructIntervalTree ( left_intervals ) node . rightChild = ConstructIntervalTree ( right_intervals ) return node","title":"2.7.2 Construction"},{"location":"C%2B%2B/DSA01/#273-query","text":"\\(O(r+logn)\\) queryIntervalTree ( Node v , Num q ) : if ( ! v ) return if q < v . mid_point : // report intervals in v.intervals overlapping q for interval in v . starts : if interval . start <= q : report interval else : break queryIntervalTree ( v . leftChild , q ) else if v . mid_point < q : // report intervals in v.intervals overlapping q for interval in v . ends : if q <= interval . end : report interval else : break queryIntervalTree ( v . rightChild , q ) else : report v . intervals","title":"2.7.3 Query"},{"location":"C%2B%2B/DSA01/#28-segment-tree","text":"","title":"2.8 Segment Tree"},{"location":"C%2B%2B/DSA01/#281-data-structure","text":"","title":"2.8.1 Data Structure"},{"location":"C%2B%2B/DSA01/#282","text":"","title":"2.8.2"},{"location":"C%2B%2B/DSA01/#283-construction","text":"Segment tree can be derived from complete binary tree.","title":"2.8.3 Construction"},{"location":"C%2B%2B/DSA01/#2831-determine-the-elementary-intervals","text":"Given some intervals, we use \"cursors\" or partitions to determine the elementary intervals(EI). A cursor can be regarded as a partition which splits a pair of continuous number, like: \\(5 | 6\\) . From an interval \\([x_1, y_1]\\) , we get a pair of cursors \\(c_1 = x_1 - 1, c_2 = y_1\\) . Compared to endpoints of an interval, cursors can be placed at the left or the right of a number, which distinguishes whether a number is used as a beginning points or an ending points. That's the advantage that matters! Then, we use sorted and deduplicated cursors to construct EIs. PreProcessing : get the cursors from intervals // the number of cursors: O(2n) sort the cursors // O(nlogn) deduplicate the cursors // O(n) for each cursor c [ i ] ( 0 <= i <= number of cursors - 1 ) : // the number of EIs: O(2n) = O(n) get an EI = [ c [ i ] + 1 , c [ i + 1 ] ]","title":"2.8.3.1 Determine the Elementary Intervals"},{"location":"C%2B%2B/DSA01/#2832-build-the-segment-tree","text":"BuildSegmentTree ( current node , subset of sorted EIs ) : // O(n) range of current node = range of EIs if EIs . size == 1 : return else : BuildSegmentTree ( left child of current node , EIs [ 0 : medians ]) BuildSegmentTree ( right child of current node , EIs [ medians : ]) Total costs of building: \\(O(nlogn)\\)","title":"2.8.3.2 Build the Segment Tree"},{"location":"C%2B%2B/DSA01/#284-insert-intervals","text":"InsertSegmentTree ( current node , interval ) : if interval encloses range of the node : store the interval at current node else : if interval have intersection with range of the left child of current node : InsertSegmentTree ( left child , interval ) if interval have intersection with range of the right child of current node : InsertSegmentTree ( right child , interval ) When running InsertSegmentTree, at each level, less than 4 nodes are visited (2 stores + 2 recursions). \\(\\Rightarrow O(logn)\\)","title":"2.8.4 Insert Intervals"},{"location":"C%2B%2B/DSA01/#285-query","text":"QuerySegmentTree ( current node , interval ) : if interval have no intersections with range of current node : return if interval encloses range of current node : report all intervals stored in the current node if current node is a leaf : return if interval have intersection with range of the left child of current node : QuerySegmentTree ( left child , interval ) if interval have intersection with range of the right child of current node : QuerySegmentTree ( right child , interval ) When querying a point (degraded interval), only 1 node is visited per level, altogether \\(O(logn)\\) nodes. Total: \\(O(r + logn)\\)","title":"2.8.5 Query"},{"location":"C%2B%2B/DSA01/#29-dictionary-unordered-map-hash-map","text":"","title":"2.9 Dictionary - Unordered Map - Hash Map"},{"location":"C%2B%2B/DSA01/#291-hash-function","text":"","title":"2.9.1 Hash Function"},{"location":"C%2B%2B/DSA01/#2911-from-mod-to-mad","text":"hash(key) = (a * key + b) % M , where M is prime.","title":"2.9.1.1 From Mod to MAD"},{"location":"C%2B%2B/DSA01/#2912-polynomial-string-int","text":"","title":"2.9.1.2 Polynomial: string -&gt; int"},{"location":"C%2B%2B/DSA01/#3-algorithms","text":"","title":"3. Algorithms"},{"location":"C%2B%2B/DSA01/#31-toleft","text":"Use cross product to judge whether a point is located at the left of a line. Line: A(x1, y1) -> B(x2, y2) Point: C(x3, y3) Calculate \\(\\overrightarrow{AB} \\times \\overrightarrow{AC}\\) // Cross product on two vectors long long crossProduct ( const long long & x1 , const long long & y1 , const long long & x2 , const long long & y2 ) { // (x1, y1) X (x2, y2) return x1 * y2 - y1 * x2 ; } The codes above are based on the following theorem: \\[(x_1, y_1, z_1) \\times (x_2, y_2, z_2) =\\begin{vmatrix} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x_1 & y_1 & z_1 \\\\ x_2 & y_2 & z_2 \\end{vmatrix} = (y_1 z_2 - y_2 z_1)\\boldsymbol{i} - (x_1 z_2 - x_2 z_1)\\boldsymbol{j} + (x_1 y_2 - x_2 y_1)\\boldsymbol{k}\\]","title":"3.1 ToLeft"},{"location":"C%2B%2B/DSA01/#32-bi-connected-components","text":"Articulation Point: cut-vertex Bi-connected graph: graph without any Articulation Point \\(\\Rightarrow\\) at least two ways between any two points ??? Bi-connected components: maximal bi-connected graph; Any connected graph decomposes into a tree of biconnected components .","title":"3.2 Bi-Connected Components"},{"location":"C%2B%2B/DSA01/#321-algorithm-via-dfs","text":"","title":"3.2.1 Algorithm via DFS"},{"location":"C%2B%2B/DSA01/#4-complexity-analysis","text":"","title":"4. Complexity Analysis"},{"location":"C%2B%2B/DSA01/#41-lower-bound","text":"","title":"4.1 Lower Bound"},{"location":"C%2B%2B/DSA01/#411-algebratic-decision-tree","text":"","title":"4.1.1 Algebratic Decision Tree"},{"location":"C%2B%2B/DSA01/#4111-comparison-tree","text":"","title":"4.1.1.1 Comparison Tree"},{"location":"C%2B%2B/oop/","text":"OOP Notes for exam 1. \u57fa\u672c\u5199\u6cd5 1.1 Makefile \u5e38\u89c4\u7248\uff1a all : test # \u53ea\u8f93\u5165make\u5b83\u5c31\u627e\u7b2c\u4e00\u4e2a test : product . o sum . o main . o functions . h g++ product.o sum.o main.o -o test # specify the name of the output product.o : product . cpp functions . h g++ -c product.cpp -o product.o # -c\u8868\u793a\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5 sum.o : sum . cpp functions . h g++ -c sum.cpp -o sum.o main.o : main . cpp functions . h g++ -c main.cpp -o main.o clean : # clean\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u4f9d\u8d56\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6240\u4ee5\u9700\u8981make clean rm *.o test \u6bd4\u8f83\u901a\u7528\u7684\u7248\u672c\uff1a #################################### # Learnt from Internet # Edited by Colin # 2020.02 #################################### cc = g++ FLAG = DEF = CXXFLAGS = -std = c++17 -O3 prom = main deps = $( shell find . -maxdepth 10 -name \"*.h\" -or -name \"*.hpp\" ) src = $( shell find . -maxdepth 10 -name \"*.cpp\" ) obj = $( src:%.cpp = %.o ) $(prom) : $( obj ) $( cc ) -o $( prom ) $( obj ) %.o : %. cpp $( cc ) $( CXXFLAGS ) $( FLAG ) $( DEF ) -c $< -o $@ .PHONY : clean clean : rm -rf $( prom ) $( obj ) 1.2 \u7a0b\u5e8f\u547d\u4ee4\u884c\u53c2\u6570 argv \u4f8b\u5b50 int main ( int argc , char ** argv ) // or char*[] argv { int a , b ; a = atoi ( argv [ 1 ]); b = atoi ( argv [ 2 ]); std :: cout << a + b << std :: endl ; return 0 ; } argc\u662f\u53c2\u6570\u7684\u6570\u91cf\uff0c\u7b97\u4e0a\u7a0b\u5e8f\u540dargv[0]\u3002\u904d\u5386argc\u65f6\u6709\u7528\uff0c\u56e0\u4e3aargc\u4e0d\u597d\u77e5\u9053\u6709\u51e0\u4e2a\u3002 argv\u662f\u53c2\u6570\u3002\u7b2cn\u4e2a\u53c2\u6570\u4e3aargv[n]\u3002 1.3 gdb\u8c03\u8bd5 g++ -g a.cpp \u2013o a.out\u7f16\u8bd1\u7a0b\u5e8f gdb a.out \u8c03\u8bd5a.out\u7a0b\u5e8f run \u8fd0\u884c\u7a0b\u5e8f break + \u884c\u53f7 \u8bbe\u7f6e\u65ad\u70b9 break 10 if (k==2) \u53ef\u6839\u636e\u5177\u4f53\u8fd0\u884c\u6761\u4ef6\u65ad\u70b9 delete break 1 \u5220\u96641\u53f7\u65ad\u70b9 watch x \u5f53x\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u6682\u505c continue \u8df3\u81f3\u4e0b\u4e00\u4e2a\u65ad\u70b9 step \u5355\u6b65\u6267\u884c(\u8fdb\u5165) next \u5355\u6b65\u6267\u884c(\u4e0d\u8fdb\u5165) print x \u8f93\u51fa\u53d8\u91cf/\u8868\u8fbe\u5f0fx GDB\u4e2d\u8f93\u5165 p x=1\uff0c\u7a0b\u5e8f\u4e2dx\u7684\u503c\u4f1a\u88ab\u624b\u52a8\u4fee\u6539\u4e3a1 display x \u6301\u7eed\u76d1\u6d4b\u53d8\u91cf/\u8868\u8fbe\u5f0fx list \u5217\u51fa\u7a0b\u5e8f\u6e90\u4ee3\u7801 quit \u9000\u51fa \u56de\u8f66 \u91cd\u590d\u4e0a\u4e00\u6761\u6307\u4ee4 \u6240\u6709\u547d\u4ee4\u90fd\u53ef\u4ee5\u7f29\u5199\u4e3a\u524d\u51e0\u4e2a\u5b57\u6bcd\uff0c\u53ea\u8981\u4fdd\u6301\u552f\u4e00\uff0c\u5982 next \u53ef\u7f29\u5199\u4e3a n \u3002 info break\u770b\u65ad\u70b9\u4fe1\u606f Disp \u5217\u4ee3\u8868\u65ad\u70b9\u88ab\u547d\u4e2d\u540e\uff0c\u8be5\u65ad\u70b9\u4fdd\u7559(keep)\u3001\u5220\u9664(del)\u8fd8\u662f\u5173\u95ed(dis) https://zhuanlan.zhihu.com/p/29468840 1.4 \u51fd\u6570\u91cd\u8f7d overload \u540c\u540d\u3001 \u53c2\u6570\u5fc5\u987b\u4e0d\u540c \u3002\u4f5c\u7528\u57df\u76f8\u540c\u3002\u8fd4\u56de\u503c\u53ef\u76f8\u540c\u4e5f\u53ef\u4e0d\u540c\u3002 \u6839\u636e\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u9645\u53c2\u6570\u51b3\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528 \u3002 \u5c5e\u4e8e\u9759\u6001\u591a\u6001\u3002\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u3002 \u5185\u7f6e\u7c7b\u578b\u8f6c\u6362\uff1a\u5f53\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u7c7b\u578b\u5339\u914d\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u5426\u5219\u624d\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 1.5 auto \u51fd\u6570\u53c2\u6570\u4e0d\u80fd\u662fauto\u7c7b\u578b\u3002 \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570 \u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u58f0\u660e\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e auto func(char* ptr, int val) -> int; 1.6 decltype \u7c7b\u578b\u63a8\u5bfc\u3002 decltype(a) 1.6.1 \u66f4\u9ad8\u7ea7\u7684\u8fd4\u56de\u503c\u63a8\u5bfc\u7528\u6cd5 https://github.com/thu-coai/THUOOP/issues/24 // \u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u7684\u9000\u5316\u7248\u672c int a = 3 ; int & b = a ; double c = 3.14 ; decay_t < decltype ( b ) > ; // int // \u5f97\u5230\u201c\u66f4\u901a\u7528\u7248\u672c\u201d common_type_t < decltype ( b ) > ; // int; \u4e00\u4e2a\u5c31\u76f4\u63a5\u9000\u5316 common_type_t < decltype ( b ), decltype ( c ) > ; // double \u4f8b\u5b50\uff1a // max \u51fd\u6570 template < typename T1 , typename T2 > std :: common_type_t < T1 , T2 > max ( T1 a , T2 b ) { return b < a ? a : b ; } // \u8fd4\u56de\u5bb9\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u503c template < class A > auto work2 ( const A & _array ) -> common_type_t < decltype ( _array . front ()) > { return _array . front (); } // \u4eff\u7167\u6b64\u65b9\u6cd5\u53ef\u4ee5\u628a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5305\u88c5\u8fdb\u6a21\u677f\u7c7b\u518d\u8fd4\u56de template < class A > auto work2 ( const A & _array ) -> MyArray < common_type_t < decltype ( _array . front ()) > > { /* ... */ } 1.7 new & delete delete[] array \u8be6\u7ec6\u8fc7\u7a0b\u89c1PPT L5 P42 1.8 \u907f\u514d\u91cd\u590d\u5305\u542b\u5934\u6587\u4ef6 #ifndef MATRIX_H #define MATRIX_H #endif Or #pragma once \u5bf9\u6bd4\uff1a \u540e\u8005\u6548\u7387\u66f4\u9ad8\u3002 \u539f\u56e0\uff1a \u524d\u8005\u8981\u6bcf\u6b21\u8bfb\u5165\u6574\u4e2a\u6587\u4ef6\u6765\u5904\u7406\uff0c\u540e\u8005\u7b2c\u4e8c\u6b21\u8bfb\u5165\u76f8\u540c\u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u8df3\u8fc7\uff0c \u4e0d\u4f1a\u4ea7\u751ffile IO\u3002 \u4f46\u662f\u5927\u90e8\u5206\u7f16\u8bd1\u5668\u4e5f\u9488\u5bf9\u524d\u8005\u7684\u6548\u7387\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5b9e\u9645\u6548\u7387\u53ef\u80fd\u50cf\u5dee\u4e0d\u591a\u3002 \u540e\u8005\u4ee5\u6765\u6587\u4ef6\u7cfb\u7edf\u7684\u6587\u4ef6\u540d\uff0c\u56e0\u6b64\u5982\u679c\u6709\u7b26\u53f7\u94fe\u63a5/\u4e24\u4e2a\u6587\u4ef6\u5185\u5bb9\u76f8\u540c\uff0c\u5219\u4f1a\u88ab\u5f15\u5165\u4e24\u6b21\u3002 \u524d\u8005\u5728\u6807\u51c6\u5185\uff0c\u540e\u8005\u4e0d\u5728\uff0c\u4f46\u662f\u88ab \u7edd\u5927\u90e8\u5206\u7f16\u8bd1\u5668 \u652f\u6301\u3002 2. operator< bool operator < ( const Computer & _y ) const // const declares that this function would not modify this. { } 2.1 operator++ \u524d\u7f00\uff1a\u76f4\u63a5++ Test & operator ++ () { ++ data ; return * this ; // \u8fd4\u56de\u81ea\u8eab } \u540e\u7f00\uff1a\u54d1\u5143\u53c2\u6570int \u5148\u6784\u9020\u4e00\u4e2a\u539f\u6765\u7684\uff0c\u8fd4\u56de++\u4e4b\u524d\u7684\u3002 Test operator ++ ( int ) { Test test ( data ); ++ data ; return test ; } 2.2 operator[] \u53ef\u7528\u4e8e\u201c\u5b57\u5178\u201d/map\u3002 \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u662f\u5f15\u7528\uff0c\u5219\u6570\u7ec4\u8fd0\u7b97\u7b26\u8c03\u7528\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u5de6\u8fb9\uff0c\u63a5\u53d7\u8d4b\u503c\uff0c\u5373 Obj[index] = value; \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9 Var = Obj[index]; char week_name [ 7 ][ 4 ] = { \"mon\" , \"tu\" , \"wed\" , \"thu\" , \"fri\" , \"sat\" , \"sun\" }; class WeekTemp { int temp [ 7 ]; public : int & operator [] ( const char * name ) // \u5b57\u7b26\u4e32\u4f5c\u4e0b\u6807 { for ( int i = 0 ; i < 7 ; i ++ ) { if ( strcmp ( week_name [ i ], name ) == 0 ) return temp [ i ]; } } }; 2.3 operator<< \u4e3a\u4ec0\u4e48\u91cd\u8f7d\u6d41\u8fd0\u7b97\u7b26\u8981\u8fd4\u56de\u5f15\u7528\uff1f\u907f\u514d\u590d\u5236\u3002 friend istream & operator >> ( istream & in , Test & dst ) { in >> dst . id ; return in ; } friend ostream & operator << ( ostream & out , const Test & src ) { out << src . id << endl ; return out ; } cin >> obj ; cout << obj << endl ; \u9700\u8981\u4f7f\u7528\u53cb\u5143\u51fd\u6570 \u3002\u56e0\u4e3a\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u53c2\u6570this\u3002\u800c\u6d41\u64cd\u4f5c\u7b26\u5de6\u8fb9\u5fc5\u987b\u662f\u6d41\u7c7b\u578b\u3002\u53cb\u5143\u51fd\u6570\u5c31\u6ca1\u6709\u90a3\u4e2athis\uff0c\u6ee1\u8db3\u4e86\u8981\u6c42\u3002 2.4 \u53cb\u5143\u4e0e\u53cb\u5143\u7c7b \u53cb\u5143\u4e0d\u7ee7\u627f\uff01 class Y {}; // Y\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 class A { int data ; // \u79c1\u6709\u6570\u636e\u6210\u5458 enum { a = 100 }; // \u79c1\u6709\u679a\u4e3e\u9879 friend class X ; // \u53cb\u5143\u7c7b\u524d\u7f6e\u58f0\u660e\uff08\u8be6\u7ec6\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 friend Y ; // \u53cb\u5143\u7c7b\u58f0\u660e\uff08\u7b80\u5355\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 (C++11\u8d77) }; class X {}; // X\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 2.5 \u9759\u6001 static \u9759\u6001\u53d8\u91cf\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u53d8\u91cf \u5b9a\u4e49\u793a\u4f8b\uff1astatic int i = 1; \u521d\u59cb\u5316\uff1a\u521d\u6b21\u5b9a\u4e49\u65f6\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5982\u679c\u5b9a\u4e49\u65f6\u4e0d\u521d\u59cb\u5316\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a0 \u9759\u6001\u5c40\u90e8\u53d8\u91cf \u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u5c06\u6301\u7eed\u5230 \u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f \u9759\u6001\u5168\u5c40\u53d8\u91cf \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c \u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u51b2\u7a81 \u9759\u6001\u51fd\u6570\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u51fd\u6570 \u5b9a\u4e49\u793a\u4f8b\uff1astatic int func() {\u2026} \u9759\u6001\u51fd\u6570 \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u51b2\u7a81 2.5.1 \u9759\u6001\u6570\u636e\u6210\u5458\uff08\u9759\u6001\u6210\u5458\u53d8\u91cf\uff09\uff08\u201c\u7c7b\u53d8\u91cf\u201d\uff09 \u5c5e\u4e8e\u6574\u4e2a\u7c7b\uff1b\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5df2\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u9759\u6001\u6570\u636e\u6210\u5458\u5e94\u8be5\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\uff0c\u5728.cpp\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u5728.h\u6587\u4ef6\u4e2d\u540c\u65f6\u5b8c\u6210\u58f0\u660e\u548c\u5b9a\u4e49\uff0c\u94fe\u63a5\u5c06\u65e0\u6cd5\u8fdb\u884c\u3002\u56e0\u4e3a\u53ef\u80fd\u5934\u6587\u4ef6\u88ab\u5305\u542b\u4e86\u591a\u6b21\uff0c\u4ece\u800c\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u3002 test.h\uff1a class Test { public : static int count ; //\u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458\uff1b\u5bf9\u7c7b\u5b9e\u4f8b\u8ba1\u6570\u7528 Test (); ~ Test (); }; test.cpp\uff1a #include \u201cTest.h\u201d int Test :: count = 0 ; //\u5b9a\u4e49\u9759\u6001\u6570\u636e\u6210\u5458\uff08\u8981\u52a0\u4e0a\u7c7b\u578b\uff09 Test :: Test () { count ++ ; } Test ::~ Test () { count -- ; } main.cpp\uff1a #include <iostream> #include \u201cTest.h\u201d using namespace std ; int main () { Test t1 [ 10 ]; cout << \u201c Test # : \u201d << Test :: count << \u201c or \u201d << t1 [ 0 ]. count << endl ; //\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458 } 2.5.2 \u9759\u6001\u6210\u5458\u51fd\u6570 \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\uff0c\u5426\u5219\u76f8\u5f53\u4e8e\u4f7f\u7528\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf static int how_many () { return count ; } cout << Test :: how_many () << endl ; 2.6 \u5f15\u7528 2.6.1 \u5f15\u7528\u4f20\u53c2\u4e0d\u6784\u9020\u4e5f\u4e0d\u6790\u6784 \u7c7b\u6210\u5458\u91cc\u6709\u6307\u9488\u65f6\u6700\u597d\u8fd9\u6837\uff0c\u907f\u514d\u51fd\u6570\u7ed3\u675f\u65f6delete\u4e86\u5f62\u53c2\u91cc\u7684\u6307\u9488\u3002 2.6.2 \u5f15\u7528\u4e0d\u80fd\u6539\u6307\u5411 2.7 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u53c2\u6570\u662f\u8bed\u8a00\u89c4\u5b9a\u7684\uff0c\u662f\u540c\u7c7b\u5bf9\u8c61\u7684\u5e38\u91cf\u5f15\u7528 MyClass(const MyClass& src) {} \u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\uff0c\u5219\u81ea\u52a8\u5408\u6210\uff0c\u91c7\u7528~~\u4f4d\u62f7\u8d1d(Bitcopy)~~\uff0c\u5373\u76f4\u63a5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u7c7b\u7684\u6240\u6709\u6570\u636e\u6210\u5458\u3002 \u88ab\u8c03\u7528\u7684\u4e09\u79cd\u5e38\u89c1\u60c5\u51b5\uff1a 1\u3001\u7528\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u5b9a\u4e49\u53e6\u4e00\u4e2a\u65b0\u7684\u7c7b\u5bf9\u8c61 Test a ; Test c = a ; // \u5e76\u4e0d\u662f\u8c03\u7528\u91cd\u8f7d\u7684\u7b49\u53f7\uff01\uff01\u800c\u662f\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff01 Test b ( a ); 2\u3001\u51fd\u6570\u8c03\u7528\u65f6\u4ee5\u7c7b\u7684\u5bf9\u8c61\u4e3a\u5f62\u53c2 \u51fd\u6570\u8c03\u7528\uff0c\u5f62\u53c2\u4f20\u53c2 Func(Test a) 3\u3001\u51fd\u6570\u8fd4\u56de\u7c7b\u5bf9\u8c61 Test Func(void) \u8fd4\u56de\u503c\u65f6\u6784\u9020\u4e34\u65f6\u5bf9\u8c61 MyClass res = f(a) \u6ca1\u6709RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u4e34\u65f6\u53d8\u91cf\u518d\u7ed9 res \u3002 \u7981\u6b62RVO\u7684\u7f16\u8bd1\u9009\u9879\uff1a -fno-elide-constructors 2.8 \u53f3\u503c\u5f15\u7528 int && e = a + b ; int && j = lvalue ; // NOT allowed \u5de6\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u5de6\u503c\uff0c\u53f3\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u53f3\u503c\u3002 \u5e38\u91cf\u5de6\u503c\u5f15\u7528\u80fd\u4e5f\u7ed1\u5b9a\u53f3\u503c\u3002 const int &e = 3; void ref ( int && x ) { cout << \"right \" << x << endl ; } ref ( 404 ); \u6df7\u6dc6\uff1a\u53f3\u503c\u5f15\u7528\u672c\u8eab\u4e3a\u5de6\u503c\u3002 2.9 \u79fb\u52a8\u6784\u9020\u51fd\u6570 Test ( Test && t ) : buf ( t . buf ) { //\u76f4\u63a5\u590d\u5236\u5730\u5740\uff0c\u907f\u514d\u62f7\u8d1d cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; // \u5c06t.buf\u6539\u4e3anullptr\uff0c\u4f7f\u5176\u4e0d\u518d\u6307\u5411\u539f\u6765\u5185\u5b58\u533a\u57df // \u8fd9\u4e4b\u540et\u5c31\u7528\u4e0d\u4e86\u4e86\uff1b\u5b83\u7684\u5730\u5740\u73b0\u5728\u88ab\u62f7\u8d1d\u76ee\u6807\u5bf9\u8c61\u6240\u6709 } \u7981\u6b62RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u79fb\u52a8\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u518d\u79fb\u52a8\u7ed9\u76ee\u6807\u5bf9\u8c61\u3002 std::move \uff1a\u5c06\u5de6\u503c\u8f6c\u5316\u4e3a\u53f3\u503c move\u51fd\u6570\u672c\u8eab\u4e0d\u5bf9\u5bf9\u8c61\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u4ec5\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u8f6c\u6362\u4e3a\u53f3\u503c\u3002 \u79fb\u52a8\u7684\u5177\u4f53\u64cd\u4f5c\u5728\u79fb\u52a8\u6784\u9020\u51fd\u6570\u5185\u5b9e\u73b0\u3002 Test y = std :: move ( x ); f ( std :: move ( z )); // \u8c03\u7528f\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4f20\u53c2\u7248\u672c // \u6027\u80fd\u66f4\u597d\u7684swap\u51fd\u6570 template < class T > swap ( T & a , T & b ) { T tmp ( std :: move ( a )); a = std :: move ( b ); b = std :: move ( tmp ); } 2.10 \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u8d4b\u503c\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u8981\u662f\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570(non-static member function)\uff0c \u4e0d\u80fd\u662f\u53cb\u5143\u51fd\u6570 \u3002 MyClass & operator = ( const MyClass & right ) { if ( this != & right ) { // \u907f\u514d\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1 // \u5c06right\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u5f53\u524d\u5bf9\u8c61\u4e2d... } return * this ; // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61 } \u6ce8\u610f\u533a\u5206\u4e0b\u9762\u4e24\u79cd\u4ee3\u7801\uff1a // \u5df2\u7ecf\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u8d4b\u503c\uff0c\u8c03\u7528\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 ClassName a ; ClassName b ; a = b ; // a\u672a\u5b9a\u4e49\uff1b\u7528b\u521d\u59cb\u5316a ClassName a = b ; 2.11 \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 Test & operator = ( Test && right ) { if ( this == & right ) // \u907f\u514d\u81ea\u5df1\u7ed9\u81ea\u5df1\uff08\u65e0\u7528\u64cd\u4f5c\uff09 cout << \"same obj! \\n \" ; else { this -> buf = right . buf ; // \u76f4\u63a5\u8d4b\u503c\u5730\u5740 right . buf = nullptr ; // \u539f\u6765\u7684\u7f6e\u7a7a cout << \"operator=(Test&&) called. \\n \u201c; } return * this ; } 2.12 \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\u5fc5\u987b\u6070\u597d\u7528\u4e00\u79cd\u3002 2.12.1 \u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26 // Src -> Dst \u7684\u8f6c\u6362 class Src { public : operator Dst () const { // \u8fd4\u56de\u503c\u7c7b\u578b\u662fDst\uff1b\u5728convert function\u4e2d\u5fc5\u987b\u7701\u7565\u4e0d\u5199 Dst ret ; // ... return ret ; } } 2.13 \u6784\u9020\u51fd\u6570\u8f6c\u6362\u6cd5 class Src ; // \u524d\u7f6e\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728Dst\u4e2d\u8981\u7528\u5230Src\u7c7b class Dst { public : Dst ( const Src & s ) { // cout << \"Dst::Dst(const Src&)\" << endl; } }; 2.13.1 \u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u5982\u679c\u7528explicit\u4fee\u9970\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u6216\u7c7b\u578b\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff0c\u5219\u76f8\u5e94\u7684\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u663e\u5f0f\u5730\u8fdb\u884c\u3002 explicit operator Dst () const ; explicit Dst ( const Src & s ); Dst d1 ( s ); //\u53ef\u4ee5\u6267\u884c\uff0c\u88ab\u8ba4\u4e3a\u662f\u663e\u5f0f\u521d\u59cb\u5316 2.14 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 const_cast\uff0c\u53bb\u9664\u7c7b\u578b\u7684const\u6216volatile\u5c5e\u6027\u3002 static_cast\uff0c\u7c7b\u4f3c\u4e8eC\u98ce\u683c\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u65e0\u6761\u4ef6\u8f6c\u6362\uff0c\u9759\u6001\u7c7b\u578b\u8f6c\u6362\u3002 dynamic_cast\uff0c\u52a8\u6001\u7c7b\u578b\u8f6c\u6362\uff0c\u5982 \u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u4e4b\u95f4 \u7684\u591a\u6001\u7c7b\u578b\u8f6c\u6362\u3002 reinterpret_cast\uff0c\u4ec5\u4ec5\u91cd\u65b0\u89e3\u91ca\u7c7b\u578b\uff0c\u4f46\u6ca1\u6709\u8fdb\u884c\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362\u3002 \u5982\uff1a Dst d2 = static_cast < Dst > ( s ); 2.15 \u7c7b\u7684\u7ec4\u5408 \u6784\u9020\u987a\u5e8f\uff1a\u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u6790\u6784\u987a\u5e8f\uff1a\u4e0e\u6784\u9020\u987a\u5e8f\u76f8\u53cd 2.16 \u7c7b\u7684\u7ee7\u627f class Child : Father {}; // \u9ed8\u8ba4\u4e3aprivate\u7ee7\u627f class Child : public Father {}; class Child : protected Father {}; // \u5f88\u5c11\u88ab\u4f7f\u7528 \u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u53cb\u5143\u51fd\u6570\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u88ab\u7ee7\u627f\uff01 \u5b50\u7c7b\u82e5\u60f3\u8981\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u6210\u5458\u5217\u8868 \u4e2d\u8fdb\u884c\u3002 Derive ( int i ) : Base ( i ) {}; \u7ee7\u627f\u7236\u7c7b\u6784\u9020\u51fd\u6570 Base ( int i ) : data ( i ) {}; using Base :: Base ; ///\u76f8\u5f53\u4e8e Derive(int i):Base(i) {}; // \u5f53\u7236\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4e00\u53e5using\u53ef\u4ee5\u81ea\u52a8\u6784\u9020\u76f8\u5e94\u7684\u591a\u4e2a 2.17 \u91cd\u5199\u9690\u85cf redefining \u76ee\u7684\uff1a\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u51fd\u6570\uff0c\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u7279\u6b8a\u529f\u80fd\u3002 \u5c4f\u853d\u4e86\u57fa\u7c7b\u7684\u6240\u6709\u5176\u5b83\u540c\u540d\u51fd\u6570\u3002 \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u4e0d\u540c \u76f8\u5f53\u4e8e\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u51fd\u6570\u3002\u4e00\u822c\u4e0d\u6d89\u53ca\u865a\u51fd\u6570\u3002 \u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u901a\u8fc7using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u6d3e\u751f\u7c7b\u4e2d\u201c\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u5373\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002 2.18 \u5411\u4e0a\u7c7b\u578b\u8f6c\u6362 \u53ea\u5bf9public\u7ee7\u627f\u6709\u6548\uff0c\u5728\u7ee7\u627f\u56fe\u4e0a\u662f\u4e0a\u5347\u7684\uff1b\u5bf9private\u3001protected\u7ee7\u627f\u65e0\u6548\u3002 2.19 \u865a\u51fd\u6570 \u901a\u8fc7\u57fa\u7c7b \u6307\u9488\u6216\u5f15\u7528 \u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\u65f6\u2026\u2026 virtual int func ( int a ); \u534f\u53d8\uff1a\u6d3e\u751f\u7c7b\uff08\u5b50\u7c7b\uff09\u865a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u548c\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u76f8\u540c \u5b9e\u73b0\u539f\u7406\uff1a\u865a\u51fd\u6570\u8868\u3002\u5728\u6784\u9020\u51fd\u6570\u7684\u5f00\u5934\u63d2\u5165\u4e86\u521d\u59cb\u5316VPTR\u7684\u4ee3\u7801\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u88ab\u8c03\u7528\u7684\u53ea\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u672c\u5730\u7248\u672c\uff0c\u5373\u865a\u673a\u5236\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e0d\u5de5\u4f5c\u3002 \u6790\u6784\u51fd\u6570\u5f80\u5f80\u662f\u865a\u51fd\u6570\u3002 \u865a\u673a\u5236\u5728\u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u4e0d\u5de5\u4f5c\u3002 \u91cd\u8981\u539f\u5219\uff1a \u603b\u662f\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bbe\u7f6e\u4e3a\u865a\u6790\u6784\u51fd\u6570 2.20 \u91cd\u5199\u8986\u76d6 override \u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\uff0c \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u4e00\u822c\u60c5\u51b5\u5e94\u76f8\u540c \u3002 \u5c4f\u853d\u4e86\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u51fd\u6570\u3002 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u3002\u665a\u6346\u7ed1\uff08\u53ea\u5bf9\u865a\u51fd\u6570\u8d77\u4f5c\u7528\uff09\u3002 // in Father virtual void f ( int a ) {} // in Child virtual void f ( int a ) override {} // final \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u865a\u51fd\u6570\u4e0d\u80fd\u88ab\u540e\u7eed\u5b50\u7c7boverride virtual void f ( int a ) final {} \u4f7f\u7528const\u4fee\u9970\u6210\u5458\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u91cd\u5199\u8986\u76d6\u5931\u6548 2.21 \u62bd\u8c61\u7c7b\u4e0e\u7eaf\u865a\u51fd\u6570 \u7eaf\u865a\u51fd\u6570\u7684\u58f0\u660e\uff1a virtual int f ( int a ) = 0 ; // \u5728\u7c7b\u5916\u5b9a\u4e49\u51fd\u6570\uff0c\u63d0\u4f9b\u5b9e\u73b0 int MyClass :: f ( int a ) { return 1 ; } \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u5c31\u662f \u62bd\u8c61\u7c7b \u3002\u4f5c\u7528\u65f6\u63d0\u4f9b\u63a5\u53e3\u3002 \u62bd\u8c61\u7c7b\u4e0d\u80fd\u5b9a\u4e49\u5bf9\u8c61\uff01\uff01\uff08\u5373\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002\uff09 \u7eaf\u865a\u51fd\u6570\u88aboverride\u4e4b\u524d\u8fd8\u662f\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u88ab\u5168\u90e8\u5b9e\u73b0\uff08\u9664\u4e86\u7eaf\u865a\u6790\u6784\u51fd\u6570\uff09\uff0c\u5219\u5176\u5b50\u7c7b\u8fd8\u662f\u62bd\u8c61\u7c7b\uff0c\u8fd8\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002 \u7eaf\u865a\u6790\u6784\u51fd\u6570 \u4ecd\u7136\u9700\u8981\u51fd\u6570\u4f53\u3002 \u76ee\u7684\uff1a\u4f7f\u57fa\u7c7b\u6210\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u57fa\u7c7b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6709\u5176\u4ed6\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u6790\u6784\u51fd\u6570\u4e0d\u5fc5\u662f\u7eaf\u865a\u7684\u3002 2.22 \u5411\u4e0b\u7c7b\u578b\u8f6c\u6362 dynamic_cast SrcClass * p1 ; TargetClass * p2 = dynamic_cast < TargetClass *> ( p1 ); Father * p1 ; Child * p2 = dynamic_cast < Child *> ( p1 ); 2.23 \u6a21\u677f template \u6a21\u677f\u53c2\u6570\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u3002\u56e0\u6b64\u4e0d\u80fd\u4e3a\u53d8\u91cf\uff0c\u53ea\u80fd\u662f\u5e38\u91cf\u3002\u9759\u591a\u6001\u3002 \u51fd\u6570\u6a21\u677f template < typename T > // template <class T> T sum ( T a , T b ) { return a + b ; } // \u6307\u5b9a\u8c03\u7528\u7c7b\u578b sum < int > ( 9 , 2.1 ); \u7c7b\u6a21\u677f template < typename T > class A { T data ; public : void print (); template < typename T1 > T1 get (); }; //\u7c7b\u5916\u5b9a\u4e49\u7c7b\u6a21\u677f\u4e2d\u7684\u6210\u5458\u51fd\u6570 template < typename T > void A < T >:: print () {} // \u201c\u53cc\u91cd\u6a21\u677f\u201d template < typename T > template < typename T1 > T1 A < T >:: get () {} A < int > a ; \u7c7b\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 template < typename T , unsigned size > class Array { T data [ size ]; public : void print (); }; A < int , 10 > a ; 2.23.1 \u4f20\u9012\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u666e\u901a\u6570\u7ec4\uff1b\u628a\u5927\u5c0f\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570n\uff1b\u6ce8\u610f\u7b26\u53f7\u201c&\u201d\u3002 template < class A , int n > void work ( const A ( & _array )[ n ]) { } // call the function double arr = { 0 , 1 , 2 }; work ( arr ); 2.24 \u591a\u7ebf\u7a0b thread void test ( int seconds ) { this_thread :: sleep_for ( chrono :: seconds ( seconds )); } int main () { thread t_nothing ; // \u521b\u5efa\u4e00\u4e2a\u7a7athread thread t1 ( test , 3 ); // \u521b\u5efa\u4e00\u4e2athread thread t2 ( test , 2 ); // thread \u521b\u5efa\u4e4b\u540e\u5230\u9500\u6bc1\u4e4b\u524d\uff0c\u5fc5\u987b\u51b3\u5b9ajoin\u8fd8\u662fdetach t1 . join (); t2 . detach (); // \u529f\u80fd\u6027\u63a5\u53e3 this_thread :: get_id (); this_thread :: sleep_for (); this_thread :: sleep_until (); this_thread :: yield (); return 0 ; } 2.25 \u4e3b\u4ece\u6a21\u5f0f #include <iostream> #include <cmath> #include <vector> #include <thread> using namespace std ; thread * threads [ 4 ]; // \u7ebf\u7a0b\u6307\u9488 int thread_total [ 4 ]; //\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8ba1\u6570\u5668 int total = 0 , mi , mx ; //\u603b\u8ba1\u6570\u5668 bool check_num ( int num ) { /* ... */ } //\u679a\u4e3e\u662f\u5426\u4e3a\u7d20\u6570 //\u7edf\u8ba1[l,r)\u4e4b\u95f4\u7684\u7d20\u6570\u4e2a\u6570 //\u5b58\u5165thread_total[num]\u4e2d void check ( int l , int r , int num ) { thread_total [ num ] = 0 ; for ( int i = l ; i < r ; i ++ ) if ( check_num ( i )) thread_total [ num ] ++ ; } int main () { mi = 1 ; for ( int i = 0 ; i < 4 ; i ++ ) { // \u7528\u5faa\u73af\u521b\u5efa\u7ebf\u7a0b mx = mi + 5000000 / 4 ; if ( mx > 5000000 ) mx = 5000000 ; //\u4e3a\u7b2ci\u4e2a\u7ebf\u7a0b\u5206\u914d[mi,mx)\u533a\u95f4\u7684\u4efb\u52a1 threads [ i ] = new thread ( check , mi , mx , i ); mi = mx ; } //\u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6240\u6709\u5b50\u7ebf\u7a0b\u5b8c\u6210\u7edf\u8ba1 for ( int i = 0 ; i < 4 ; i ++ ) threads [ i ] -> join (); //\u6c47\u603b\u5b50\u7ebf\u7a0b\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u91ca\u653ethread\u5b9e\u4f8b for ( int i = 0 ; i < 4 ; i ++ ) { total += thread_total [ i ]; delete threads [ i ]; } //\u8f93\u51fa cout << total << endl ; return 0 ; } 2.26 \u4e92\u65a5\u9501\u6a21\u5f0f mutex static mutex exclusive ; // \u4e92\u65a5\u91cf void check_range ( int l , int r ) { int tmp_total = 0 ; for ( int i = l ; i < r ; i ++ ) if ( check_num ( i )) tmp_total ++ ; exclusive . lock (); //\u52a0\u9501 total += tmp_total ; exclusive . unlock (); //\u89e3\u9501 } 2.27 \u5f02\u6b65 async future #include <future> #include <chrono> int worker ( int arg ) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int main () { future < int > fut = async ( worker , 403 ); // auto fut = async(worker, 403); // future\u7684\u63a5\u53e3 fut . wait (); // \u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u7ebf\u7a0b\u7ed3\u675f int res = fut . get (); // get\u8fd0\u884c\u7ed3\u679c\uff1b\u4e00\u4e2afuture\u53ea\u80fd\u88abget\u4e00\u6b21 fut . wait_for ( chrono :: milliseconds ( 100 )); // \u8d85\u65f6\u540e\u8fd4\u56de\u4e00\u4e2afuture_status\uff0c\u5e76\u53d6\u6d88\u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u963b\u585e /* future_status::deferred \u4ecd\u672a\u542f\u52a8 future_status::ready \u7ed3\u679c\u5c31\u7eea future_status::timeout \u5df2\u8d85\u8fc7\u65f6\u9650\uff0c\u5f02\u6b65\u7ebf\u7a0b\u4ecd\u5728\u6267\u884c */ return 0 ; } 2.27.1 \u8f6e\u8be2 int worker ( int arg ) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int input () { /* ... */ } vector < future < int >> future_lists ; // \u5f02\u6b65\u7ebf\u7a0b\u5bf9\u8c61\u8868 vector < int > num_lists ; // \u8f93\u5165\u6570\u636e\u8868 int main () { while ( ture ) { int num = input (); //\u521b\u5efa\u5f02\u6b65\u7ebf\u7a0b future_lists . push_back ( async ( worker , num )); num_lists . push_back ( num ); res_lists . push_back ( 0 ); //\u901a\u8fc7future\u68c0\u6d4b\u6bcf\u4e00\u4e2a\u5f02\u6b65\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210 for ( int i = future_lists . size () - 1 ; i >= 0 ; i -- ) { //\u6bcf\u4e2afuture\u7b49\u5f850.1\u79d2\u6765\u68c0\u6d4b\u72b6\u6001 future_status status = future_lists [ i ]. wait_for ( chrono :: milliseconds ( 100 )); if ( status == future_status :: ready ) // \u5df2\u7ecf\u5f97\u5230\u4e86\u7ed3\u679c { // \u8f93\u51fa\u7ed3\u679c cout << num_lists [ i ] << \" : \" << future_lists [ i ]. get () << endl ; //\u5220\u9664\u5df2\u7ecf\u5b8c\u6210\u4efb\u52a1\u7684future future_lists . erase ( future_lists . begin () + i ); num_lists . erase ( num_lists . begin () + i ); } } return 0 ; } 2.28 promise 2.29 \u51fd\u6570\u6307\u9488 double work ( int & x ); // [\u8fd4\u56de\u503c] (*[\u58f0\u660e\u7684\u53d8\u91cf\u540d])([\u53c2\u6570\u7c7b\u578b\u5217\u8868]) double ( * fp )( int & ) = work ; // \u81ea\u52a8\u63a8\u5bfc auto fp = work ; 2.30 \u51fd\u6570\u5bf9\u8c61 \u7c7b\u7684\u5bf9\u8c61\uff0c\u7528\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u770b\u505a\u51fd\u6570\u5bf9\u8c61\u3002\u672b\u5c3e\u5e26\u62ec\u53f7\u3002 // \u4eff\u7167greater<int>()\u5b9e\u73b0\u51fd\u6570\u5bf9\u8c61 template < class T > class Greater { public : bool operator ()( const T & a , const T & b ) const { // \u91cd\u8f7d()\uff1b\u7528\u4e8e\u6392\u5e8f\u7684cmp\u51fd\u6570\u7684\u7279\u70b9\uff1a\u4e09\u4e2aconst return a > b ; } }; Greater < double > ()( 4.3 , 1.0 ); 2.31 function \u7c7b function\u4e3a\u51fd\u6570\u6307\u9488\u4e0e\u5bf9\u8c61\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3 // function<[\u8fd4\u56de\u503c](\u53c2\u6570\u5217\u8868)> func = f; void process ( function < int () > f1 , function < double ( int ) > f2 ) {} int work1 (); class Work2 { public : double operator ()( int a ) { /* ... */ } }; process ( work1 , Work2 ()); 2.32 \u667a\u80fd\u6307\u9488 #include <memory> 2.32.1 unique_ptr \u72ec\u5360\u3002\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u8be5\u5bf9\u8c61\u3002 unique_ptr < string > p3 ( new string ( \"auto\" )); unique_ptr < string > p4 \uff1b // \u4e0d\u80fd\u518d p4 = p3; // \u8fd9\u6837new\u5b8c\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u8bb0\u5f97\u53bbdelete\u4e86\uff0c\u907f\u514d\u4e86\u5185\u5b58\u6cc4\u6f0f 2.32.2 shared_ptr \u5171\u4eab\u3002\u8ba1\u6570\u3002\u591a\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u76f8\u540c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u548c\u5176\u76f8\u5173 \u8d44\u6e90\u4f1a\u5728\u201c\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u88ab\u9500\u6bc1\u201d\u65f6\u5019\u91ca\u653e \u3002 // \u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u88f8\u6307\u9488\u521d\u59cb\u5316\u591a\u4e2a\u667a\u80fd\u6307\u9488 int * p = new int (); shared_ptr < int > p1 ( p ); shared_ptr < int > p2 ( p ); // \u4f1a\u4ea7\u751f\u591a\u4e2a\u8f85\u52a9\u6307\u9488\uff01 shared_ptr < int > sp ( new int ( 1 )); string * s1 = new string ( \"s1\" ); shared_ptr < string > sp1 ( s1 ); shared_ptr < string > sp2 ; sp2 = sp1 ; cout << sp1 . use_count () << endl ; //\u67e5\u770b\u5f15\u7528\u8ba1\u6570 cout << sp2 . use_count () << endl ; cout << sp1 . unique () << endl ; // \u662f\u5426\u72ec\u5360 cout << sp1 << endl ; // sp1\u4ee3\u8868\u7684\u6307\u9488 cout << sp1 . get () << endl ; // \u540c\u4e0a cout << sp1 << endl ; // \"s1\"\uff1b\u76f8\u5f53\u4e8e*(sp1\u4ee3\u8868\u7684\u6307\u9488)\uff0c\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61 sp1 . reset (); // \u6e05\u9664\u6307\u9488\u5e76\u51cf\u5c11\u5f15\u7528\u8ba1\u6570 // \u667a\u80fd\u6307\u9488\u7684\u5411\u4e0b\u8f6c\u6362 dynamic_pointer_cast < Child > ( p ); 2.32.3 weak_ptr \u5f31\u5f15\u7528 \u6307\u5411\u5bf9\u8c61\uff0c\u4f46\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u3002 shared_ptr < int > sp ( new int ( 3 )); weak_ptr < int > wp1 = sp ; wp . use_count () //\u83b7\u53d6\u5f15\u7528\u8ba1\u6570 wp . reset () //\u6e05\u9664\u6307\u9488 wp . expired () //\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u65e0\u6548 sp = wp . lock () //\u4ece\u5f31\u5f15\u7528\u83b7\u5f97\u4e00\u4e2a\u667a\u80fd\u6307\u9488 2.33 Lambda \u51fd\u6570 [ capture ] ( parameters ) mutable -> return - type { statement } []( int x ) { return x % 2 == 0 ;} // \u5224\u65adx\u662f\u5426\u662f\u5076\u6570 2.34 \u884c\u4e3a\u578b\u6a21\u5f0f \u80fd\u4ee5\u6700\u5c11\u7684\u4ee3\u7801\u53d8\u52a8\u5b8c\u6210\u529f\u80fd\u7684\u589e\u51cf 2.34.1 \u8fed\u4ee3\u5668\u6a21\u5f0f //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public : virtual ~ Iterator () { } virtual Iterator & operator ++ () = 0 ; virtual float & operator ++ ( int ) = 0 ; virtual float & operator * () = 0 ; virtual float * operator -> () = 0 ; virtual bool operator != ( const Iterator & other ) const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; class Collection { public : virtual ~ Collection () { } virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float * _data ; //ArrayCollection\u7684\u6570\u636e int _index ; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public : ArrayIterator ( float * data , int index ) : _data ( data ), _index ( index ) { } ArrayIterator ( const ArrayIterator & other ) : _data ( other . _data ), _index ( other . _index ) { } ~ ArrayIterator () { } Iterator & operator ++ () { _index ++ ; return * this ; } /* Iterator operator++(int) { ArrayIterator ret(*this); _index++; return ret; } */ float & ArrayIterator :: operator ++ ( int ) { _index ++ ; return _data [ _index - 1 ]; } float & operator * () //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c { return * ( _data + _index ); } float * operator -> () { return ( _data + _index ); } bool operator != ( const Iterator & other ) const //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e { return ( _data != (( ArrayIterator * )( & other )) -> _data || _index != (( ArrayIterator * )( & other )) -> _index ); } }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator ; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float * _data ; int _size ; public : ArrayCollection () : _size ( 10 ) { _data = new float [ _size ]; } ArrayCollection ( int size , float * data ) : _size ( size ) { _data = new float [ _size ]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for ( int i = 0 ; i < size ; i ++ ) * ( _data + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] _data ; } int size () { return _size ; } Iterator * begin () const //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator ( _data , 0 ); } Iterator * end () const //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator ( _data , _size ); } }; // in main: float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * collection = new ArrayCollection ( 10 , scores ); Iterator * begin = collection -> begin (); Iterator * end = collection -> end (); int passed = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ++ ; } cout << passed << endl ; // 5 \u5b9a\u4e49\u5b9e\u73b0\u5206\u5f00\u7248\u672c\uff1a //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public : virtual ~ Iterator () { } virtual Iterator & operator ++ () = 0 ; virtual Iterator & operator ++ ( int ) = 0 ; virtual float & operator * () = 0 ; virtual float * operator -> () = 0 ; virtual bool operator != ( const Iterator & other ) const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; class Collection { public : virtual ~ Collection () { } virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float * _data ; //ArrayCollection\u7684\u6570\u636e int _index ; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public : ArrayIterator ( float * data , int index ) : _data ( data ), _index ( index ) { } ArrayIterator ( const ArrayIterator & other ) : _data ( other . _data ), _index ( other . _index ) { } ~ ArrayIterator () { } Iterator & operator ++ (); Iterator & operator ++ ( int ); float & operator * (); float * operator -> (); bool operator != ( const Iterator & other ) const ; }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator ; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float * _data ; int _size ; public : ArrayCollection () : _size ( 10 ){ _data = new float [ _size ]; } ArrayCollection ( int size , float * data ) : _size ( size ) { _data = new float [ _size ]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for ( int i = 0 ; i < size ; i ++ ) * ( _data + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] _data ; } int size () { return _size ; } Iterator * begin () const ; Iterator * end () const ; }; Iterator * ArrayCollection :: begin () const { //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator ( _data , 0 ); } Iterator * ArrayCollection :: end () const { //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator ( _data , _size ); } //\u8fed\u4ee3\u5668\u5404\u79cd\u5185\u5bb9\u7684\u5b9e\u73b0 Iterator & ArrayIterator :: operator ++ () { _index ++ ; return * this ; } //\u56e0\u4e3a\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c06\u7a7a\u95f4\u6307\u9488\u4f4d\u7f6e+1\u5373\u53ef\uff0c\u53ef\u4ee5\u601d\u8003\u4e0b\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8fd4\u56defloat&\uff0c\u800c\u4e0d\u662fIterator /* float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } */ Iterator & ArrayIterator :: operator ++ ( int ) { ArrayIterator ret ( * this ); _index ++ ; return ret ; } //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c float & ArrayIterator :: operator * () { return * ( _data + _index ); } float * ArrayIterator :: operator -> () { return ( _data + _index ); } //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e bool ArrayIterator :: operator != ( const Iterator & other ) const { return ( _data != (( ArrayIterator * )( & other )) -> _data || _index != (( ArrayIterator * )( & other )) -> _index ); } hasNext\u5b9e\u73b0\u6a21\u5f0f\uff1a class Item { public : Item ( const string & strName , const float & price ) : m_name ( strName ), m_price ( price ) {} Item ( const Item & item ) : m_name ( item . m_name ), m_price ( item . m_price ) {} string tostring () { std :: stringstream buffer ; buffer << m_price ; string strPrice = buffer . str (); string strName = m_name + \" :\" ; return strName + strPrice ; } private : string m_name ; float m_price ; }; class Container ; class Menu ; class MenuIterator ; class Iterator { public : virtual ~ Iterator () {} //virtual void first() = 0; virtual void next () = 0 ; virtual bool hasnext () = 0 ; virtual Item * current () = 0 ; protected : Container * m_pContainer ; }; class Container { public : virtual ~ Container () {}; protected : //Observer(){}; }; class Menu : public Container { public : virtual ~ Menu () { for ( int i = 0 ; i < m_items . size (); i ++ ) { delete m_items [ i ]; } } int size () { return m_items . size (); } Item * value ( int nIndex ) { if ( nIndex >= 0 && nIndex < m_items . size ()) { return m_items [ nIndex ]; } else { return NULL ; } } void additem ( Item & item ) { Item * pItem = new Item ( item ); m_items . push_back ( pItem ); } private : friend class MenuIterator ; vector < Item *> m_items ; }; class MenuIterator : public Iterator { Menu * m_menu ; int curpos ; public : MenuIterator ( Menu & a ) : m_menu ( & a ), curpos ( 0 ) {} /*virtual void first() { curpos=0; }*/ virtual void next () { curpos ++ ; } virtual bool hasnext () { if ( curpos >= 0 && curpos < m_menu -> m_items . size ()) return true ; else return false ; } virtual Item * current () { return m_menu -> value ( curpos ); } }; int main () { Item it1 ( \"chicken\" , 10.0 ); Item it2 ( \"Apple\" , 5.0 ); Item it3 ( \"Beaf\" , 20.0 ); Item it4 ( \"soup\" , 15.0 ); Menu menu ; menu . additem ( it1 ); menu . additem ( it2 ); menu . additem ( it3 ); menu . additem ( it4 ); Iterator * iter = new MenuIterator ( menu ); while ( iter -> hasnext ()) { Item * pItem = iter -> current (); if ( pItem ) cout << pItem -> tostring () << endl ; iter -> next (); } } 2.34.2 \u6a21\u677f\u65b9\u6cd5 \u62bd\u8c61\u7236\u7c7b\u5b9a\u4e49\u63a5\u53e3\u3001\u6d41\u7a0b\uff0c\uff08\u6bcf\u79cd\u7ec4\u5408\u7684\uff09\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\u3002\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\u3002 \u62bd\u8c61\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u3002 \u5219\u4e00\u5171\u9700\u8981m*n\u4e2a\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 class AbstractClass { public : virtual void operation1 () = 0 ; virtual void operation2 () = 0 ; void run () { // \u5b9a\u4e49\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b operation1 (); operation2 (); } }; class ConcreteA : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408A public : void operation1 () { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteA::operation1\" << endl ; } void operation2 () { cout << \"ConcreteA::operation2\" << endl ; } }; class ConcreteB : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408B public : void operation1 () { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteB::operation1\" << endl ; } void operation2 () { cout << \"ConcreteB::operation2\" << endl ; } }; AbstractClass * absClass [] = { new ConcreteA (), new ConcreteB () }; for ( auto x : absClass ) { x -> run (); delete x ; } 2.34.3 \u7b56\u7565\u6a21\u5f0f \u62bd\u8c61\u7c7b\u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b\uff0c\u521d\u59cb\u5316\u65f6\u63a5\u6536\u5404\u6b65\u64cd\u4f5c\u7684\u5177\u4f53\u7684\u7b56\u7565\u5b50\u7c7b\u3002 \u7236\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u7b56\u7565\u3002 \u5219\u4e00\u5171\u9700\u8981m+n\u4e2a\u7b56\u7565\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 \u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 class AbstractClass { // \u83b7\u53d6\u4e0d\u540c\u7684\u7b56\u7565\u7c7b\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u7b56\u7565\u6307\u9488 Op1Strategy * op1_strategy ; Op2Strategy * op2_strategy ; public : // \u5404\u4e2a\u7b56\u7565\u7c7b\u7684\u7ec4\u5408 AbstractClass ( Op1Strategy * op1 , Op2Strategy * op2 ) : op1_strategy ( op1 ), op2_strategy ( op2 ) {} // \u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b void run () { op1_strategy -> operate (); // \u6267\u884c\u7b56\u7565 op2_strategy -> operate (); } }; // \u64cd\u4f5c1\u7b56\u7565\u57fa\u7c7b class Op1Strategy { public : virtual void operate () = 0 ; } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b01 class Op1StrategyImpl1 : public Op1Strategy { public : void operate () { cout << \"Operation1 Implementation 1\" << endl ; } } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b02 class Op1StrategyImpl2 : public Op1Strategy { public : void operate () { cout << \"Operation1 Implementation 2\" << endl ; } } // in main: Op1StrategyImpl1 * op1imp1 = new Op1StrategyImpl1 (); Op2StrategyImpl1 * op2imp1 = new Op2StrategyImpl1 (); AbstractClass * solve = new AbstractClass ( op1imp1 , op2imp2 ); solve -> run (); 2.35 \u7ed3\u6784\u578b\u6a21\u5f0f \u80fd\u5728\u7ed3\u6784\u5c42\u9762\u4e0a\u5c3d\u53ef\u80fd\u7684\u89e3\u8026\u5408 2.35.1 \u9002\u914d\u5668\u6a21\u5f0f \u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u7c7b\u53ef\u4ee5\u5728\u7edf\u4e00\u7684\u63a5\u53e3\u73af\u5883\u4e0b\u5de5\u4f5c\u3002 2.35.1.1 \u7ec4\u5408\u9002\u914d //\u5806\u6808\u57fa\u7c7b class Stack { public : virtual ~ Stack () { } virtual bool full () = 0 ; virtual bool empty () = 0 ; virtual void push ( int i ) = 0 ; virtual void pop () = 0 ; virtual int size () = 0 ; virtual int top () = 0 ; } class Vector2Stack : public Stack { private : std :: vector < int > m_data ; //\u5c06vector\u7684\u63a5\u53e3\u7ec4\u5408\u8fdb\u6765\u5b9e\u73b0\u5177\u4f53\u529f\u80fd const int m_size ; public : Vector2Stack ( int size ) : m_size ( size ) { } bool full () { return ( int ) m_data . size () >= m_size ; } //\u6ee1\u6808\u68c0\u6d4b bool empty () { return ( int ) m_data . size () == 0 ; } //\u7a7a\u6808\u68c0\u6d4b void push ( int i ) { m_data . push_back ( i ); } //\u5165\u6808 void pop () { if ( ! empty ()) m_data . pop_back (); } //\u51fa\u6808 int size () { return m_data . size (); } //\u83b7\u53d6\u5806\u6808\u5df2\u7528\u7a7a\u95f4 int top () { //\u83b7\u53d6\u6808\u5934\u5185\u5bb9 if ( ! empty ()) return m_data [ m_data . size () -1 ]; else return INT_MIN ; } }; Vector2Stack stack ( 10 ); 2.35.1.2 \u7ee7\u627f\u9002\u914d //\u76f4\u63a5\u7ee7\u627fvector\u5e76\u6539\u9020\u63a5\u53e3\uff0c\u91c7\u7528\u79c1\u6709\u7ee7\u627f\u53ef\u4ee5\u4f7f\u5f97\u5916\u754c\u53ea\u80fd\u63a5\u89e6\u5230Vector2Stack\u4e2d\u7684\u63a5\u53e3 class Vector2Stack : private std :: vector < int > , public Stack { public : Vector2Stack ( int size ) : vector < int > ( size ) { } bool full () { return false ; } bool empty () { return vector < int >:: empty (); } void push ( int i ) { push_back ( i ); } void pop () { pop_back (); } int size () { return vector < int >:: size (); } int top () { return back (); } }; Vector2Stack stack ( 10 ); 2.35.2 \u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f \u5728\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u5c42\uff0c\u5c06\u590d\u6742\u64cd\u4f5c\u5305\u88f9\u5728\u5185\u90e8\u4e0d\u5bf9\u5916\u90e8\u7c7b\u5f00\u653e\uff0c\u4ec5\u5bf9\u5916\u5f00\u653e\u529f\u80fd\u63a5\u53e3\uff0c\u5373\u53ef\u5b8c\u6210\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd9\u5c31\u662f\u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f\u3002 \u9002\u914d\u5668\u7684\u6838\u5fc3\u8981\u7d20\u662f\u53d8\u6362\u63a5\u53e3\uff0c\u4ee3\u7406\u7684\u6838\u5fc3\u8981\u7d20\u662f\u5206\u5272\u8bbf\u95ee\u5bf9\u8c61\u4e0e\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4ee5\u51cf\u5c11\u8026\u5408\uff0c\u5e76\u80fd \u5728\u4e2d\u95f4\u589e\u52a0\u5404\u79cd\u63a7\u5236\u529f\u80fd \u3002 template < typename T > //\u63d0\u524d\u58f0\u660e\u667a\u80fd\u6307\u9488\u6a21\u677f\u7c7b class SmartPtr ; //\u8f85\u52a9\u6307\u9488\uff0c\u7528\u4e8e\u5b58\u50a8\u6307\u9488\u8ba1\u6570\u4ee5\u53ca\u5c01\u88c5\u5b9e\u9645\u6307\u9488\u5730\u5740 template < typename T > class U_Ptr { private : friend class SmartPtr < T > ; U_Ptr ( T * ptr ) : p ( ptr ), count ( 1 ) { } ~ U_Ptr () { delete p ; } int count ; T * p ; //\u6570\u636e\u5b58\u653e\u5730\u5740 }; template < typename T > //\u667a\u80fd\u6307\u9488 class SmartPtr { private : U_Ptr < T > * rp ; //\u8fdb\u884c\u5b9e\u9645\u6307\u9488\u64cd\u4f5c\u7684\u8f85\u52a9\u6307\u9488 public : SmartPtr ( T * ptr ) : rp ( new U_Ptr < T > ( ptr )) { } //\u8c03\u52a8\u62f7\u8d1d\u6784\u9020\u5373\u589e\u52a0\u5f15\u7528\u8ba1\u6570 SmartPtr ( const SmartPtr < T > & sp ) : rp ( sp . rp ) { ++ rp -> count ; } SmartPtr & operator = ( const SmartPtr < T >& rhs ) { ++ rhs . rp -> count ; //\u8d4b\u503c\u53f7\u540e\u7684\u6307\u9488\u5f15\u7528\u52a01 if ( -- rp -> count == 0 ) delete rp ; //\u539f\u5185\u90e8\u6307\u9488\u5f15\u7528\u51cf1 rp = rhs . rp ; //\u4ee3\u7406\u65b0\u7684\u6307\u9488 return * this ; } ~ SmartPtr () { //\u53ea\u6709\u5f15\u7528\u6b21\u6570\u4e3a0\u624d\u4f1a\u91ca\u653e if ( -- rp -> count == 0 ) delete rp ; } //\u5bf9\u667a\u80fd\u6307\u9488\u64cd\u4f5c\u7b49\u540c\u4e8e\u5bf9\u5185\u90e8\u8f85\u52a9\u6307\u9488\u64cd\u4f5c T & operator * () { return * ( rp -> p ); } T * operator -> () { return rp -> p ; } }; int main ( int argc , char * argv []) { //\u58f0\u660e\u6307\u9488 int * i = new int ( 2 ); //\u4f7f\u7528\u4ee3\u7406\u6765\u5305\u88f9\u6307\u9488 SmartPtr < int > ptr1 ( i ); SmartPtr < int > ptr2 ( ptr1 ); SmartPtr < int > ptr3 = ptr2 ; //\u4e4b\u540e\u7684\u64cd\u4f5c\u5747\u901a\u8fc7\u4ee3\u7406\u8fdb\u884c cout << * ptr1 << endl ; * ptr1 = 20 ; cout << * ptr2 << endl ; return 0 ; } 2.35.3 \u88c5\u9970\u5668\u6a21\u5f0f \u7edf\u4e00\u7ee7\u627f\u81eaComponent\u3002 \u6700\u540e\u662f\u94fe\u5f0f\u8c03\u7528\u3002 #include <iostream> using namespace std ; //\u6240\u6709View\u7684\u57fa\u7c7b class Component { public : virtual ~ Component () { } virtual void draw () = 0 ; }; //\u4e00\u4e2a\u57fa\u672c\u7684TextView\u7c7b class TextView : public Component { public : void draw () { cout << \"TextView.\" << endl ; } }; //\u88c5\u9970\u5668\u7684\u6838\u5fc3\u5185\u6db5\u5728\u4e8e\u7528\u88c5\u9970\u5668\u7c7b\u6574\u4f53\u5305\u88f9\u6539\u52a8\u4e4b\u524d\u7684\u7c7b\uff0c\u4ee5\u4fdd\u7559\u539f\u6765\u7684\u5168\u90e8\u63a5\u53e3 //\u5728\u539f\u6765\u63a5\u53e3\u4fdd\u7559\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u65b0\u529f\u80fd\u6269\u5145 class Decorator : public Component { //\u8fd9\u91cc\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8ba9Decorator\u80fd\u591f\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u4e0d\u65ad\u589e\u52a0\u65b0\u529f\u80fd Component * _component ; public : Decorator ( Component * component ) : _component ( component ) { } virtual void addon () = 0 ; void draw () { addon (); _component -> draw (); } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u8fb9\u6846 class Border : public Decorator { public : Border ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"Bordered \" ; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u6c34\u5e73\u6eda\u52a8\u6761 class HScroll : public Decorator { public : HScroll ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"HScrolled \" ; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u5782\u76f4\u6eda\u52a8\u6761 class VScroll : public Decorator { public : VScroll ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"VScrolled \" ; } }; int main () { //\u57fa\u7840\u7684textView TextView textView ; //\u5728\u57fa\u7840textView\u4e0a\u589e\u52a0\u6eda\u52a8\u6761 VScroll vs_TextView ( & textView ); //\u5728\u589e\u52a0\u5782\u76f4\u6eda\u52a8\u6761\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6eda\u52a8\u6a2a\u6761 HScroll hs_vs_TextView ( & vs_TextView ); //\u5728\u589e\u52a0\u6c34\u5e73\u4e0e\u5782\u76f4\u6eda\u52a8\u6761\u4e4b\u540e\u589e\u52a0\u8fb9\u6846 Border b_hs_vs_TextView ( & hs_vs_TextView ); b_hs_vs_TextView . draw (); return 0 ; } 2.36 \u521b\u5efa\u578b\u6a21\u5f0f 2.36.1 \u5355\u4f8b\u6a21\u5f0f 2.36.2 \u5de5\u5382\u6a21\u5f0f class TeaFactory { public : void setMilk ( int amount ) { ... } void setSugar ( int amount ) { ... } Tea * createTea ( const string & type ) { Tea * tea = nullptr ; if ( type == \"GreenTea\" ) tea = new GreenTea ; else if ( type == \"BlackTea\" ) tea = new Blacktea ; else ... // \u5176\u4ed6\u53ef\u80fd\u7684\u8336\u53f6\u7c7b\u578b if ( milkAmount > 0 ) tea -> addMilk (...); if ( sugarAmount > 0 ) tea -> addSugar (...); ... // \u5176\u4ed6\u7684\u5c5e\u6027\u914d\u7f6e } }; 2.36.3 \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f class AbstractLanguageFactory { public : virtual Lexer * createLexer (); virtual Parser * createParser (); virtual Generator * createGenerator (); }; class CppFactory : public AbstractLanguageFactory { public : Lexer * createLexer () { return new CppLexer ; } Parser * createParser () { return new CppParser ; } Generator * createGenerator () { return new CppGenerator ; } }; class JavaFactory : public AbstractLanguageFactory { ... }; class Compiler { AbstractFactory * factory ; public : Compiler ( AbstractFactory * factory ) { this -> factory = factory ; } LexResult * lex ( Code * input ) { Lexer * lexer = factory -> createLexer (); return lexer -> lex ( input ); } ParseResult * parse ( LexResult * input ) { Parser * parser = factory -> createParser (); return parser -> parse ( input ); } // ... }; int main () { CppFactory * cppFactory = new CppFactory (); Compiler * cppCompiler = new Compiler ( cppFactory ); Code * code = ... LexResult * lex = cppCompiler -> lex ( code ); // ... } 3. \u5b9e\u7528\u5de5\u5177\u7c7b\u77e5\u8bc6 3.1 \u6392\u5e8f bool mycmp ( int a , int b ) { /* a\u5728b\u524d\u8fd4\u56detrue a\u5728b\u540e\u8fd4\u56defalse */ } sort ( arr + 0 , arr + n , mycmp ); vector < Computer > data ; // Computer \u7c7b\u91cd\u8f7d\u4e86\u201c>\u201d\u3001\u201c<\u201d sort ( data . begin (), data . end (), greater < Computer > ()); struct Cmp { bool operator () ( const Computer & _a , const Computer & _b ) { return _a . stock > _b . stock ; } }; sort ( data . begin (), data . end (), Cmp ); 3.2 \u5b57\u7b26\u4e32\u7c7b 3.3 \u6587\u4ef6\u8bfb\u5199 fstream #include <fstream> fstream fs1 ( \"./input.txt\" , ios :: in ); fs1 >> a ; fstream fs2 ( \"./output.txt\" , ios :: out ); fs2 << a ; ifstream fin ( \"./input.txt\" ); ofstream fout ( \"./output.txt\" ); // \u6709f\uff01\uff01\u4e0d\u662fistream / ostream \uff01 // \u5faa\u73af\u4ece\u6587\u4ef6\u8bfb\u5165\u672a\u77e5\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u76f4\u5230\u8bfb\u5b8c\u4e3a\u6b62\u3002 while ( fin ) {} 3.4 \u8f93\u5165 string str ; // \u8bfb\u5230\u7a7a\u683c cin >> str ; // \u8bfb\u4e00\u6574\u884c getline ( cin , str ); // \u8bfb\u5230\u7279\u5b9a\u5206\u9694\u7b26\uff1b\u53ef\u4ee5\u8bfb\u5165\u6362\u884c\u7b26 getline ( cin , str , '#' ); // \u6d41\u64cd\u7eb5\u7b97\u5b50 cin >> ws ; // ws\u7b97\u5b50\uff1b\u9664\u53bb\u524d\u5bfc\u7a7a\u683c // \u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f46\u5e76\u4e0d\u8bfb\u53d6\u3002\u5982\u679c\u5230\u7ed3\u5c3e\u4e86\u5c31\u7ec8\u6b62\u65e0\u9650\u5faa\u73af\u8bfb\u5165\u3002 int c = cin . peek (); // \u8fd4\u56de\u7684\u662fchar\u7c7b\u578b\u7684\u5b57\u7b26\uff01\uff01\u6bd4\u59820\u8fd4\u56de\u7684\u662fASCII\u780148\u3002 if ( c == EOF ) break ; cin . get (); //\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 cin . ignore ( int n = 1 , int delim = EOF ); //\u4e22\u5f03n\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u76f4\u81f3\u9047\u5230delim\u5206\u9694\u7b26 cin . peek (); //\u67e5\u770b\u4e0b\u4e00\u4e2a\u5b57\u7b26 cin . putback ( char c ); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 cin . unget (); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 3.5 \u8f93\u51fa \u683c\u5f0f\u5316\u8f93\u51fa\uff1a #include <iomanip> cout << defaultfloat ; //\u8fd8\u539f\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f cout << setprecision ( 2 ) << 3.1415926 << endl ; //\u8f93\u51fa\u7cbe\u5ea6\u8bbe\u7f6e\u4e3a2 -> 3.2 cout << oct << 12 << \" \" << hex << 12 << endl ; //\u516b\u8fdb\u5236\u8f93\u51fa -> 14 \u5341\u516d\u8fdb\u5236\u8f93\u51fa -> c cout << dec ; //\u8fd8\u539f\u5341\u8fdb\u5236 cout << setw ( 3 ) << setfill ( '*' ) << 5 << endl ; //\u8bbe\u7f6e\u5bf9\u9f50\u957f\u5ea6\u4e3a3\uff0c\u5bf9\u9f50\u5b57\u7b26\u4e3a* -> **5 cout << fixed << 2018.0 << \" \" << 0.0001 << endl ; //\u6d6e\u70b9\u6570\u8865\u5168 -> 2018.000000 0.000100 cout << scientific << 2018.0 << \" \" << 0.0001 << endl ; //\u79d1\u5b66\u8ba1\u6570\u6cd5 -> 2.018000e+03 1.000000e-04 3.6 string // \u8f6c\u6362\u4e3a\u5e38\u91cfchar\u5b57\u7b26\u4e32 str . c_str (); str . push_back ( 'a' ); str . append ( s2 ); str += s1 ; 3.6.1 \u622a\u53d6 string s0 ( \"0123456789\" ); string s1 ( s0 , 3 , 4 ); // \u4eces0[3]\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\u7ed3\u679c\uff1a3456 string s2 ( s0 , 4 ); // \u4eces0[4]\u5f00\u59cb\u76f4\u5230\u7ed3\u5c3e\u3002\u7ed3\u679c\uff1a456789 string s3 ( \"0123456789\" , 4 ); // \u4ece\u5934\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\uff08\u53d6\u524d4\u3002\uff09\u7ed3\u679c\uff1a0123 string s4 ( s0 . begin () + 2 , s0 . begin () + 6 ); // \u4eces0[2]\u5f00\u59cb\uff0c\u5230s0[5]\uff08s0[6]\u4e4b\u524d\uff09\u7ed3\u675f\u3002\u7ed3\u679c\uff1a2345 cout << s1 << endl ; cout << s2 << endl ; cout << s3 << endl ; cout << s4 << endl ; 3.6.2 char[]\u8f6c\u6574\u578bint (stoi) int atoi ( const char * str ) // Usage: #include <stdlib.h> char s ; int val = atoi ( s ); // \u8fdb\u5236\u8f6c\u6362 \uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8d77\u59cb\u4f4d\u7f6e\uff09 int a = stoi ( \"2001\" ) //a=2001 std :: string :: size_type sz ; // \u4e00\u4e2a\u5927\u5c0f\u6570\u503c size_t alias int b = stoi ( \"50 cats\" , & sz ) //b=50 sz=2 \u8bfb\u5165\u957f\u5ea6 int c = stoi ( \"40c3\" , nullptr , 16 ) //c=0x40c3 \u5341\u516d\u8fdb\u5236 int d = stoi ( \"0x7f\" , nullptr , 0 ) //d=0x7f \u81ea\u52a8\u68c0\u67e5\u8fdb\u5236 \u53cd\u8fc7\u6765\u662fitoa\u3002\u7136\u800c\u8fd9\u4e2a\u5728\u4e00\u4e9b\u73af\u5883\u4e0b\u662f\u6ca1\u6709\u7684\u3002 https://blog.csdn.net/p312011150/article/details/81273888 3.6.3 number to string int a ; string s = to_string ( a ); 3.6.4 sstream \u8f6c\u6362 ss << sth. \u653e\u8fdb\u53bb ss >> sth. \u62ff\u51fa\u6765 int string_to_int ( const string & s ) { stringstream ss ; ss << s ; int value ; ss >> value ; return value ; } string s ; cin >> s ; cout << string_to_int ( s ) << endl ; #include <sstream> using namespace std ; int main () { stringstream ss ; string s ( \"403\" ); int value = 404 ; // int to string // put int to ss ss << value ; // output ss to string ss >> s ; cout << s << endl ; // string to int // put string to ss ss << s ; // output ss to int ss >> value ; cout << value << endl ; return 0 ; } 3.6.4.1 sstream\u590d\u7528\u7684\u5751 ss.clear() \u662f\u72b6\u6001\u4f4d\u3002\u6bd4\u5982\u4e0a\u4e00\u6b21\u7528\u5230\u672b\u5c3e\u65f6\u4e0b\u4e00\u6b21\u518d\u7528\u5c31\u9700\u8981clear\u3002 ss.str(\"\") \u662f\u6e05\u7a7a\u5185\u5bb9\u4ee5\u4f9b\u590d\u7528\u3002 3.6.4.2 sstream\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32 https://blog.csdn.net/liitdar/article/details/82598039 3.6.4.2.1 \u65b0\u7684ss\u4e00\u6b21\u6027\u62fc\u63a5 ss << s1 << s2 << s3 ; cout << ss . str () << endl ; 3.6.4.2.2 \u7528\u8fc7\u7684ss\u5728\u5c3e\u90e8\u6dfb\u52a0 \u9700\u8981\u7528\u5230clear\u6765\u6e05\u695a\u201c\u9519\u8bef\u72b6\u6001\u201d\u3002 https://www.cnblogs.com/elenno/p/stringstream_clear.html ss >> value ; // used ss . clear (); ss << \", 403\" ; // add something after being used cout << ss . str () << endl ; 3.6.4.3 \u57fa\u4e8estringstream\u7684\u7c7b\u578b\u8f6c\u6362\u6a21\u677f\u51fd\u6570 template < class InType , class OutType > OutType convert ( InType val ) { static stringstream ss ; ss . str ( \"\" ); // empty the buffer ss . clear (); // clear the state ss << val ; OutType res ; ss >> res ; return res ; } 3.7 vector vector < double > vec = { 0 , 1 , 2 , 3 , 4 , 5 }; for ( int i = 6 ; i <= 10 ; i ++ ) vec . push_back ( i ); vec . insert ( vec . begin () + 4 , 3.5 ); // \u5728index=4\u524d\u63d2\u51653.5 vec . erase ( vec . begin () + 10 ); // \u5220\u9664index=10\uff08\u5143\u7d209\u88ab\u5220\u6389\u4e86\uff09 vec . emplace ( vec . begin () + 10 , 9 ); // \u5728index=10\u524d\u63d2\u51659 vec . emplace_back ( 11 ); vector < double > vec2 ( vec . begin () + 1 , vec . begin () + 3 ); // [\u5de6, \u53f3) for ( auto & i : vec ) { cout << i << ' ' ; } cout << endl ; for ( auto & i : vec2 ) { cout << i << ' ' ; } 3.8 \u6b63\u5219\u8868\u8fbe\u5f0f #include <regex> // \u5b57\u7b26\u4e32\u80fd\u5426\u5b8c\u5168\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f string s ( \"subject\" ); regex e ( \"sub.*\" ); cout << regex_match ( s , e ) << endl ; // \u5b8c\u5168\u5339\u914d\uff1b\u5206\u7ec4\u6355\u83b7 // \u6bcf\u7ec4\u7528()\u6807\u8bc6\uff1b0\u53f7\u6c38\u8fdc\u662f\u88ab\u5339\u914d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab // \u4e0d\u60f3\u6355\u83b7\u7684\u5206\u7ec4\u8fd9\u6837\u6807\u8bb0\uff1a (?:pattern) string s ( \"ver10\" ); regex e ( R \"(ver(\\d+) ) \") ; smatch sm ; // smatch \u5bf9\u8c61\u5b58\u50a8\u5206\u7ec4\u7ed3\u679c if ( regex_match ( s , sm , e )) // \u5224\u65ad\u662f\u5426\u6210\u529f\u5e76\u5b58\u50a8\u7ed3\u679c { cout << sm . size () << endl ; // smatch\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\uff1b\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9string\u5bf9\u8c61 for ( auto & i : sm ) // for (int i = 0; i < sm.size(); i++) { cout << i << endl ; } } // \u641c\u7d22 // \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u5b50\u4e32\uff0c\u5b58\u50a8\u5230smatch\u5bf9\u8c61\u4e2d smatch result ; regex_research ( s , result , re ); smatch sm ; name = reg_match ( state , \"(My name is |I am )( \\\\ w+)\" )[ 2 ]; sm = reg_match ( state , \"([1-9] \\\\ d{0,3})[-.](1[0-2]|0?[1-9])[-.](3[01]|[12] \\\\ d|0?[1-9])\" ); birth = Date ( sm [ 1 ], sm [ 2 ], sm [ 3 ]); phone = reg_match ( state , \" \\\\ d{11}\" )[ 0 ]; email = reg_match ( state , \" \\\\ w+.?@[a-zA-Z0-9_-]+( \\\\ .[a-zA-Z0-9_-]+)+\" )[ 0 ]; // \u66ff\u6362 string s ( \"this subject has a submarine\" ); regex e ( R \"(sub[\\S]*)\") ; //regex_replace\u8fd4\u56de\u503c\u5373\u4e3a\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32 cout << regex_replace ( s , e , \"SUB\" ) << endl ; // this SUB has a SUB // regex_replace(s, re, s1) // \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u66ff\u6362\u4e0a\u53bb\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7 // $& \u4ee3\u8868re\u5339\u914d\u7684\u5b50\u4e32 // $1, $2 \u4ee3\u8868re\u5339\u914d\u7684\u7b2c1/2\u4e2a\u5206\u7ec4 string s ( \"this subject has a submarine\" ); regex e ( R \"((sub) ([ \\ S ] * )) \") ; cout << regex_replace ( s , e , \"$1 and [$2]\" ) << endl ; // this sub and [ject] has a sub and [marine] http://tool.chinaz.com/regex/ \u8d2a\u5a6a\u4e0e\u61d2\u60f0 3.9 \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 isdigit isdigit ( '3' ); // \u53c2\u6570\u63a5\u6536\u4e00\u4e2aint\uff1b\u63a5\u6536\u5230EOF\u8fd4\u56defalse\u53ef\u7528\u4e8e\u5224\u65ad\u8bfb\u5165\u7ed3\u675f","title":"OOP Notes for exam"},{"location":"C%2B%2B/oop/#oop-notes-for-exam","text":"","title":"OOP Notes for exam"},{"location":"C%2B%2B/oop/#1","text":"","title":"1. \u57fa\u672c\u5199\u6cd5"},{"location":"C%2B%2B/oop/#11-makefile","text":"\u5e38\u89c4\u7248\uff1a all : test # \u53ea\u8f93\u5165make\u5b83\u5c31\u627e\u7b2c\u4e00\u4e2a test : product . o sum . o main . o functions . h g++ product.o sum.o main.o -o test # specify the name of the output product.o : product . cpp functions . h g++ -c product.cpp -o product.o # -c\u8868\u793a\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5 sum.o : sum . cpp functions . h g++ -c sum.cpp -o sum.o main.o : main . cpp functions . h g++ -c main.cpp -o main.o clean : # clean\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u4f9d\u8d56\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6240\u4ee5\u9700\u8981make clean rm *.o test \u6bd4\u8f83\u901a\u7528\u7684\u7248\u672c\uff1a #################################### # Learnt from Internet # Edited by Colin # 2020.02 #################################### cc = g++ FLAG = DEF = CXXFLAGS = -std = c++17 -O3 prom = main deps = $( shell find . -maxdepth 10 -name \"*.h\" -or -name \"*.hpp\" ) src = $( shell find . -maxdepth 10 -name \"*.cpp\" ) obj = $( src:%.cpp = %.o ) $(prom) : $( obj ) $( cc ) -o $( prom ) $( obj ) %.o : %. cpp $( cc ) $( CXXFLAGS ) $( FLAG ) $( DEF ) -c $< -o $@ .PHONY : clean clean : rm -rf $( prom ) $( obj )","title":"1.1 Makefile"},{"location":"C%2B%2B/oop/#12-argv","text":"\u4f8b\u5b50 int main ( int argc , char ** argv ) // or char*[] argv { int a , b ; a = atoi ( argv [ 1 ]); b = atoi ( argv [ 2 ]); std :: cout << a + b << std :: endl ; return 0 ; } argc\u662f\u53c2\u6570\u7684\u6570\u91cf\uff0c\u7b97\u4e0a\u7a0b\u5e8f\u540dargv[0]\u3002\u904d\u5386argc\u65f6\u6709\u7528\uff0c\u56e0\u4e3aargc\u4e0d\u597d\u77e5\u9053\u6709\u51e0\u4e2a\u3002 argv\u662f\u53c2\u6570\u3002\u7b2cn\u4e2a\u53c2\u6570\u4e3aargv[n]\u3002","title":"1.2 \u7a0b\u5e8f\u547d\u4ee4\u884c\u53c2\u6570 argv"},{"location":"C%2B%2B/oop/#13-gdb","text":"g++ -g a.cpp \u2013o a.out\u7f16\u8bd1\u7a0b\u5e8f gdb a.out \u8c03\u8bd5a.out\u7a0b\u5e8f run \u8fd0\u884c\u7a0b\u5e8f break + \u884c\u53f7 \u8bbe\u7f6e\u65ad\u70b9 break 10 if (k==2) \u53ef\u6839\u636e\u5177\u4f53\u8fd0\u884c\u6761\u4ef6\u65ad\u70b9 delete break 1 \u5220\u96641\u53f7\u65ad\u70b9 watch x \u5f53x\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u6682\u505c continue \u8df3\u81f3\u4e0b\u4e00\u4e2a\u65ad\u70b9 step \u5355\u6b65\u6267\u884c(\u8fdb\u5165) next \u5355\u6b65\u6267\u884c(\u4e0d\u8fdb\u5165) print x \u8f93\u51fa\u53d8\u91cf/\u8868\u8fbe\u5f0fx GDB\u4e2d\u8f93\u5165 p x=1\uff0c\u7a0b\u5e8f\u4e2dx\u7684\u503c\u4f1a\u88ab\u624b\u52a8\u4fee\u6539\u4e3a1 display x \u6301\u7eed\u76d1\u6d4b\u53d8\u91cf/\u8868\u8fbe\u5f0fx list \u5217\u51fa\u7a0b\u5e8f\u6e90\u4ee3\u7801 quit \u9000\u51fa \u56de\u8f66 \u91cd\u590d\u4e0a\u4e00\u6761\u6307\u4ee4 \u6240\u6709\u547d\u4ee4\u90fd\u53ef\u4ee5\u7f29\u5199\u4e3a\u524d\u51e0\u4e2a\u5b57\u6bcd\uff0c\u53ea\u8981\u4fdd\u6301\u552f\u4e00\uff0c\u5982 next \u53ef\u7f29\u5199\u4e3a n \u3002 info break\u770b\u65ad\u70b9\u4fe1\u606f Disp \u5217\u4ee3\u8868\u65ad\u70b9\u88ab\u547d\u4e2d\u540e\uff0c\u8be5\u65ad\u70b9\u4fdd\u7559(keep)\u3001\u5220\u9664(del)\u8fd8\u662f\u5173\u95ed(dis) https://zhuanlan.zhihu.com/p/29468840","title":"1.3 gdb\u8c03\u8bd5"},{"location":"C%2B%2B/oop/#14-overload","text":"\u540c\u540d\u3001 \u53c2\u6570\u5fc5\u987b\u4e0d\u540c \u3002\u4f5c\u7528\u57df\u76f8\u540c\u3002\u8fd4\u56de\u503c\u53ef\u76f8\u540c\u4e5f\u53ef\u4e0d\u540c\u3002 \u6839\u636e\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u9645\u53c2\u6570\u51b3\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528 \u3002 \u5c5e\u4e8e\u9759\u6001\u591a\u6001\u3002\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u3002 \u5185\u7f6e\u7c7b\u578b\u8f6c\u6362\uff1a\u5f53\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u7c7b\u578b\u5339\u914d\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u5426\u5219\u624d\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362","title":"1.4 \u51fd\u6570\u91cd\u8f7d overload"},{"location":"C%2B%2B/oop/#15-auto","text":"\u51fd\u6570\u53c2\u6570\u4e0d\u80fd\u662fauto\u7c7b\u578b\u3002 \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570 \u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u58f0\u660e\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e auto func(char* ptr, int val) -> int;","title":"1.5 auto"},{"location":"C%2B%2B/oop/#16-decltype","text":"\u7c7b\u578b\u63a8\u5bfc\u3002 decltype(a)","title":"1.6 decltype"},{"location":"C%2B%2B/oop/#161","text":"https://github.com/thu-coai/THUOOP/issues/24 // \u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u7684\u9000\u5316\u7248\u672c int a = 3 ; int & b = a ; double c = 3.14 ; decay_t < decltype ( b ) > ; // int // \u5f97\u5230\u201c\u66f4\u901a\u7528\u7248\u672c\u201d common_type_t < decltype ( b ) > ; // int; \u4e00\u4e2a\u5c31\u76f4\u63a5\u9000\u5316 common_type_t < decltype ( b ), decltype ( c ) > ; // double \u4f8b\u5b50\uff1a // max \u51fd\u6570 template < typename T1 , typename T2 > std :: common_type_t < T1 , T2 > max ( T1 a , T2 b ) { return b < a ? a : b ; } // \u8fd4\u56de\u5bb9\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u503c template < class A > auto work2 ( const A & _array ) -> common_type_t < decltype ( _array . front ()) > { return _array . front (); } // \u4eff\u7167\u6b64\u65b9\u6cd5\u53ef\u4ee5\u628a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5305\u88c5\u8fdb\u6a21\u677f\u7c7b\u518d\u8fd4\u56de template < class A > auto work2 ( const A & _array ) -> MyArray < common_type_t < decltype ( _array . front ()) > > { /* ... */ }","title":"1.6.1 \u66f4\u9ad8\u7ea7\u7684\u8fd4\u56de\u503c\u63a8\u5bfc\u7528\u6cd5"},{"location":"C%2B%2B/oop/#17-new-delete","text":"delete[] array \u8be6\u7ec6\u8fc7\u7a0b\u89c1PPT L5 P42","title":"1.7 new &amp; delete"},{"location":"C%2B%2B/oop/#18","text":"#ifndef MATRIX_H #define MATRIX_H #endif Or #pragma once \u5bf9\u6bd4\uff1a \u540e\u8005\u6548\u7387\u66f4\u9ad8\u3002 \u539f\u56e0\uff1a \u524d\u8005\u8981\u6bcf\u6b21\u8bfb\u5165\u6574\u4e2a\u6587\u4ef6\u6765\u5904\u7406\uff0c\u540e\u8005\u7b2c\u4e8c\u6b21\u8bfb\u5165\u76f8\u540c\u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u8df3\u8fc7\uff0c \u4e0d\u4f1a\u4ea7\u751ffile IO\u3002 \u4f46\u662f\u5927\u90e8\u5206\u7f16\u8bd1\u5668\u4e5f\u9488\u5bf9\u524d\u8005\u7684\u6548\u7387\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5b9e\u9645\u6548\u7387\u53ef\u80fd\u50cf\u5dee\u4e0d\u591a\u3002 \u540e\u8005\u4ee5\u6765\u6587\u4ef6\u7cfb\u7edf\u7684\u6587\u4ef6\u540d\uff0c\u56e0\u6b64\u5982\u679c\u6709\u7b26\u53f7\u94fe\u63a5/\u4e24\u4e2a\u6587\u4ef6\u5185\u5bb9\u76f8\u540c\uff0c\u5219\u4f1a\u88ab\u5f15\u5165\u4e24\u6b21\u3002 \u524d\u8005\u5728\u6807\u51c6\u5185\uff0c\u540e\u8005\u4e0d\u5728\uff0c\u4f46\u662f\u88ab \u7edd\u5927\u90e8\u5206\u7f16\u8bd1\u5668 \u652f\u6301\u3002","title":"1.8 \u907f\u514d\u91cd\u590d\u5305\u542b\u5934\u6587\u4ef6"},{"location":"C%2B%2B/oop/#2-operator","text":"bool operator < ( const Computer & _y ) const // const declares that this function would not modify this. { }","title":"2. operator&lt;"},{"location":"C%2B%2B/oop/#21-operator","text":"\u524d\u7f00\uff1a\u76f4\u63a5++ Test & operator ++ () { ++ data ; return * this ; // \u8fd4\u56de\u81ea\u8eab } \u540e\u7f00\uff1a\u54d1\u5143\u53c2\u6570int \u5148\u6784\u9020\u4e00\u4e2a\u539f\u6765\u7684\uff0c\u8fd4\u56de++\u4e4b\u524d\u7684\u3002 Test operator ++ ( int ) { Test test ( data ); ++ data ; return test ; }","title":"2.1 operator++"},{"location":"C%2B%2B/oop/#22-operator","text":"\u53ef\u7528\u4e8e\u201c\u5b57\u5178\u201d/map\u3002 \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u662f\u5f15\u7528\uff0c\u5219\u6570\u7ec4\u8fd0\u7b97\u7b26\u8c03\u7528\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u5de6\u8fb9\uff0c\u63a5\u53d7\u8d4b\u503c\uff0c\u5373 Obj[index] = value; \u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9 Var = Obj[index]; char week_name [ 7 ][ 4 ] = { \"mon\" , \"tu\" , \"wed\" , \"thu\" , \"fri\" , \"sat\" , \"sun\" }; class WeekTemp { int temp [ 7 ]; public : int & operator [] ( const char * name ) // \u5b57\u7b26\u4e32\u4f5c\u4e0b\u6807 { for ( int i = 0 ; i < 7 ; i ++ ) { if ( strcmp ( week_name [ i ], name ) == 0 ) return temp [ i ]; } } };","title":"2.2 operator[]"},{"location":"C%2B%2B/oop/#23-operator","text":"\u4e3a\u4ec0\u4e48\u91cd\u8f7d\u6d41\u8fd0\u7b97\u7b26\u8981\u8fd4\u56de\u5f15\u7528\uff1f\u907f\u514d\u590d\u5236\u3002 friend istream & operator >> ( istream & in , Test & dst ) { in >> dst . id ; return in ; } friend ostream & operator << ( ostream & out , const Test & src ) { out << src . id << endl ; return out ; } cin >> obj ; cout << obj << endl ; \u9700\u8981\u4f7f\u7528\u53cb\u5143\u51fd\u6570 \u3002\u56e0\u4e3a\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u53c2\u6570this\u3002\u800c\u6d41\u64cd\u4f5c\u7b26\u5de6\u8fb9\u5fc5\u987b\u662f\u6d41\u7c7b\u578b\u3002\u53cb\u5143\u51fd\u6570\u5c31\u6ca1\u6709\u90a3\u4e2athis\uff0c\u6ee1\u8db3\u4e86\u8981\u6c42\u3002","title":"2.3 operator&lt;&lt;"},{"location":"C%2B%2B/oop/#24","text":"\u53cb\u5143\u4e0d\u7ee7\u627f\uff01 class Y {}; // Y\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458 class A { int data ; // \u79c1\u6709\u6570\u636e\u6210\u5458 enum { a = 100 }; // \u79c1\u6709\u679a\u4e3e\u9879 friend class X ; // \u53cb\u5143\u7c7b\u524d\u7f6e\u58f0\u660e\uff08\u8be6\u7ec6\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 friend Y ; // \u53cb\u5143\u7c7b\u58f0\u660e\uff08\u7b80\u5355\u7c7b\u578b\u6307\u5b9a\u7b26\uff09 (C++11\u8d77) }; class X {}; // X\u80fd\u8bbf\u95eeA\u7684\u6240\u6709\u6210\u5458","title":"2.4 \u53cb\u5143\u4e0e\u53cb\u5143\u7c7b"},{"location":"C%2B%2B/oop/#25-static","text":"\u9759\u6001\u53d8\u91cf\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u53d8\u91cf \u5b9a\u4e49\u793a\u4f8b\uff1astatic int i = 1; \u521d\u59cb\u5316\uff1a\u521d\u6b21\u5b9a\u4e49\u65f6\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5982\u679c\u5b9a\u4e49\u65f6\u4e0d\u521d\u59cb\u5316\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a0 \u9759\u6001\u5c40\u90e8\u53d8\u91cf \u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u5c06\u6301\u7eed\u5230 \u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f \u9759\u6001\u5168\u5c40\u53d8\u91cf \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c \u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u51b2\u7a81 \u9759\u6001\u51fd\u6570\uff1a\u4f7f\u7528static\u4fee\u9970\u7684\u51fd\u6570 \u5b9a\u4e49\u793a\u4f8b\uff1astatic int func() {\u2026} \u9759\u6001\u51fd\u6570 \u7684\u4f5c\u7528\u57df \u4ec5\u9650\u5176\u58f0\u660e\u7684\u6587\u4ef6 \uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u6240\u7528\uff0c\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u51b2\u7a81","title":"2.5 \u9759\u6001 static"},{"location":"C%2B%2B/oop/#251","text":"\u5c5e\u4e8e\u6574\u4e2a\u7c7b\uff1b\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab \u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5df2\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u9759\u6001\u6570\u636e\u6210\u5458\u5e94\u8be5\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\uff0c\u5728.cpp\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u5728.h\u6587\u4ef6\u4e2d\u540c\u65f6\u5b8c\u6210\u58f0\u660e\u548c\u5b9a\u4e49\uff0c\u94fe\u63a5\u5c06\u65e0\u6cd5\u8fdb\u884c\u3002\u56e0\u4e3a\u53ef\u80fd\u5934\u6587\u4ef6\u88ab\u5305\u542b\u4e86\u591a\u6b21\uff0c\u4ece\u800c\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u3002 test.h\uff1a class Test { public : static int count ; //\u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458\uff1b\u5bf9\u7c7b\u5b9e\u4f8b\u8ba1\u6570\u7528 Test (); ~ Test (); }; test.cpp\uff1a #include \u201cTest.h\u201d int Test :: count = 0 ; //\u5b9a\u4e49\u9759\u6001\u6570\u636e\u6210\u5458\uff08\u8981\u52a0\u4e0a\u7c7b\u578b\uff09 Test :: Test () { count ++ ; } Test ::~ Test () { count -- ; } main.cpp\uff1a #include <iostream> #include \u201cTest.h\u201d using namespace std ; int main () { Test t1 [ 10 ]; cout << \u201c Test # : \u201d << Test :: count << \u201c or \u201d << t1 [ 0 ]. count << endl ; //\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458 }","title":"2.5.1 \u9759\u6001\u6570\u636e\u6210\u5458\uff08\u9759\u6001\u6210\u5458\u53d8\u91cf\uff09\uff08\u201c\u7c7b\u53d8\u91cf\u201d\uff09"},{"location":"C%2B%2B/oop/#252","text":"\u5728\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u524d\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\uff0c\u5426\u5219\u76f8\u5f53\u4e8e\u4f7f\u7528\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf static int how_many () { return count ; } cout << Test :: how_many () << endl ;","title":"2.5.2 \u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"C%2B%2B/oop/#26","text":"","title":"2.6 \u5f15\u7528"},{"location":"C%2B%2B/oop/#261","text":"\u7c7b\u6210\u5458\u91cc\u6709\u6307\u9488\u65f6\u6700\u597d\u8fd9\u6837\uff0c\u907f\u514d\u51fd\u6570\u7ed3\u675f\u65f6delete\u4e86\u5f62\u53c2\u91cc\u7684\u6307\u9488\u3002","title":"2.6.1 \u5f15\u7528\u4f20\u53c2\u4e0d\u6784\u9020\u4e5f\u4e0d\u6790\u6784"},{"location":"C%2B%2B/oop/#262","text":"","title":"2.6.2 \u5f15\u7528\u4e0d\u80fd\u6539\u6307\u5411"},{"location":"C%2B%2B/oop/#27","text":"\u53c2\u6570\u662f\u8bed\u8a00\u89c4\u5b9a\u7684\uff0c\u662f\u540c\u7c7b\u5bf9\u8c61\u7684\u5e38\u91cf\u5f15\u7528 MyClass(const MyClass& src) {} \u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\uff0c\u5219\u81ea\u52a8\u5408\u6210\uff0c\u91c7\u7528~~\u4f4d\u62f7\u8d1d(Bitcopy)~~\uff0c\u5373\u76f4\u63a5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u7c7b\u7684\u6240\u6709\u6570\u636e\u6210\u5458\u3002 \u88ab\u8c03\u7528\u7684\u4e09\u79cd\u5e38\u89c1\u60c5\u51b5\uff1a 1\u3001\u7528\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u5b9a\u4e49\u53e6\u4e00\u4e2a\u65b0\u7684\u7c7b\u5bf9\u8c61 Test a ; Test c = a ; // \u5e76\u4e0d\u662f\u8c03\u7528\u91cd\u8f7d\u7684\u7b49\u53f7\uff01\uff01\u800c\u662f\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff01 Test b ( a ); 2\u3001\u51fd\u6570\u8c03\u7528\u65f6\u4ee5\u7c7b\u7684\u5bf9\u8c61\u4e3a\u5f62\u53c2 \u51fd\u6570\u8c03\u7528\uff0c\u5f62\u53c2\u4f20\u53c2 Func(Test a) 3\u3001\u51fd\u6570\u8fd4\u56de\u7c7b\u5bf9\u8c61 Test Func(void) \u8fd4\u56de\u503c\u65f6\u6784\u9020\u4e34\u65f6\u5bf9\u8c61 MyClass res = f(a) \u6ca1\u6709RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u4e34\u65f6\u53d8\u91cf\u518d\u7ed9 res \u3002 \u7981\u6b62RVO\u7684\u7f16\u8bd1\u9009\u9879\uff1a -fno-elide-constructors","title":"2.7 \u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"C%2B%2B/oop/#28","text":"int && e = a + b ; int && j = lvalue ; // NOT allowed \u5de6\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u5de6\u503c\uff0c\u53f3\u503c\u5f15\u7528\u80fd\u7ed1\u5b9a\u53f3\u503c\u3002 \u5e38\u91cf\u5de6\u503c\u5f15\u7528\u80fd\u4e5f\u7ed1\u5b9a\u53f3\u503c\u3002 const int &e = 3; void ref ( int && x ) { cout << \"right \" << x << endl ; } ref ( 404 ); \u6df7\u6dc6\uff1a\u53f3\u503c\u5f15\u7528\u672c\u8eab\u4e3a\u5de6\u503c\u3002","title":"2.8 \u53f3\u503c\u5f15\u7528"},{"location":"C%2B%2B/oop/#29","text":"Test ( Test && t ) : buf ( t . buf ) { //\u76f4\u63a5\u590d\u5236\u5730\u5740\uff0c\u907f\u514d\u62f7\u8d1d cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; // \u5c06t.buf\u6539\u4e3anullptr\uff0c\u4f7f\u5176\u4e0d\u518d\u6307\u5411\u539f\u6765\u5185\u5b58\u533a\u57df // \u8fd9\u4e4b\u540et\u5c31\u7528\u4e0d\u4e86\u4e86\uff1b\u5b83\u7684\u5730\u5740\u73b0\u5728\u88ab\u62f7\u8d1d\u76ee\u6807\u5bf9\u8c61\u6240\u6709 } \u7981\u6b62RVO\u65f6\uff0c\u8fd4\u56de\u503c\u5148\u79fb\u52a8\u7ed9\u4e34\u65f6\u53d8\u91cf\uff0c\u518d\u79fb\u52a8\u7ed9\u76ee\u6807\u5bf9\u8c61\u3002 std::move \uff1a\u5c06\u5de6\u503c\u8f6c\u5316\u4e3a\u53f3\u503c move\u51fd\u6570\u672c\u8eab\u4e0d\u5bf9\u5bf9\u8c61\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u4ec5\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u8f6c\u6362\u4e3a\u53f3\u503c\u3002 \u79fb\u52a8\u7684\u5177\u4f53\u64cd\u4f5c\u5728\u79fb\u52a8\u6784\u9020\u51fd\u6570\u5185\u5b9e\u73b0\u3002 Test y = std :: move ( x ); f ( std :: move ( z )); // \u8c03\u7528f\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4f20\u53c2\u7248\u672c // \u6027\u80fd\u66f4\u597d\u7684swap\u51fd\u6570 template < class T > swap ( T & a , T & b ) { T tmp ( std :: move ( a )); a = std :: move ( b ); b = std :: move ( tmp ); }","title":"2.9 \u79fb\u52a8\u6784\u9020\u51fd\u6570"},{"location":"C%2B%2B/oop/#210","text":"\u8d4b\u503c\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u8981\u662f\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570(non-static member function)\uff0c \u4e0d\u80fd\u662f\u53cb\u5143\u51fd\u6570 \u3002 MyClass & operator = ( const MyClass & right ) { if ( this != & right ) { // \u907f\u514d\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1 // \u5c06right\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u5f53\u524d\u5bf9\u8c61\u4e2d... } return * this ; // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61 } \u6ce8\u610f\u533a\u5206\u4e0b\u9762\u4e24\u79cd\u4ee3\u7801\uff1a // \u5df2\u7ecf\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u8d4b\u503c\uff0c\u8c03\u7528\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 ClassName a ; ClassName b ; a = b ; // a\u672a\u5b9a\u4e49\uff1b\u7528b\u521d\u59cb\u5316a ClassName a = b ;","title":"2.10 \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#211","text":"Test & operator = ( Test && right ) { if ( this == & right ) // \u907f\u514d\u81ea\u5df1\u7ed9\u81ea\u5df1\uff08\u65e0\u7528\u64cd\u4f5c\uff09 cout << \"same obj! \\n \" ; else { this -> buf = right . buf ; // \u76f4\u63a5\u8d4b\u503c\u5730\u5740 right . buf = nullptr ; // \u539f\u6765\u7684\u7f6e\u7a7a cout << \"operator=(Test&&) called. \\n \u201c; } return * this ; }","title":"2.11 \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#212","text":"\u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\u5fc5\u987b\u6070\u597d\u7528\u4e00\u79cd\u3002","title":"2.12 \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#2121","text":"// Src -> Dst \u7684\u8f6c\u6362 class Src { public : operator Dst () const { // \u8fd4\u56de\u503c\u7c7b\u578b\u662fDst\uff1b\u5728convert function\u4e2d\u5fc5\u987b\u7701\u7565\u4e0d\u5199 Dst ret ; // ... return ret ; } }","title":"2.12.1 \u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26"},{"location":"C%2B%2B/oop/#213","text":"class Src ; // \u524d\u7f6e\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728Dst\u4e2d\u8981\u7528\u5230Src\u7c7b class Dst { public : Dst ( const Src & s ) { // cout << \"Dst::Dst(const Src&)\" << endl; } };","title":"2.13 \u6784\u9020\u51fd\u6570\u8f6c\u6362\u6cd5"},{"location":"C%2B%2B/oop/#2131","text":"\u5982\u679c\u7528explicit\u4fee\u9970\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u6216\u7c7b\u578b\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff0c\u5219\u76f8\u5e94\u7684\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u663e\u5f0f\u5730\u8fdb\u884c\u3002 explicit operator Dst () const ; explicit Dst ( const Src & s ); Dst d1 ( s ); //\u53ef\u4ee5\u6267\u884c\uff0c\u88ab\u8ba4\u4e3a\u662f\u663e\u5f0f\u521d\u59cb\u5316","title":"2.13.1 \u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#214","text":"const_cast\uff0c\u53bb\u9664\u7c7b\u578b\u7684const\u6216volatile\u5c5e\u6027\u3002 static_cast\uff0c\u7c7b\u4f3c\u4e8eC\u98ce\u683c\u7684\u5f3a\u5236\u8f6c\u6362\u3002\u65e0\u6761\u4ef6\u8f6c\u6362\uff0c\u9759\u6001\u7c7b\u578b\u8f6c\u6362\u3002 dynamic_cast\uff0c\u52a8\u6001\u7c7b\u578b\u8f6c\u6362\uff0c\u5982 \u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u4e4b\u95f4 \u7684\u591a\u6001\u7c7b\u578b\u8f6c\u6362\u3002 reinterpret_cast\uff0c\u4ec5\u4ec5\u91cd\u65b0\u89e3\u91ca\u7c7b\u578b\uff0c\u4f46\u6ca1\u6709\u8fdb\u884c\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362\u3002 \u5982\uff1a Dst d2 = static_cast < Dst > ( s );","title":"2.14 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#215","text":"\u6784\u9020\u987a\u5e8f\uff1a\u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u6790\u6784\u987a\u5e8f\uff1a\u4e0e\u6784\u9020\u987a\u5e8f\u76f8\u53cd","title":"2.15 \u7c7b\u7684\u7ec4\u5408"},{"location":"C%2B%2B/oop/#216","text":"class Child : Father {}; // \u9ed8\u8ba4\u4e3aprivate\u7ee7\u627f class Child : public Father {}; class Child : protected Father {}; // \u5f88\u5c11\u88ab\u4f7f\u7528 \u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u53cb\u5143\u51fd\u6570\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u88ab\u7ee7\u627f\uff01 \u5b50\u7c7b\u82e5\u60f3\u8981\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u6210\u5458\u5217\u8868 \u4e2d\u8fdb\u884c\u3002 Derive ( int i ) : Base ( i ) {}; \u7ee7\u627f\u7236\u7c7b\u6784\u9020\u51fd\u6570 Base ( int i ) : data ( i ) {}; using Base :: Base ; ///\u76f8\u5f53\u4e8e Derive(int i):Base(i) {}; // \u5f53\u7236\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4e00\u53e5using\u53ef\u4ee5\u81ea\u52a8\u6784\u9020\u76f8\u5e94\u7684\u591a\u4e2a","title":"2.16 \u7c7b\u7684\u7ee7\u627f"},{"location":"C%2B%2B/oop/#217-redefining","text":"\u76ee\u7684\uff1a\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u51fd\u6570\uff0c\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u7279\u6b8a\u529f\u80fd\u3002 \u5c4f\u853d\u4e86\u57fa\u7c7b\u7684\u6240\u6709\u5176\u5b83\u540c\u540d\u51fd\u6570\u3002 \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u4e0d\u540c \u76f8\u5f53\u4e8e\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u51fd\u6570\u3002\u4e00\u822c\u4e0d\u6d89\u53ca\u865a\u51fd\u6570\u3002 \u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u901a\u8fc7using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u6d3e\u751f\u7c7b\u4e2d\u201c\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u5373\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002","title":"2.17 \u91cd\u5199\u9690\u85cf redefining"},{"location":"C%2B%2B/oop/#218","text":"\u53ea\u5bf9public\u7ee7\u627f\u6709\u6548\uff0c\u5728\u7ee7\u627f\u56fe\u4e0a\u662f\u4e0a\u5347\u7684\uff1b\u5bf9private\u3001protected\u7ee7\u627f\u65e0\u6548\u3002","title":"2.18 \u5411\u4e0a\u7c7b\u578b\u8f6c\u6362"},{"location":"C%2B%2B/oop/#219","text":"\u901a\u8fc7\u57fa\u7c7b \u6307\u9488\u6216\u5f15\u7528 \u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\u65f6\u2026\u2026 virtual int func ( int a ); \u534f\u53d8\uff1a\u6d3e\u751f\u7c7b\uff08\u5b50\u7c7b\uff09\u865a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u548c\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u76f8\u540c \u5b9e\u73b0\u539f\u7406\uff1a\u865a\u51fd\u6570\u8868\u3002\u5728\u6784\u9020\u51fd\u6570\u7684\u5f00\u5934\u63d2\u5165\u4e86\u521d\u59cb\u5316VPTR\u7684\u4ee3\u7801\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u88ab\u8c03\u7528\u7684\u53ea\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u672c\u5730\u7248\u672c\uff0c\u5373\u865a\u673a\u5236\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e0d\u5de5\u4f5c\u3002 \u6790\u6784\u51fd\u6570\u5f80\u5f80\u662f\u865a\u51fd\u6570\u3002 \u865a\u673a\u5236\u5728\u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u4e0d\u5de5\u4f5c\u3002 \u91cd\u8981\u539f\u5219\uff1a \u603b\u662f\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bbe\u7f6e\u4e3a\u865a\u6790\u6784\u51fd\u6570","title":"2.19 \u865a\u51fd\u6570"},{"location":"C%2B%2B/oop/#220-override","text":"\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\uff0c \u51fd\u6570\u540d\u5fc5\u987b\u76f8\u540c\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u8fd4\u56de\u503c\u4e00\u822c\u60c5\u51b5\u5e94\u76f8\u540c \u3002 \u5c4f\u853d\u4e86\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u51fd\u6570\u3002 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u3002\u665a\u6346\u7ed1\uff08\u53ea\u5bf9\u865a\u51fd\u6570\u8d77\u4f5c\u7528\uff09\u3002 // in Father virtual void f ( int a ) {} // in Child virtual void f ( int a ) override {} // final \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u865a\u51fd\u6570\u4e0d\u80fd\u88ab\u540e\u7eed\u5b50\u7c7boverride virtual void f ( int a ) final {} \u4f7f\u7528const\u4fee\u9970\u6210\u5458\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u91cd\u5199\u8986\u76d6\u5931\u6548","title":"2.20 \u91cd\u5199\u8986\u76d6 override"},{"location":"C%2B%2B/oop/#221","text":"\u7eaf\u865a\u51fd\u6570\u7684\u58f0\u660e\uff1a virtual int f ( int a ) = 0 ; // \u5728\u7c7b\u5916\u5b9a\u4e49\u51fd\u6570\uff0c\u63d0\u4f9b\u5b9e\u73b0 int MyClass :: f ( int a ) { return 1 ; } \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u5c31\u662f \u62bd\u8c61\u7c7b \u3002\u4f5c\u7528\u65f6\u63d0\u4f9b\u63a5\u53e3\u3002 \u62bd\u8c61\u7c7b\u4e0d\u80fd\u5b9a\u4e49\u5bf9\u8c61\uff01\uff01\uff08\u5373\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002\uff09 \u7eaf\u865a\u51fd\u6570\u88aboverride\u4e4b\u524d\u8fd8\u662f\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u88ab\u5168\u90e8\u5b9e\u73b0\uff08\u9664\u4e86\u7eaf\u865a\u6790\u6784\u51fd\u6570\uff09\uff0c\u5219\u5176\u5b50\u7c7b\u8fd8\u662f\u62bd\u8c61\u7c7b\uff0c\u8fd8\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u3002 \u7eaf\u865a\u6790\u6784\u51fd\u6570 \u4ecd\u7136\u9700\u8981\u51fd\u6570\u4f53\u3002 \u76ee\u7684\uff1a\u4f7f\u57fa\u7c7b\u6210\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u57fa\u7c7b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6709\u5176\u4ed6\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u6790\u6784\u51fd\u6570\u4e0d\u5fc5\u662f\u7eaf\u865a\u7684\u3002","title":"2.21 \u62bd\u8c61\u7c7b\u4e0e\u7eaf\u865a\u51fd\u6570"},{"location":"C%2B%2B/oop/#222-dynamic_cast","text":"SrcClass * p1 ; TargetClass * p2 = dynamic_cast < TargetClass *> ( p1 ); Father * p1 ; Child * p2 = dynamic_cast < Child *> ( p1 );","title":"2.22 \u5411\u4e0b\u7c7b\u578b\u8f6c\u6362 dynamic_cast"},{"location":"C%2B%2B/oop/#223-template","text":"\u6a21\u677f\u53c2\u6570\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u3002\u56e0\u6b64\u4e0d\u80fd\u4e3a\u53d8\u91cf\uff0c\u53ea\u80fd\u662f\u5e38\u91cf\u3002\u9759\u591a\u6001\u3002 \u51fd\u6570\u6a21\u677f template < typename T > // template <class T> T sum ( T a , T b ) { return a + b ; } // \u6307\u5b9a\u8c03\u7528\u7c7b\u578b sum < int > ( 9 , 2.1 ); \u7c7b\u6a21\u677f template < typename T > class A { T data ; public : void print (); template < typename T1 > T1 get (); }; //\u7c7b\u5916\u5b9a\u4e49\u7c7b\u6a21\u677f\u4e2d\u7684\u6210\u5458\u51fd\u6570 template < typename T > void A < T >:: print () {} // \u201c\u53cc\u91cd\u6a21\u677f\u201d template < typename T > template < typename T1 > T1 A < T >:: get () {} A < int > a ; \u7c7b\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 template < typename T , unsigned size > class Array { T data [ size ]; public : void print (); }; A < int , 10 > a ;","title":"2.23 \u6a21\u677f template"},{"location":"C%2B%2B/oop/#2231","text":"\u666e\u901a\u6570\u7ec4\uff1b\u628a\u5927\u5c0f\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570n\uff1b\u6ce8\u610f\u7b26\u53f7\u201c&\u201d\u3002 template < class A , int n > void work ( const A ( & _array )[ n ]) { } // call the function double arr = { 0 , 1 , 2 }; work ( arr );","title":"2.23.1 \u4f20\u9012\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570"},{"location":"C%2B%2B/oop/#224-thread","text":"void test ( int seconds ) { this_thread :: sleep_for ( chrono :: seconds ( seconds )); } int main () { thread t_nothing ; // \u521b\u5efa\u4e00\u4e2a\u7a7athread thread t1 ( test , 3 ); // \u521b\u5efa\u4e00\u4e2athread thread t2 ( test , 2 ); // thread \u521b\u5efa\u4e4b\u540e\u5230\u9500\u6bc1\u4e4b\u524d\uff0c\u5fc5\u987b\u51b3\u5b9ajoin\u8fd8\u662fdetach t1 . join (); t2 . detach (); // \u529f\u80fd\u6027\u63a5\u53e3 this_thread :: get_id (); this_thread :: sleep_for (); this_thread :: sleep_until (); this_thread :: yield (); return 0 ; }","title":"2.24 \u591a\u7ebf\u7a0b thread"},{"location":"C%2B%2B/oop/#225","text":"#include <iostream> #include <cmath> #include <vector> #include <thread> using namespace std ; thread * threads [ 4 ]; // \u7ebf\u7a0b\u6307\u9488 int thread_total [ 4 ]; //\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8ba1\u6570\u5668 int total = 0 , mi , mx ; //\u603b\u8ba1\u6570\u5668 bool check_num ( int num ) { /* ... */ } //\u679a\u4e3e\u662f\u5426\u4e3a\u7d20\u6570 //\u7edf\u8ba1[l,r)\u4e4b\u95f4\u7684\u7d20\u6570\u4e2a\u6570 //\u5b58\u5165thread_total[num]\u4e2d void check ( int l , int r , int num ) { thread_total [ num ] = 0 ; for ( int i = l ; i < r ; i ++ ) if ( check_num ( i )) thread_total [ num ] ++ ; } int main () { mi = 1 ; for ( int i = 0 ; i < 4 ; i ++ ) { // \u7528\u5faa\u73af\u521b\u5efa\u7ebf\u7a0b mx = mi + 5000000 / 4 ; if ( mx > 5000000 ) mx = 5000000 ; //\u4e3a\u7b2ci\u4e2a\u7ebf\u7a0b\u5206\u914d[mi,mx)\u533a\u95f4\u7684\u4efb\u52a1 threads [ i ] = new thread ( check , mi , mx , i ); mi = mx ; } //\u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6240\u6709\u5b50\u7ebf\u7a0b\u5b8c\u6210\u7edf\u8ba1 for ( int i = 0 ; i < 4 ; i ++ ) threads [ i ] -> join (); //\u6c47\u603b\u5b50\u7ebf\u7a0b\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u91ca\u653ethread\u5b9e\u4f8b for ( int i = 0 ; i < 4 ; i ++ ) { total += thread_total [ i ]; delete threads [ i ]; } //\u8f93\u51fa cout << total << endl ; return 0 ; }","title":"2.25 \u4e3b\u4ece\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#226-mutex","text":"static mutex exclusive ; // \u4e92\u65a5\u91cf void check_range ( int l , int r ) { int tmp_total = 0 ; for ( int i = l ; i < r ; i ++ ) if ( check_num ( i )) tmp_total ++ ; exclusive . lock (); //\u52a0\u9501 total += tmp_total ; exclusive . unlock (); //\u89e3\u9501 }","title":"2.26 \u4e92\u65a5\u9501\u6a21\u5f0f mutex"},{"location":"C%2B%2B/oop/#227-async-future","text":"#include <future> #include <chrono> int worker ( int arg ) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int main () { future < int > fut = async ( worker , 403 ); // auto fut = async(worker, 403); // future\u7684\u63a5\u53e3 fut . wait (); // \u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u7b49\u5f85\u5f02\u6b65\u7ebf\u7a0b\u7ed3\u675f int res = fut . get (); // get\u8fd0\u884c\u7ed3\u679c\uff1b\u4e00\u4e2afuture\u53ea\u80fd\u88abget\u4e00\u6b21 fut . wait_for ( chrono :: milliseconds ( 100 )); // \u8d85\u65f6\u540e\u8fd4\u56de\u4e00\u4e2afuture_status\uff0c\u5e76\u53d6\u6d88\u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u963b\u585e /* future_status::deferred \u4ecd\u672a\u542f\u52a8 future_status::ready \u7ed3\u679c\u5c31\u7eea future_status::timeout \u5df2\u8d85\u8fc7\u65f6\u9650\uff0c\u5f02\u6b65\u7ebf\u7a0b\u4ecd\u5728\u6267\u884c */ return 0 ; }","title":"2.27 \u5f02\u6b65 async future"},{"location":"C%2B%2B/oop/#2271","text":"int worker ( int arg ) { /* ... */ } // \u8fd4\u56deint\u503c\u7684\u4e00\u4e2a\u5de5\u4f5c\u51fd\u6570 int input () { /* ... */ } vector < future < int >> future_lists ; // \u5f02\u6b65\u7ebf\u7a0b\u5bf9\u8c61\u8868 vector < int > num_lists ; // \u8f93\u5165\u6570\u636e\u8868 int main () { while ( ture ) { int num = input (); //\u521b\u5efa\u5f02\u6b65\u7ebf\u7a0b future_lists . push_back ( async ( worker , num )); num_lists . push_back ( num ); res_lists . push_back ( 0 ); //\u901a\u8fc7future\u68c0\u6d4b\u6bcf\u4e00\u4e2a\u5f02\u6b65\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210 for ( int i = future_lists . size () - 1 ; i >= 0 ; i -- ) { //\u6bcf\u4e2afuture\u7b49\u5f850.1\u79d2\u6765\u68c0\u6d4b\u72b6\u6001 future_status status = future_lists [ i ]. wait_for ( chrono :: milliseconds ( 100 )); if ( status == future_status :: ready ) // \u5df2\u7ecf\u5f97\u5230\u4e86\u7ed3\u679c { // \u8f93\u51fa\u7ed3\u679c cout << num_lists [ i ] << \" : \" << future_lists [ i ]. get () << endl ; //\u5220\u9664\u5df2\u7ecf\u5b8c\u6210\u4efb\u52a1\u7684future future_lists . erase ( future_lists . begin () + i ); num_lists . erase ( num_lists . begin () + i ); } } return 0 ; }","title":"2.27.1 \u8f6e\u8be2"},{"location":"C%2B%2B/oop/#228-promise","text":"","title":"2.28 promise"},{"location":"C%2B%2B/oop/#229","text":"double work ( int & x ); // [\u8fd4\u56de\u503c] (*[\u58f0\u660e\u7684\u53d8\u91cf\u540d])([\u53c2\u6570\u7c7b\u578b\u5217\u8868]) double ( * fp )( int & ) = work ; // \u81ea\u52a8\u63a8\u5bfc auto fp = work ;","title":"2.29 \u51fd\u6570\u6307\u9488"},{"location":"C%2B%2B/oop/#230","text":"\u7c7b\u7684\u5bf9\u8c61\uff0c\u7528\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u770b\u505a\u51fd\u6570\u5bf9\u8c61\u3002\u672b\u5c3e\u5e26\u62ec\u53f7\u3002 // \u4eff\u7167greater<int>()\u5b9e\u73b0\u51fd\u6570\u5bf9\u8c61 template < class T > class Greater { public : bool operator ()( const T & a , const T & b ) const { // \u91cd\u8f7d()\uff1b\u7528\u4e8e\u6392\u5e8f\u7684cmp\u51fd\u6570\u7684\u7279\u70b9\uff1a\u4e09\u4e2aconst return a > b ; } }; Greater < double > ()( 4.3 , 1.0 );","title":"2.30 \u51fd\u6570\u5bf9\u8c61"},{"location":"C%2B%2B/oop/#231-function","text":"function\u4e3a\u51fd\u6570\u6307\u9488\u4e0e\u5bf9\u8c61\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3 // function<[\u8fd4\u56de\u503c](\u53c2\u6570\u5217\u8868)> func = f; void process ( function < int () > f1 , function < double ( int ) > f2 ) {} int work1 (); class Work2 { public : double operator ()( int a ) { /* ... */ } }; process ( work1 , Work2 ());","title":"2.31 function \u7c7b"},{"location":"C%2B%2B/oop/#232","text":"#include <memory>","title":"2.32 \u667a\u80fd\u6307\u9488"},{"location":"C%2B%2B/oop/#2321-unique_ptr","text":"\u72ec\u5360\u3002\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u8be5\u5bf9\u8c61\u3002 unique_ptr < string > p3 ( new string ( \"auto\" )); unique_ptr < string > p4 \uff1b // \u4e0d\u80fd\u518d p4 = p3; // \u8fd9\u6837new\u5b8c\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u8bb0\u5f97\u53bbdelete\u4e86\uff0c\u907f\u514d\u4e86\u5185\u5b58\u6cc4\u6f0f","title":"2.32.1 unique_ptr"},{"location":"C%2B%2B/oop/#2322-shared_ptr","text":"\u5171\u4eab\u3002\u8ba1\u6570\u3002\u591a\u4e2a\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u6307\u5411\u76f8\u540c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u548c\u5176\u76f8\u5173 \u8d44\u6e90\u4f1a\u5728\u201c\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u88ab\u9500\u6bc1\u201d\u65f6\u5019\u91ca\u653e \u3002 // \u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u88f8\u6307\u9488\u521d\u59cb\u5316\u591a\u4e2a\u667a\u80fd\u6307\u9488 int * p = new int (); shared_ptr < int > p1 ( p ); shared_ptr < int > p2 ( p ); // \u4f1a\u4ea7\u751f\u591a\u4e2a\u8f85\u52a9\u6307\u9488\uff01 shared_ptr < int > sp ( new int ( 1 )); string * s1 = new string ( \"s1\" ); shared_ptr < string > sp1 ( s1 ); shared_ptr < string > sp2 ; sp2 = sp1 ; cout << sp1 . use_count () << endl ; //\u67e5\u770b\u5f15\u7528\u8ba1\u6570 cout << sp2 . use_count () << endl ; cout << sp1 . unique () << endl ; // \u662f\u5426\u72ec\u5360 cout << sp1 << endl ; // sp1\u4ee3\u8868\u7684\u6307\u9488 cout << sp1 . get () << endl ; // \u540c\u4e0a cout << sp1 << endl ; // \"s1\"\uff1b\u76f8\u5f53\u4e8e*(sp1\u4ee3\u8868\u7684\u6307\u9488)\uff0c\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61 sp1 . reset (); // \u6e05\u9664\u6307\u9488\u5e76\u51cf\u5c11\u5f15\u7528\u8ba1\u6570 // \u667a\u80fd\u6307\u9488\u7684\u5411\u4e0b\u8f6c\u6362 dynamic_pointer_cast < Child > ( p );","title":"2.32.2 shared_ptr"},{"location":"C%2B%2B/oop/#2323-weak_ptr","text":"\u6307\u5411\u5bf9\u8c61\uff0c\u4f46\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u3002 shared_ptr < int > sp ( new int ( 3 )); weak_ptr < int > wp1 = sp ; wp . use_count () //\u83b7\u53d6\u5f15\u7528\u8ba1\u6570 wp . reset () //\u6e05\u9664\u6307\u9488 wp . expired () //\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u65e0\u6548 sp = wp . lock () //\u4ece\u5f31\u5f15\u7528\u83b7\u5f97\u4e00\u4e2a\u667a\u80fd\u6307\u9488","title":"2.32.3 weak_ptr \u5f31\u5f15\u7528"},{"location":"C%2B%2B/oop/#233-lambda","text":"[ capture ] ( parameters ) mutable -> return - type { statement } []( int x ) { return x % 2 == 0 ;} // \u5224\u65adx\u662f\u5426\u662f\u5076\u6570","title":"2.33 Lambda \u51fd\u6570"},{"location":"C%2B%2B/oop/#234","text":"\u80fd\u4ee5\u6700\u5c11\u7684\u4ee3\u7801\u53d8\u52a8\u5b8c\u6210\u529f\u80fd\u7684\u589e\u51cf","title":"2.34 \u884c\u4e3a\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2341","text":"//\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public : virtual ~ Iterator () { } virtual Iterator & operator ++ () = 0 ; virtual float & operator ++ ( int ) = 0 ; virtual float & operator * () = 0 ; virtual float * operator -> () = 0 ; virtual bool operator != ( const Iterator & other ) const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; class Collection { public : virtual ~ Collection () { } virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float * _data ; //ArrayCollection\u7684\u6570\u636e int _index ; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public : ArrayIterator ( float * data , int index ) : _data ( data ), _index ( index ) { } ArrayIterator ( const ArrayIterator & other ) : _data ( other . _data ), _index ( other . _index ) { } ~ ArrayIterator () { } Iterator & operator ++ () { _index ++ ; return * this ; } /* Iterator operator++(int) { ArrayIterator ret(*this); _index++; return ret; } */ float & ArrayIterator :: operator ++ ( int ) { _index ++ ; return _data [ _index - 1 ]; } float & operator * () //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c { return * ( _data + _index ); } float * operator -> () { return ( _data + _index ); } bool operator != ( const Iterator & other ) const //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e { return ( _data != (( ArrayIterator * )( & other )) -> _data || _index != (( ArrayIterator * )( & other )) -> _index ); } }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator ; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float * _data ; int _size ; public : ArrayCollection () : _size ( 10 ) { _data = new float [ _size ]; } ArrayCollection ( int size , float * data ) : _size ( size ) { _data = new float [ _size ]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for ( int i = 0 ; i < size ; i ++ ) * ( _data + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] _data ; } int size () { return _size ; } Iterator * begin () const //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator ( _data , 0 ); } Iterator * end () const //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e { return new ArrayIterator ( _data , _size ); } }; // in main: float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * collection = new ArrayCollection ( 10 , scores ); Iterator * begin = collection -> begin (); Iterator * end = collection -> end (); int passed = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ++ ; } cout << passed << endl ; // 5 \u5b9a\u4e49\u5b9e\u73b0\u5206\u5f00\u7248\u672c\uff1a //\u8fed\u4ee3\u5668\u57fa\u7c7b class Iterator { public : virtual ~ Iterator () { } virtual Iterator & operator ++ () = 0 ; virtual Iterator & operator ++ ( int ) = 0 ; virtual float & operator * () = 0 ; virtual float * operator -> () = 0 ; virtual bool operator != ( const Iterator & other ) const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; class Collection { public : virtual ~ Collection () { } virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; //\u7ee7\u627f\u81ea\u8fed\u4ee3\u5668\u57fa\u7c7b\u5e76\u914d\u5957ArrayCollection\u4f7f\u7528\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { float * _data ; //ArrayCollection\u7684\u6570\u636e int _index ; //\u6570\u636e\u8bbf\u95ee\u5230\u7684\u4e0b\u6807 public : ArrayIterator ( float * data , int index ) : _data ( data ), _index ( index ) { } ArrayIterator ( const ArrayIterator & other ) : _data ( other . _data ), _index ( other . _index ) { } ~ ArrayIterator () { } Iterator & operator ++ (); Iterator & operator ++ ( int ); float & operator * (); float * operator -> (); bool operator != ( const Iterator & other ) const ; }; class ArrayCollection : public Collection { //\u5e95\u5c42\u4e3a\u6570\u7ec4\u7684\u5b58\u50a8\u7ed3\u6784\u7c7b friend class ArrayIterator ; //friend\u53ef\u4ee5\u4f7f\u5f97\u914d\u5957\u7684\u8fed\u4ee3\u5668\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e float * _data ; int _size ; public : ArrayCollection () : _size ( 10 ){ _data = new float [ _size ]; } ArrayCollection ( int size , float * data ) : _size ( size ) { _data = new float [ _size ]; //\u5f00\u8f9f\u6570\u7ec4\u7a7a\u95f4\u7528\u4ee5\u5b58\u50a8\u6570\u636e for ( int i = 0 ; i < size ; i ++ ) * ( _data + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] _data ; } int size () { return _size ; } Iterator * begin () const ; Iterator * end () const ; }; Iterator * ArrayCollection :: begin () const { //\u5934\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator ( _data , 0 ); } Iterator * ArrayCollection :: end () const { //\u5c3e\u8fed\u4ee3\u5668\uff0c\u5e76\u653e\u5165\u76f8\u5e94\u6570\u636e return new ArrayIterator ( _data , _size ); } //\u8fed\u4ee3\u5668\u5404\u79cd\u5185\u5bb9\u7684\u5b9e\u73b0 Iterator & ArrayIterator :: operator ++ () { _index ++ ; return * this ; } //\u56e0\u4e3a\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c06\u7a7a\u95f4\u6307\u9488\u4f4d\u7f6e+1\u5373\u53ef\uff0c\u53ef\u4ee5\u601d\u8003\u4e0b\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8fd4\u56defloat&\uff0c\u800c\u4e0d\u662fIterator /* float& ArrayIterator::operator++(int) { _index++; return _data[_index - 1]; } */ Iterator & ArrayIterator :: operator ++ ( int ) { ArrayIterator ret ( * this ); _index ++ ; return ret ; } //\u5bf9data\u7684\u5185\u5b58\u4f4d\u7f6e\u53d6\u503c float & ArrayIterator :: operator * () { return * ( _data + _index ); } float * ArrayIterator :: operator -> () { return ( _data + _index ); } //\u5224\u65ad\u662f\u4e0d\u662f\u6307\u5411\u5185\u5b58\u7684\u540c\u4e00\u4f4d\u7f6e bool ArrayIterator :: operator != ( const Iterator & other ) const { return ( _data != (( ArrayIterator * )( & other )) -> _data || _index != (( ArrayIterator * )( & other )) -> _index ); } hasNext\u5b9e\u73b0\u6a21\u5f0f\uff1a class Item { public : Item ( const string & strName , const float & price ) : m_name ( strName ), m_price ( price ) {} Item ( const Item & item ) : m_name ( item . m_name ), m_price ( item . m_price ) {} string tostring () { std :: stringstream buffer ; buffer << m_price ; string strPrice = buffer . str (); string strName = m_name + \" :\" ; return strName + strPrice ; } private : string m_name ; float m_price ; }; class Container ; class Menu ; class MenuIterator ; class Iterator { public : virtual ~ Iterator () {} //virtual void first() = 0; virtual void next () = 0 ; virtual bool hasnext () = 0 ; virtual Item * current () = 0 ; protected : Container * m_pContainer ; }; class Container { public : virtual ~ Container () {}; protected : //Observer(){}; }; class Menu : public Container { public : virtual ~ Menu () { for ( int i = 0 ; i < m_items . size (); i ++ ) { delete m_items [ i ]; } } int size () { return m_items . size (); } Item * value ( int nIndex ) { if ( nIndex >= 0 && nIndex < m_items . size ()) { return m_items [ nIndex ]; } else { return NULL ; } } void additem ( Item & item ) { Item * pItem = new Item ( item ); m_items . push_back ( pItem ); } private : friend class MenuIterator ; vector < Item *> m_items ; }; class MenuIterator : public Iterator { Menu * m_menu ; int curpos ; public : MenuIterator ( Menu & a ) : m_menu ( & a ), curpos ( 0 ) {} /*virtual void first() { curpos=0; }*/ virtual void next () { curpos ++ ; } virtual bool hasnext () { if ( curpos >= 0 && curpos < m_menu -> m_items . size ()) return true ; else return false ; } virtual Item * current () { return m_menu -> value ( curpos ); } }; int main () { Item it1 ( \"chicken\" , 10.0 ); Item it2 ( \"Apple\" , 5.0 ); Item it3 ( \"Beaf\" , 20.0 ); Item it4 ( \"soup\" , 15.0 ); Menu menu ; menu . additem ( it1 ); menu . additem ( it2 ); menu . additem ( it3 ); menu . additem ( it4 ); Iterator * iter = new MenuIterator ( menu ); while ( iter -> hasnext ()) { Item * pItem = iter -> current (); if ( pItem ) cout << pItem -> tostring () << endl ; iter -> next (); } }","title":"2.34.1 \u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2342","text":"\u62bd\u8c61\u7236\u7c7b\u5b9a\u4e49\u63a5\u53e3\u3001\u6d41\u7a0b\uff0c\uff08\u6bcf\u79cd\u7ec4\u5408\u7684\uff09\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\u3002\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\u3002 \u62bd\u8c61\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u3002 \u5219\u4e00\u5171\u9700\u8981m*n\u4e2a\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 class AbstractClass { public : virtual void operation1 () = 0 ; virtual void operation2 () = 0 ; void run () { // \u5b9a\u4e49\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b operation1 (); operation2 (); } }; class ConcreteA : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408A public : void operation1 () { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteA::operation1\" << endl ; } void operation2 () { cout << \"ConcreteA::operation2\" << endl ; } }; class ConcreteB : public AbstractClass { // \u5b9e\u73b0\u65b9\u6848\u7ec4\u5408B public : void operation1 () { // \u5b9a\u4e49\u4e0d\u540c\u7684\u64cd\u4f5c cout << \"ConcreteB::operation1\" << endl ; } void operation2 () { cout << \"ConcreteB::operation2\" << endl ; } }; AbstractClass * absClass [] = { new ConcreteA (), new ConcreteB () }; for ( auto x : absClass ) { x -> run (); delete x ; }","title":"2.34.2 \u6a21\u677f\u65b9\u6cd5"},{"location":"C%2B%2B/oop/#2343","text":"\u62bd\u8c61\u7c7b\u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b\uff0c\u521d\u59cb\u5316\u65f6\u63a5\u6536\u5404\u6b65\u64cd\u4f5c\u7684\u5177\u4f53\u7684\u7b56\u7565\u5b50\u7c7b\u3002 \u7236\u7c7b\uff1a\u4e00\u6b21\u5b8c\u6210\u4e24\u4e2a\u64cd\u4f5c\u3002\u64cd\u4f5c1\u6709m\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u64cd\u4f5c2\u6709n\u79cd\u5b9e\u73b0\u7b56\u7565\u3002 \u5219\u4e00\u5171\u9700\u8981m+n\u4e2a\u7b56\u7565\u5b50\u7c7b\u5b9e\u73b0\u5168\u90e8\u5b8c\u6210\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002 \u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 class AbstractClass { // \u83b7\u53d6\u4e0d\u540c\u7684\u7b56\u7565\u7c7b\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u7b56\u7565\u6307\u9488 Op1Strategy * op1_strategy ; Op2Strategy * op2_strategy ; public : // \u5404\u4e2a\u7b56\u7565\u7c7b\u7684\u7ec4\u5408 AbstractClass ( Op1Strategy * op1 , Op2Strategy * op2 ) : op1_strategy ( op1 ), op2_strategy ( op2 ) {} // \u5b9a\u4e49\u64cd\u4f5c\u6d41\u7a0b void run () { op1_strategy -> operate (); // \u6267\u884c\u7b56\u7565 op2_strategy -> operate (); } }; // \u64cd\u4f5c1\u7b56\u7565\u57fa\u7c7b class Op1Strategy { public : virtual void operate () = 0 ; } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b01 class Op1StrategyImpl1 : public Op1Strategy { public : void operate () { cout << \"Operation1 Implementation 1\" << endl ; } } // \u64cd\u4f5c1\u5177\u4f53\u5b9e\u73b02 class Op1StrategyImpl2 : public Op1Strategy { public : void operate () { cout << \"Operation1 Implementation 2\" << endl ; } } // in main: Op1StrategyImpl1 * op1imp1 = new Op1StrategyImpl1 (); Op2StrategyImpl1 * op2imp1 = new Op2StrategyImpl1 (); AbstractClass * solve = new AbstractClass ( op1imp1 , op2imp2 ); solve -> run ();","title":"2.34.3 \u7b56\u7565\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#235","text":"\u80fd\u5728\u7ed3\u6784\u5c42\u9762\u4e0a\u5c3d\u53ef\u80fd\u7684\u89e3\u8026\u5408","title":"2.35 \u7ed3\u6784\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2351","text":"\u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u7c7b\u53ef\u4ee5\u5728\u7edf\u4e00\u7684\u63a5\u53e3\u73af\u5883\u4e0b\u5de5\u4f5c\u3002","title":"2.35.1 \u9002\u914d\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#23511","text":"//\u5806\u6808\u57fa\u7c7b class Stack { public : virtual ~ Stack () { } virtual bool full () = 0 ; virtual bool empty () = 0 ; virtual void push ( int i ) = 0 ; virtual void pop () = 0 ; virtual int size () = 0 ; virtual int top () = 0 ; } class Vector2Stack : public Stack { private : std :: vector < int > m_data ; //\u5c06vector\u7684\u63a5\u53e3\u7ec4\u5408\u8fdb\u6765\u5b9e\u73b0\u5177\u4f53\u529f\u80fd const int m_size ; public : Vector2Stack ( int size ) : m_size ( size ) { } bool full () { return ( int ) m_data . size () >= m_size ; } //\u6ee1\u6808\u68c0\u6d4b bool empty () { return ( int ) m_data . size () == 0 ; } //\u7a7a\u6808\u68c0\u6d4b void push ( int i ) { m_data . push_back ( i ); } //\u5165\u6808 void pop () { if ( ! empty ()) m_data . pop_back (); } //\u51fa\u6808 int size () { return m_data . size (); } //\u83b7\u53d6\u5806\u6808\u5df2\u7528\u7a7a\u95f4 int top () { //\u83b7\u53d6\u6808\u5934\u5185\u5bb9 if ( ! empty ()) return m_data [ m_data . size () -1 ]; else return INT_MIN ; } }; Vector2Stack stack ( 10 );","title":"2.35.1.1 \u7ec4\u5408\u9002\u914d"},{"location":"C%2B%2B/oop/#23512","text":"//\u76f4\u63a5\u7ee7\u627fvector\u5e76\u6539\u9020\u63a5\u53e3\uff0c\u91c7\u7528\u79c1\u6709\u7ee7\u627f\u53ef\u4ee5\u4f7f\u5f97\u5916\u754c\u53ea\u80fd\u63a5\u89e6\u5230Vector2Stack\u4e2d\u7684\u63a5\u53e3 class Vector2Stack : private std :: vector < int > , public Stack { public : Vector2Stack ( int size ) : vector < int > ( size ) { } bool full () { return false ; } bool empty () { return vector < int >:: empty (); } void push ( int i ) { push_back ( i ); } void pop () { pop_back (); } int size () { return vector < int >:: size (); } int top () { return back (); } }; Vector2Stack stack ( 10 );","title":"2.35.1.2 \u7ee7\u627f\u9002\u914d"},{"location":"C%2B%2B/oop/#2352","text":"\u5728\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u5c42\uff0c\u5c06\u590d\u6742\u64cd\u4f5c\u5305\u88f9\u5728\u5185\u90e8\u4e0d\u5bf9\u5916\u90e8\u7c7b\u5f00\u653e\uff0c\u4ec5\u5bf9\u5916\u5f00\u653e\u529f\u80fd\u63a5\u53e3\uff0c\u5373\u53ef\u5b8c\u6210\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd9\u5c31\u662f\u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f\u3002 \u9002\u914d\u5668\u7684\u6838\u5fc3\u8981\u7d20\u662f\u53d8\u6362\u63a5\u53e3\uff0c\u4ee3\u7406\u7684\u6838\u5fc3\u8981\u7d20\u662f\u5206\u5272\u8bbf\u95ee\u5bf9\u8c61\u4e0e\u88ab\u8bbf\u95ee\u5bf9\u8c61\u4ee5\u51cf\u5c11\u8026\u5408\uff0c\u5e76\u80fd \u5728\u4e2d\u95f4\u589e\u52a0\u5404\u79cd\u63a7\u5236\u529f\u80fd \u3002 template < typename T > //\u63d0\u524d\u58f0\u660e\u667a\u80fd\u6307\u9488\u6a21\u677f\u7c7b class SmartPtr ; //\u8f85\u52a9\u6307\u9488\uff0c\u7528\u4e8e\u5b58\u50a8\u6307\u9488\u8ba1\u6570\u4ee5\u53ca\u5c01\u88c5\u5b9e\u9645\u6307\u9488\u5730\u5740 template < typename T > class U_Ptr { private : friend class SmartPtr < T > ; U_Ptr ( T * ptr ) : p ( ptr ), count ( 1 ) { } ~ U_Ptr () { delete p ; } int count ; T * p ; //\u6570\u636e\u5b58\u653e\u5730\u5740 }; template < typename T > //\u667a\u80fd\u6307\u9488 class SmartPtr { private : U_Ptr < T > * rp ; //\u8fdb\u884c\u5b9e\u9645\u6307\u9488\u64cd\u4f5c\u7684\u8f85\u52a9\u6307\u9488 public : SmartPtr ( T * ptr ) : rp ( new U_Ptr < T > ( ptr )) { } //\u8c03\u52a8\u62f7\u8d1d\u6784\u9020\u5373\u589e\u52a0\u5f15\u7528\u8ba1\u6570 SmartPtr ( const SmartPtr < T > & sp ) : rp ( sp . rp ) { ++ rp -> count ; } SmartPtr & operator = ( const SmartPtr < T >& rhs ) { ++ rhs . rp -> count ; //\u8d4b\u503c\u53f7\u540e\u7684\u6307\u9488\u5f15\u7528\u52a01 if ( -- rp -> count == 0 ) delete rp ; //\u539f\u5185\u90e8\u6307\u9488\u5f15\u7528\u51cf1 rp = rhs . rp ; //\u4ee3\u7406\u65b0\u7684\u6307\u9488 return * this ; } ~ SmartPtr () { //\u53ea\u6709\u5f15\u7528\u6b21\u6570\u4e3a0\u624d\u4f1a\u91ca\u653e if ( -- rp -> count == 0 ) delete rp ; } //\u5bf9\u667a\u80fd\u6307\u9488\u64cd\u4f5c\u7b49\u540c\u4e8e\u5bf9\u5185\u90e8\u8f85\u52a9\u6307\u9488\u64cd\u4f5c T & operator * () { return * ( rp -> p ); } T * operator -> () { return rp -> p ; } }; int main ( int argc , char * argv []) { //\u58f0\u660e\u6307\u9488 int * i = new int ( 2 ); //\u4f7f\u7528\u4ee3\u7406\u6765\u5305\u88f9\u6307\u9488 SmartPtr < int > ptr1 ( i ); SmartPtr < int > ptr2 ( ptr1 ); SmartPtr < int > ptr3 = ptr2 ; //\u4e4b\u540e\u7684\u64cd\u4f5c\u5747\u901a\u8fc7\u4ee3\u7406\u8fdb\u884c cout << * ptr1 << endl ; * ptr1 = 20 ; cout << * ptr2 << endl ; return 0 ; }","title":"2.35.2 \u4ee3\u7406/\u59d4\u6258\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2353","text":"\u7edf\u4e00\u7ee7\u627f\u81eaComponent\u3002 \u6700\u540e\u662f\u94fe\u5f0f\u8c03\u7528\u3002 #include <iostream> using namespace std ; //\u6240\u6709View\u7684\u57fa\u7c7b class Component { public : virtual ~ Component () { } virtual void draw () = 0 ; }; //\u4e00\u4e2a\u57fa\u672c\u7684TextView\u7c7b class TextView : public Component { public : void draw () { cout << \"TextView.\" << endl ; } }; //\u88c5\u9970\u5668\u7684\u6838\u5fc3\u5185\u6db5\u5728\u4e8e\u7528\u88c5\u9970\u5668\u7c7b\u6574\u4f53\u5305\u88f9\u6539\u52a8\u4e4b\u524d\u7684\u7c7b\uff0c\u4ee5\u4fdd\u7559\u539f\u6765\u7684\u5168\u90e8\u63a5\u53e3 //\u5728\u539f\u6765\u63a5\u53e3\u4fdd\u7559\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u65b0\u529f\u80fd\u6269\u5145 class Decorator : public Component { //\u8fd9\u91cc\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8ba9Decorator\u80fd\u591f\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u4e0d\u65ad\u589e\u52a0\u65b0\u529f\u80fd Component * _component ; public : Decorator ( Component * component ) : _component ( component ) { } virtual void addon () = 0 ; void draw () { addon (); _component -> draw (); } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u8fb9\u6846 class Border : public Decorator { public : Border ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"Bordered \" ; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u6c34\u5e73\u6eda\u52a8\u6761 class HScroll : public Decorator { public : HScroll ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"HScrolled \" ; } }; //\u5305\u88f9\u539fComponent\u5e76\u6269\u5145\u5782\u76f4\u6eda\u52a8\u6761 class VScroll : public Decorator { public : VScroll ( Component * component ) : Decorator ( component ) { } void addon () { cout << \"VScrolled \" ; } }; int main () { //\u57fa\u7840\u7684textView TextView textView ; //\u5728\u57fa\u7840textView\u4e0a\u589e\u52a0\u6eda\u52a8\u6761 VScroll vs_TextView ( & textView ); //\u5728\u589e\u52a0\u5782\u76f4\u6eda\u52a8\u6761\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6eda\u52a8\u6a2a\u6761 HScroll hs_vs_TextView ( & vs_TextView ); //\u5728\u589e\u52a0\u6c34\u5e73\u4e0e\u5782\u76f4\u6eda\u52a8\u6761\u4e4b\u540e\u589e\u52a0\u8fb9\u6846 Border b_hs_vs_TextView ( & hs_vs_TextView ); b_hs_vs_TextView . draw (); return 0 ; }","title":"2.35.3 \u88c5\u9970\u5668\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#236","text":"","title":"2.36 \u521b\u5efa\u578b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2361","text":"","title":"2.36.1 \u5355\u4f8b\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2362","text":"class TeaFactory { public : void setMilk ( int amount ) { ... } void setSugar ( int amount ) { ... } Tea * createTea ( const string & type ) { Tea * tea = nullptr ; if ( type == \"GreenTea\" ) tea = new GreenTea ; else if ( type == \"BlackTea\" ) tea = new Blacktea ; else ... // \u5176\u4ed6\u53ef\u80fd\u7684\u8336\u53f6\u7c7b\u578b if ( milkAmount > 0 ) tea -> addMilk (...); if ( sugarAmount > 0 ) tea -> addSugar (...); ... // \u5176\u4ed6\u7684\u5c5e\u6027\u914d\u7f6e } };","title":"2.36.2 \u5de5\u5382\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#2363","text":"class AbstractLanguageFactory { public : virtual Lexer * createLexer (); virtual Parser * createParser (); virtual Generator * createGenerator (); }; class CppFactory : public AbstractLanguageFactory { public : Lexer * createLexer () { return new CppLexer ; } Parser * createParser () { return new CppParser ; } Generator * createGenerator () { return new CppGenerator ; } }; class JavaFactory : public AbstractLanguageFactory { ... }; class Compiler { AbstractFactory * factory ; public : Compiler ( AbstractFactory * factory ) { this -> factory = factory ; } LexResult * lex ( Code * input ) { Lexer * lexer = factory -> createLexer (); return lexer -> lex ( input ); } ParseResult * parse ( LexResult * input ) { Parser * parser = factory -> createParser (); return parser -> parse ( input ); } // ... }; int main () { CppFactory * cppFactory = new CppFactory (); Compiler * cppCompiler = new Compiler ( cppFactory ); Code * code = ... LexResult * lex = cppCompiler -> lex ( code ); // ... }","title":"2.36.3 \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"C%2B%2B/oop/#3","text":"","title":"3. \u5b9e\u7528\u5de5\u5177\u7c7b\u77e5\u8bc6"},{"location":"C%2B%2B/oop/#31","text":"bool mycmp ( int a , int b ) { /* a\u5728b\u524d\u8fd4\u56detrue a\u5728b\u540e\u8fd4\u56defalse */ } sort ( arr + 0 , arr + n , mycmp ); vector < Computer > data ; // Computer \u7c7b\u91cd\u8f7d\u4e86\u201c>\u201d\u3001\u201c<\u201d sort ( data . begin (), data . end (), greater < Computer > ()); struct Cmp { bool operator () ( const Computer & _a , const Computer & _b ) { return _a . stock > _b . stock ; } }; sort ( data . begin (), data . end (), Cmp );","title":"3.1 \u6392\u5e8f"},{"location":"C%2B%2B/oop/#32","text":"","title":"3.2 \u5b57\u7b26\u4e32\u7c7b"},{"location":"C%2B%2B/oop/#33-fstream","text":"#include <fstream> fstream fs1 ( \"./input.txt\" , ios :: in ); fs1 >> a ; fstream fs2 ( \"./output.txt\" , ios :: out ); fs2 << a ; ifstream fin ( \"./input.txt\" ); ofstream fout ( \"./output.txt\" ); // \u6709f\uff01\uff01\u4e0d\u662fistream / ostream \uff01 // \u5faa\u73af\u4ece\u6587\u4ef6\u8bfb\u5165\u672a\u77e5\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u76f4\u5230\u8bfb\u5b8c\u4e3a\u6b62\u3002 while ( fin ) {}","title":"3.3 \u6587\u4ef6\u8bfb\u5199 fstream"},{"location":"C%2B%2B/oop/#34","text":"string str ; // \u8bfb\u5230\u7a7a\u683c cin >> str ; // \u8bfb\u4e00\u6574\u884c getline ( cin , str ); // \u8bfb\u5230\u7279\u5b9a\u5206\u9694\u7b26\uff1b\u53ef\u4ee5\u8bfb\u5165\u6362\u884c\u7b26 getline ( cin , str , '#' ); // \u6d41\u64cd\u7eb5\u7b97\u5b50 cin >> ws ; // ws\u7b97\u5b50\uff1b\u9664\u53bb\u524d\u5bfc\u7a7a\u683c // \u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f46\u5e76\u4e0d\u8bfb\u53d6\u3002\u5982\u679c\u5230\u7ed3\u5c3e\u4e86\u5c31\u7ec8\u6b62\u65e0\u9650\u5faa\u73af\u8bfb\u5165\u3002 int c = cin . peek (); // \u8fd4\u56de\u7684\u662fchar\u7c7b\u578b\u7684\u5b57\u7b26\uff01\uff01\u6bd4\u59820\u8fd4\u56de\u7684\u662fASCII\u780148\u3002 if ( c == EOF ) break ; cin . get (); //\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 cin . ignore ( int n = 1 , int delim = EOF ); //\u4e22\u5f03n\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u76f4\u81f3\u9047\u5230delim\u5206\u9694\u7b26 cin . peek (); //\u67e5\u770b\u4e0b\u4e00\u4e2a\u5b57\u7b26 cin . putback ( char c ); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26 cin . unget (); //\u8fd4\u8fd8\u4e00\u4e2a\u5b57\u7b26","title":"3.4 \u8f93\u5165"},{"location":"C%2B%2B/oop/#35","text":"\u683c\u5f0f\u5316\u8f93\u51fa\uff1a #include <iomanip> cout << defaultfloat ; //\u8fd8\u539f\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f cout << setprecision ( 2 ) << 3.1415926 << endl ; //\u8f93\u51fa\u7cbe\u5ea6\u8bbe\u7f6e\u4e3a2 -> 3.2 cout << oct << 12 << \" \" << hex << 12 << endl ; //\u516b\u8fdb\u5236\u8f93\u51fa -> 14 \u5341\u516d\u8fdb\u5236\u8f93\u51fa -> c cout << dec ; //\u8fd8\u539f\u5341\u8fdb\u5236 cout << setw ( 3 ) << setfill ( '*' ) << 5 << endl ; //\u8bbe\u7f6e\u5bf9\u9f50\u957f\u5ea6\u4e3a3\uff0c\u5bf9\u9f50\u5b57\u7b26\u4e3a* -> **5 cout << fixed << 2018.0 << \" \" << 0.0001 << endl ; //\u6d6e\u70b9\u6570\u8865\u5168 -> 2018.000000 0.000100 cout << scientific << 2018.0 << \" \" << 0.0001 << endl ; //\u79d1\u5b66\u8ba1\u6570\u6cd5 -> 2.018000e+03 1.000000e-04","title":"3.5 \u8f93\u51fa"},{"location":"C%2B%2B/oop/#36-string","text":"// \u8f6c\u6362\u4e3a\u5e38\u91cfchar\u5b57\u7b26\u4e32 str . c_str (); str . push_back ( 'a' ); str . append ( s2 ); str += s1 ;","title":"3.6 string"},{"location":"C%2B%2B/oop/#361","text":"string s0 ( \"0123456789\" ); string s1 ( s0 , 3 , 4 ); // \u4eces0[3]\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\u7ed3\u679c\uff1a3456 string s2 ( s0 , 4 ); // \u4eces0[4]\u5f00\u59cb\u76f4\u5230\u7ed3\u5c3e\u3002\u7ed3\u679c\uff1a456789 string s3 ( \"0123456789\" , 4 ); // \u4ece\u5934\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a4\u3002\uff08\u53d6\u524d4\u3002\uff09\u7ed3\u679c\uff1a0123 string s4 ( s0 . begin () + 2 , s0 . begin () + 6 ); // \u4eces0[2]\u5f00\u59cb\uff0c\u5230s0[5]\uff08s0[6]\u4e4b\u524d\uff09\u7ed3\u675f\u3002\u7ed3\u679c\uff1a2345 cout << s1 << endl ; cout << s2 << endl ; cout << s3 << endl ; cout << s4 << endl ;","title":"3.6.1 \u622a\u53d6"},{"location":"C%2B%2B/oop/#362-charint-stoi","text":"int atoi ( const char * str ) // Usage: #include <stdlib.h> char s ; int val = atoi ( s ); // \u8fdb\u5236\u8f6c\u6362 \uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8d77\u59cb\u4f4d\u7f6e\uff09 int a = stoi ( \"2001\" ) //a=2001 std :: string :: size_type sz ; // \u4e00\u4e2a\u5927\u5c0f\u6570\u503c size_t alias int b = stoi ( \"50 cats\" , & sz ) //b=50 sz=2 \u8bfb\u5165\u957f\u5ea6 int c = stoi ( \"40c3\" , nullptr , 16 ) //c=0x40c3 \u5341\u516d\u8fdb\u5236 int d = stoi ( \"0x7f\" , nullptr , 0 ) //d=0x7f \u81ea\u52a8\u68c0\u67e5\u8fdb\u5236 \u53cd\u8fc7\u6765\u662fitoa\u3002\u7136\u800c\u8fd9\u4e2a\u5728\u4e00\u4e9b\u73af\u5883\u4e0b\u662f\u6ca1\u6709\u7684\u3002 https://blog.csdn.net/p312011150/article/details/81273888","title":"3.6.2 char[]\u8f6c\u6574\u578bint (stoi)"},{"location":"C%2B%2B/oop/#363-number-to-string","text":"int a ; string s = to_string ( a );","title":"3.6.3 number to string"},{"location":"C%2B%2B/oop/#364-sstream","text":"ss << sth. \u653e\u8fdb\u53bb ss >> sth. \u62ff\u51fa\u6765 int string_to_int ( const string & s ) { stringstream ss ; ss << s ; int value ; ss >> value ; return value ; } string s ; cin >> s ; cout << string_to_int ( s ) << endl ; #include <sstream> using namespace std ; int main () { stringstream ss ; string s ( \"403\" ); int value = 404 ; // int to string // put int to ss ss << value ; // output ss to string ss >> s ; cout << s << endl ; // string to int // put string to ss ss << s ; // output ss to int ss >> value ; cout << value << endl ; return 0 ; }","title":"3.6.4 sstream \u8f6c\u6362"},{"location":"C%2B%2B/oop/#3641-sstream","text":"ss.clear() \u662f\u72b6\u6001\u4f4d\u3002\u6bd4\u5982\u4e0a\u4e00\u6b21\u7528\u5230\u672b\u5c3e\u65f6\u4e0b\u4e00\u6b21\u518d\u7528\u5c31\u9700\u8981clear\u3002 ss.str(\"\") \u662f\u6e05\u7a7a\u5185\u5bb9\u4ee5\u4f9b\u590d\u7528\u3002","title":"3.6.4.1 sstream\u590d\u7528\u7684\u5751"},{"location":"C%2B%2B/oop/#3642-sstream","text":"https://blog.csdn.net/liitdar/article/details/82598039","title":"3.6.4.2 sstream\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32"},{"location":"C%2B%2B/oop/#36421-ss","text":"ss << s1 << s2 << s3 ; cout << ss . str () << endl ;","title":"3.6.4.2.1 \u65b0\u7684ss\u4e00\u6b21\u6027\u62fc\u63a5"},{"location":"C%2B%2B/oop/#36422-ss","text":"\u9700\u8981\u7528\u5230clear\u6765\u6e05\u695a\u201c\u9519\u8bef\u72b6\u6001\u201d\u3002 https://www.cnblogs.com/elenno/p/stringstream_clear.html ss >> value ; // used ss . clear (); ss << \", 403\" ; // add something after being used cout << ss . str () << endl ;","title":"3.6.4.2.2 \u7528\u8fc7\u7684ss\u5728\u5c3e\u90e8\u6dfb\u52a0"},{"location":"C%2B%2B/oop/#3643-stringstream","text":"template < class InType , class OutType > OutType convert ( InType val ) { static stringstream ss ; ss . str ( \"\" ); // empty the buffer ss . clear (); // clear the state ss << val ; OutType res ; ss >> res ; return res ; }","title":"3.6.4.3 \u57fa\u4e8estringstream\u7684\u7c7b\u578b\u8f6c\u6362\u6a21\u677f\u51fd\u6570"},{"location":"C%2B%2B/oop/#37-vector","text":"vector < double > vec = { 0 , 1 , 2 , 3 , 4 , 5 }; for ( int i = 6 ; i <= 10 ; i ++ ) vec . push_back ( i ); vec . insert ( vec . begin () + 4 , 3.5 ); // \u5728index=4\u524d\u63d2\u51653.5 vec . erase ( vec . begin () + 10 ); // \u5220\u9664index=10\uff08\u5143\u7d209\u88ab\u5220\u6389\u4e86\uff09 vec . emplace ( vec . begin () + 10 , 9 ); // \u5728index=10\u524d\u63d2\u51659 vec . emplace_back ( 11 ); vector < double > vec2 ( vec . begin () + 1 , vec . begin () + 3 ); // [\u5de6, \u53f3) for ( auto & i : vec ) { cout << i << ' ' ; } cout << endl ; for ( auto & i : vec2 ) { cout << i << ' ' ; }","title":"3.7 vector"},{"location":"C%2B%2B/oop/#38","text":"#include <regex> // \u5b57\u7b26\u4e32\u80fd\u5426\u5b8c\u5168\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f string s ( \"subject\" ); regex e ( \"sub.*\" ); cout << regex_match ( s , e ) << endl ; // \u5b8c\u5168\u5339\u914d\uff1b\u5206\u7ec4\u6355\u83b7 // \u6bcf\u7ec4\u7528()\u6807\u8bc6\uff1b0\u53f7\u6c38\u8fdc\u662f\u88ab\u5339\u914d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab // \u4e0d\u60f3\u6355\u83b7\u7684\u5206\u7ec4\u8fd9\u6837\u6807\u8bb0\uff1a (?:pattern) string s ( \"ver10\" ); regex e ( R \"(ver(\\d+) ) \") ; smatch sm ; // smatch \u5bf9\u8c61\u5b58\u50a8\u5206\u7ec4\u7ed3\u679c if ( regex_match ( s , sm , e )) // \u5224\u65ad\u662f\u5426\u6210\u529f\u5e76\u5b58\u50a8\u7ed3\u679c { cout << sm . size () << endl ; // smatch\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\uff1b\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9string\u5bf9\u8c61 for ( auto & i : sm ) // for (int i = 0; i < sm.size(); i++) { cout << i << endl ; } } // \u641c\u7d22 // \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u5b50\u4e32\uff0c\u5b58\u50a8\u5230smatch\u5bf9\u8c61\u4e2d smatch result ; regex_research ( s , result , re ); smatch sm ; name = reg_match ( state , \"(My name is |I am )( \\\\ w+)\" )[ 2 ]; sm = reg_match ( state , \"([1-9] \\\\ d{0,3})[-.](1[0-2]|0?[1-9])[-.](3[01]|[12] \\\\ d|0?[1-9])\" ); birth = Date ( sm [ 1 ], sm [ 2 ], sm [ 3 ]); phone = reg_match ( state , \" \\\\ d{11}\" )[ 0 ]; email = reg_match ( state , \" \\\\ w+.?@[a-zA-Z0-9_-]+( \\\\ .[a-zA-Z0-9_-]+)+\" )[ 0 ]; // \u66ff\u6362 string s ( \"this subject has a submarine\" ); regex e ( R \"(sub[\\S]*)\") ; //regex_replace\u8fd4\u56de\u503c\u5373\u4e3a\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32 cout << regex_replace ( s , e , \"SUB\" ) << endl ; // this SUB has a SUB // regex_replace(s, re, s1) // \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u66ff\u6362\u4e0a\u53bb\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7 // $& \u4ee3\u8868re\u5339\u914d\u7684\u5b50\u4e32 // $1, $2 \u4ee3\u8868re\u5339\u914d\u7684\u7b2c1/2\u4e2a\u5206\u7ec4 string s ( \"this subject has a submarine\" ); regex e ( R \"((sub) ([ \\ S ] * )) \") ; cout << regex_replace ( s , e , \"$1 and [$2]\" ) << endl ; // this sub and [ject] has a sub and [marine] http://tool.chinaz.com/regex/ \u8d2a\u5a6a\u4e0e\u61d2\u60f0","title":"3.8 \u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"C%2B%2B/oop/#39-isdigit","text":"isdigit ( '3' ); // \u53c2\u6570\u63a5\u6536\u4e00\u4e2aint\uff1b\u63a5\u6536\u5230EOF\u8fd4\u56defalse\u53ef\u7528\u4e8e\u5224\u65ad\u8bfb\u5165\u7ed3\u675f","title":"3.9 \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 isdigit"},{"location":"Computer%20Network/1-introduction/","text":"1 Introduction Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) This is my notes for (self-)learning Computer Network (2021 Spring course at school), mainly following the textbook Computer Networking - A Top Down Approach . 1. \u4ea4\u6362\u65b9\u5f0f\u53ca\u5176\u4f18\u52a3 2. \u534f\u8bae\u5206\u5c42\u7ed3\u6784 \u534f\u8bae\u6570\u636e\u5355\u5143 Protocol Data Unit Ref: PDU \u6307\u67d0\u4e00\u5c42\uff0c\u6216\u8005\u5bf9\u7b49\u5c42\u4e4b\u95f4\uff0c\u6570\u636e\u8fdb\u884c\u4f20\u9012\u7684\u6570\u636e\u5355\u4f4d\u3002 \u6bd4\u5982\uff1a\u7269\u7406\u5c42\u7684PDU\u662f\u6570\u636e\u4f4d\uff08bit\uff09\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684PDU\u662f\u6570\u636e\u5e27\uff08frame\uff09\u2026\u2026 3. \u670d\u52a1\u539f\u8bed \u4e24\u79cd\u670d\u52a1\uff1a\u9762\u5411\u8fde\u63a5\u3001\u65e0\u8fde\u63a5 4. Reference Models 4.1 OSI Open Systems Interconnection \u81ea\u4e0b\u800c\u4e0a\uff1a 4.1.1 Physical Layer \u5982\u4f55\u5728\u4fe1\u9053\u4e0a\u4f20\u8f93bits stream\uff08bits on the wire\uff09 4.1.2 Data Link Layer Neighbouring: \u76f8\u90bb\u7f51\u7edc\u5b9e\u4f53\uff08\uff1f\uff09\u95f4\u7684\u6570\u636e\u4f20\u8f93 Framing: \u4ecebits stream\u63d0\u53d6\u51faframe\uff08\u5e27\uff09 4.1.3 Network Layer host to host: \u5c06packet\u8de8\u8d8a\u7f51\u7edc\uff0c\u4ece\u6e90\u8bbe\u5907\u53d1\u9001\u5230\u76ee\u7684\u8bbe\u5907\uff08 \u5b9a\u4f4d\u5230\u4e3b\u673a \uff09 Routing: \u8def\u7531\uff0c\u9009\u53d6\u8f6c\u53d1\u8def\u5f84 4.1.4 Transport Layer port to port: \u4ece\u6e90\u7aef\u53e3\u53d1\u9001\u5230\u76ee\u7684\u7aef\u53e3\uff08 \u8fdb\u7a0b\u5230\u8fdb\u7a0b \uff09\uff08\u5b9a\u4f4d\u5230\u8fdb\u7a0b\uff09 4.1.5 Session Layer 4.1.6 Presentation Layer 4.1.7 Application Layer 4.2 TCP/IP Transmission Control Protocol / Internet Protocol Adopted by ARPANET(Advanced Research Projects Agency Network). Named by two main protocols. Concept: Smart host & Simple Network. \u81ea\u4e0a\u800c\u4e0b\uff1a Ref: TCP/IP Model 4.2.1 Process/Application Layer \u5e94\u7528\u5c42 \u4e0a\u9762\u7684\u9ad8\u5c42\u534f\u8bae\uff1aDNS, HTTP, FTP, SMTP, ... 4.2.2 Host-to-Host/Transport Layer \u7aef\u5230\u7aef\u4f20\u8f93\uff1aTCP, UDP 4.2.3 Internet Layer host\u5c06packet\u6ce8\u5165\u7f51\u7edc\uff0cpacket\u72ec\u7acb\u4f20\u8f93\u81f3\u76ee\u7684\u5730 \u5b9a\u4e49\u4e86packet\u7684\u683c\u5f0f\u4e0e\u534f\u8bae\uff1a IPv4 and IPv6 4.2.4 Network Access/Link Layer This layer corresponds to the combination of Data Link Layer and Physical Layer of the OSI model. It looks out for hardware addressing and the protocols present in this layer allows for the physical transmission of data. 4.3 Comparison Data Link Layer: frame Network Layer: packet Transport Layer: segment Application Layer: message 5. International Organizations ISO: International Organization for Standardization IETF: Internet Engineering Task Force \u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4\uff08\u6bcf\u4eba\u90fd\u53ef\u4ee5\u662fIETFer\u3002\uff09 Internet \u6807\u51c6\u4ee5RFC (Request for Comments) \u7684\u5f62\u5f0f\u516c\u5f00\u3002\u6210\u4e3a\u4e86\u4e8b\u5b9e\u6807\u51c6\u3002 6. Unit of measurement PPS: Packet Per Sec. Delay: \u4ece\u4e00\u7aef\u4f20\u8f93\u81f3\u53e6\u4e00\u7aef\u6240\u9700\u7684\u65f6\u95f4 RTT: Round-Trip TIme \u5f80\u8fd4\u65f6\u5ef6\uff08e.g. ping \uff09 \u65f6\u5ef6\u5e26\u5bbd\u79ef Throughput \u541e\u5410\u91cf goodput \u6709\u6548\u541e\u5410\u91cf\uff08\u76ee\u7684\u5730\u6b63\u786e\u63a5\u53d7\u5230\u7684\u6709\u7528\u4fe1\u606f\uff09 Jitter \u65f6\u5ef6\u6296\u52a8 7. Network Security Virus: \u9700\u8981\u7528\u6237\u4ea4\u4e92\u4e0d\u65ad\u4f20\u64ad\uff08e.g. \u6253\u5f00email\u540e\u91cc\u9762\u7684\u53ef\u6267\u884c\u4ee3\u7801\u7ed9\u6240\u6709\u901a\u4fe1\u5f55\u518d\u6b21\u53d1\u9001\uff09 Worm: \u8815\u866b\u3002\u65e0\u9700\u660e\u663e\u4ea4\u4e92\uff1b\u4e0d\u65ad\u626b\u63cf\u7f51\u7edc\u4e2d\u5b58\u5728\u6f0f\u6d1e\u7684host\u3002 DoS: Denial-of_Service Attack Botnet: \u50f5\u5c38\u7f51\u7edc\u3002\u611f\u67d3bot\u7a0b\u5e8f\u3002 \u5bc6\u7801\u6cc4\u9732\uff1a\u62d6\u5e93\u3001\u6d17\u5e93\u3001\u649e\u5e93 Packet Sniffing: \u55c5\u63a2 IP spoofing: \u6b3a\u9a97\uff1b\u4f2a\u9020\u6e90IP \u9632\u5fa1\u624b\u6bb5\uff1a\u8eab\u4efd\u9a8c\u8bc1\uff1b\u4fdd\u5bc6\uff08\u52a0\u5bc6\u6280\u672f\uff09\uff1b\u5b8c\u6574\u6027\u68c0\u67e5\uff08\u6570\u5b57\u7b7e\u540d\uff09\uff1b\u8bbf\u95ee\u9650\u5236\uff08VPN\uff09\uff1b\u9632\u706b\u5899","title":"1 Introduction"},{"location":"Computer%20Network/1-introduction/#1-introduction","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) This is my notes for (self-)learning Computer Network (2021 Spring course at school), mainly following the textbook Computer Networking - A Top Down Approach .","title":"1 Introduction"},{"location":"Computer%20Network/1-introduction/#1","text":"","title":"1. \u4ea4\u6362\u65b9\u5f0f\u53ca\u5176\u4f18\u52a3"},{"location":"Computer%20Network/1-introduction/#2","text":"\u534f\u8bae\u6570\u636e\u5355\u5143 Protocol Data Unit Ref: PDU \u6307\u67d0\u4e00\u5c42\uff0c\u6216\u8005\u5bf9\u7b49\u5c42\u4e4b\u95f4\uff0c\u6570\u636e\u8fdb\u884c\u4f20\u9012\u7684\u6570\u636e\u5355\u4f4d\u3002 \u6bd4\u5982\uff1a\u7269\u7406\u5c42\u7684PDU\u662f\u6570\u636e\u4f4d\uff08bit\uff09\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684PDU\u662f\u6570\u636e\u5e27\uff08frame\uff09\u2026\u2026","title":"2. \u534f\u8bae\u5206\u5c42\u7ed3\u6784"},{"location":"Computer%20Network/1-introduction/#3","text":"\u4e24\u79cd\u670d\u52a1\uff1a\u9762\u5411\u8fde\u63a5\u3001\u65e0\u8fde\u63a5","title":"3. \u670d\u52a1\u539f\u8bed"},{"location":"Computer%20Network/1-introduction/#4-reference-models","text":"","title":"4. Reference Models"},{"location":"Computer%20Network/1-introduction/#41-osi","text":"Open Systems Interconnection \u81ea\u4e0b\u800c\u4e0a\uff1a","title":"4.1 OSI"},{"location":"Computer%20Network/1-introduction/#411-physical-layer","text":"\u5982\u4f55\u5728\u4fe1\u9053\u4e0a\u4f20\u8f93bits stream\uff08bits on the wire\uff09","title":"4.1.1 Physical Layer"},{"location":"Computer%20Network/1-introduction/#412-data-link-layer","text":"Neighbouring: \u76f8\u90bb\u7f51\u7edc\u5b9e\u4f53\uff08\uff1f\uff09\u95f4\u7684\u6570\u636e\u4f20\u8f93 Framing: \u4ecebits stream\u63d0\u53d6\u51faframe\uff08\u5e27\uff09","title":"4.1.2 Data Link Layer"},{"location":"Computer%20Network/1-introduction/#413-network-layer","text":"host to host: \u5c06packet\u8de8\u8d8a\u7f51\u7edc\uff0c\u4ece\u6e90\u8bbe\u5907\u53d1\u9001\u5230\u76ee\u7684\u8bbe\u5907\uff08 \u5b9a\u4f4d\u5230\u4e3b\u673a \uff09 Routing: \u8def\u7531\uff0c\u9009\u53d6\u8f6c\u53d1\u8def\u5f84","title":"4.1.3 Network Layer"},{"location":"Computer%20Network/1-introduction/#414-transport-layer","text":"port to port: \u4ece\u6e90\u7aef\u53e3\u53d1\u9001\u5230\u76ee\u7684\u7aef\u53e3\uff08 \u8fdb\u7a0b\u5230\u8fdb\u7a0b \uff09\uff08\u5b9a\u4f4d\u5230\u8fdb\u7a0b\uff09","title":"4.1.4 Transport Layer"},{"location":"Computer%20Network/1-introduction/#415-session-layer","text":"","title":"4.1.5 Session Layer"},{"location":"Computer%20Network/1-introduction/#416-presentation-layer","text":"","title":"4.1.6 Presentation Layer"},{"location":"Computer%20Network/1-introduction/#417-application-layer","text":"","title":"4.1.7 Application Layer"},{"location":"Computer%20Network/1-introduction/#42-tcpip","text":"Transmission Control Protocol / Internet Protocol Adopted by ARPANET(Advanced Research Projects Agency Network). Named by two main protocols. Concept: Smart host & Simple Network. \u81ea\u4e0a\u800c\u4e0b\uff1a Ref: TCP/IP Model","title":"4.2 TCP/IP"},{"location":"Computer%20Network/1-introduction/#421-processapplication-layer","text":"\u5e94\u7528\u5c42 \u4e0a\u9762\u7684\u9ad8\u5c42\u534f\u8bae\uff1aDNS, HTTP, FTP, SMTP, ...","title":"4.2.1 Process/Application Layer"},{"location":"Computer%20Network/1-introduction/#422-host-to-hosttransport-layer","text":"\u7aef\u5230\u7aef\u4f20\u8f93\uff1aTCP, UDP","title":"4.2.2 Host-to-Host/Transport Layer"},{"location":"Computer%20Network/1-introduction/#423-internet-layer","text":"host\u5c06packet\u6ce8\u5165\u7f51\u7edc\uff0cpacket\u72ec\u7acb\u4f20\u8f93\u81f3\u76ee\u7684\u5730 \u5b9a\u4e49\u4e86packet\u7684\u683c\u5f0f\u4e0e\u534f\u8bae\uff1a IPv4 and IPv6","title":"4.2.3 Internet Layer"},{"location":"Computer%20Network/1-introduction/#424-network-accesslink-layer","text":"This layer corresponds to the combination of Data Link Layer and Physical Layer of the OSI model. It looks out for hardware addressing and the protocols present in this layer allows for the physical transmission of data.","title":"4.2.4 Network Access/Link Layer"},{"location":"Computer%20Network/1-introduction/#43-comparison","text":"Data Link Layer: frame Network Layer: packet Transport Layer: segment Application Layer: message","title":"4.3 Comparison"},{"location":"Computer%20Network/1-introduction/#5-international-organizations","text":"ISO: International Organization for Standardization IETF: Internet Engineering Task Force \u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4\uff08\u6bcf\u4eba\u90fd\u53ef\u4ee5\u662fIETFer\u3002\uff09 Internet \u6807\u51c6\u4ee5RFC (Request for Comments) \u7684\u5f62\u5f0f\u516c\u5f00\u3002\u6210\u4e3a\u4e86\u4e8b\u5b9e\u6807\u51c6\u3002","title":"5. International Organizations"},{"location":"Computer%20Network/1-introduction/#6-unit-of-measurement","text":"PPS: Packet Per Sec. Delay: \u4ece\u4e00\u7aef\u4f20\u8f93\u81f3\u53e6\u4e00\u7aef\u6240\u9700\u7684\u65f6\u95f4 RTT: Round-Trip TIme \u5f80\u8fd4\u65f6\u5ef6\uff08e.g. ping \uff09 \u65f6\u5ef6\u5e26\u5bbd\u79ef Throughput \u541e\u5410\u91cf goodput \u6709\u6548\u541e\u5410\u91cf\uff08\u76ee\u7684\u5730\u6b63\u786e\u63a5\u53d7\u5230\u7684\u6709\u7528\u4fe1\u606f\uff09 Jitter \u65f6\u5ef6\u6296\u52a8","title":"6. Unit of measurement"},{"location":"Computer%20Network/1-introduction/#7-network-security","text":"Virus: \u9700\u8981\u7528\u6237\u4ea4\u4e92\u4e0d\u65ad\u4f20\u64ad\uff08e.g. \u6253\u5f00email\u540e\u91cc\u9762\u7684\u53ef\u6267\u884c\u4ee3\u7801\u7ed9\u6240\u6709\u901a\u4fe1\u5f55\u518d\u6b21\u53d1\u9001\uff09 Worm: \u8815\u866b\u3002\u65e0\u9700\u660e\u663e\u4ea4\u4e92\uff1b\u4e0d\u65ad\u626b\u63cf\u7f51\u7edc\u4e2d\u5b58\u5728\u6f0f\u6d1e\u7684host\u3002 DoS: Denial-of_Service Attack Botnet: \u50f5\u5c38\u7f51\u7edc\u3002\u611f\u67d3bot\u7a0b\u5e8f\u3002 \u5bc6\u7801\u6cc4\u9732\uff1a\u62d6\u5e93\u3001\u6d17\u5e93\u3001\u649e\u5e93 Packet Sniffing: \u55c5\u63a2 IP spoofing: \u6b3a\u9a97\uff1b\u4f2a\u9020\u6e90IP \u9632\u5fa1\u624b\u6bb5\uff1a\u8eab\u4efd\u9a8c\u8bc1\uff1b\u4fdd\u5bc6\uff08\u52a0\u5bc6\u6280\u672f\uff09\uff1b\u5b8c\u6574\u6027\u68c0\u67e5\uff08\u6570\u5b57\u7b7e\u540d\uff09\uff1b\u8bbf\u95ee\u9650\u5236\uff08VPN\uff09\uff1b\u9632\u706b\u5899","title":"7. Network Security"},{"location":"Computer%20Network/2-application%20layer/","text":"2 Application Layer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Client: \u53d1\u8d77\u901a\u4fe1\u7684\u8fdb\u7a0b Server: \u7b49\u5f85\u8054\u7cfb\u7684\u8fdb\u7a0b Socket: \u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7edc\u4e4b\u95f4\u7684API (Application Programming Interface) \u8fdb\u7a0b\u5bfb\u5740\uff1aIP\u4e0eport Internet\u8fd0\u8f93\u534f\u8bae\u4e0d\u63d0\u4f9b\u7684\u670d\u52a1\uff1a\u5b9a\u65f6\u3001\u5e26\u5bbd\u4fdd\u8bc1\u3002\u4ec5\u6709\uff1a\u53ef\u9760\u6570\u636e\u4f20\u8f93\u3001\u541e\u5410\u91cf\u3002 1. \u5e94\u7528\u5c42\u534f\u8bae \u662f\u5e94\u7528\u7684\u4e00\u90e8\u5206\u3002\u5982HTTP\u662fWeb\u5e94\u7528\u7684\u4e00\u90e8\u5206\u3002 2. \u8fd0\u8f93\u5c42\u534f\u8bae 2.1 TCP TCP\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\u662f\u5168\u53cc\u5de5\u7684\u3002 \u9762\u5411\u8fde\u63a5\uff1b\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u6709Congestion Control 2.1.1 SSL Secure Sockets Layer 2.2 UDP \u65e0\u8fde\u63a5\uff1b\u4e0d\u53ef\u9760\u6570\u636e\u4f20\u8f93 \uff08\u4e0d\u4fdd\u8bc1\u5230\u8fbe\uff1b\u53ef\u80fd\u4e71\u5e8f\u5230\u8fbe\uff1b\u65e0\u62e5\u585e\u63a7\u5236\u673a\u5236\uff09 3. Web and HTTP Web\u7684\u5e94\u7528\u5c42\u534f\u8bae\u662fHTTP\u3002HTTP\u4f7f\u7528TCP\u4f5c\u4e3a\u8fd0\u8f93\u534f\u8bae\u3002 Stateless Protocol: \u65e0\u72b6\u6001\u534f\u8bae\uff1bHTTP\u670d\u52a1\u5668\u4e0d\u4fdd\u5b58\u5ba2\u6237\u7684\u4efb\u4f55\u4fe1\u606f\u3002 3.1 Connection 4. Email Simple Mail Transfer Protocol, over TCP Post Office Protocol--Version3 Internet Mail Access Protocol 5. DNS Provided by a software called Berkeley Internet Name Domain, on UNIX machine, over UDP with port 53. TLD: Top-Level Domain Authoritative DNS servers Recursive Query: locahost to Local DNS Servers Iterative Query: Other queries Resource Record of DNS (a quadruple): (Name, Value, Type, TTL) Time to live (different meaning from ttl in ping report) 6. P2P BitTorrent Rarest First DHT: Distributed Hash Table 7. Streaming Media 7.1 Dynamic Adaptive Streaming over HTTP DASH","title":"2 Application Layer"},{"location":"Computer%20Network/2-application%20layer/#2-application-layer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Client: \u53d1\u8d77\u901a\u4fe1\u7684\u8fdb\u7a0b Server: \u7b49\u5f85\u8054\u7cfb\u7684\u8fdb\u7a0b Socket: \u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7edc\u4e4b\u95f4\u7684API (Application Programming Interface) \u8fdb\u7a0b\u5bfb\u5740\uff1aIP\u4e0eport Internet\u8fd0\u8f93\u534f\u8bae\u4e0d\u63d0\u4f9b\u7684\u670d\u52a1\uff1a\u5b9a\u65f6\u3001\u5e26\u5bbd\u4fdd\u8bc1\u3002\u4ec5\u6709\uff1a\u53ef\u9760\u6570\u636e\u4f20\u8f93\u3001\u541e\u5410\u91cf\u3002","title":"2 Application Layer"},{"location":"Computer%20Network/2-application%20layer/#1","text":"\u662f\u5e94\u7528\u7684\u4e00\u90e8\u5206\u3002\u5982HTTP\u662fWeb\u5e94\u7528\u7684\u4e00\u90e8\u5206\u3002","title":"1. \u5e94\u7528\u5c42\u534f\u8bae"},{"location":"Computer%20Network/2-application%20layer/#2","text":"","title":"2. \u8fd0\u8f93\u5c42\u534f\u8bae"},{"location":"Computer%20Network/2-application%20layer/#21-tcp","text":"TCP\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\u662f\u5168\u53cc\u5de5\u7684\u3002 \u9762\u5411\u8fde\u63a5\uff1b\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u6709Congestion Control","title":"2.1 TCP"},{"location":"Computer%20Network/2-application%20layer/#211-ssl","text":"Secure Sockets Layer","title":"2.1.1 SSL"},{"location":"Computer%20Network/2-application%20layer/#22-udp","text":"\u65e0\u8fde\u63a5\uff1b\u4e0d\u53ef\u9760\u6570\u636e\u4f20\u8f93 \uff08\u4e0d\u4fdd\u8bc1\u5230\u8fbe\uff1b\u53ef\u80fd\u4e71\u5e8f\u5230\u8fbe\uff1b\u65e0\u62e5\u585e\u63a7\u5236\u673a\u5236\uff09","title":"2.2 UDP"},{"location":"Computer%20Network/2-application%20layer/#3-web-and-http","text":"Web\u7684\u5e94\u7528\u5c42\u534f\u8bae\u662fHTTP\u3002HTTP\u4f7f\u7528TCP\u4f5c\u4e3a\u8fd0\u8f93\u534f\u8bae\u3002 Stateless Protocol: \u65e0\u72b6\u6001\u534f\u8bae\uff1bHTTP\u670d\u52a1\u5668\u4e0d\u4fdd\u5b58\u5ba2\u6237\u7684\u4efb\u4f55\u4fe1\u606f\u3002","title":"3. Web and HTTP"},{"location":"Computer%20Network/2-application%20layer/#31-connection","text":"","title":"3.1 Connection"},{"location":"Computer%20Network/2-application%20layer/#4-email","text":"Simple Mail Transfer Protocol, over TCP Post Office Protocol--Version3 Internet Mail Access Protocol","title":"4. Email"},{"location":"Computer%20Network/2-application%20layer/#5-dns","text":"Provided by a software called Berkeley Internet Name Domain, on UNIX machine, over UDP with port 53. TLD: Top-Level Domain Authoritative DNS servers Recursive Query: locahost to Local DNS Servers Iterative Query: Other queries Resource Record of DNS (a quadruple): (Name, Value, Type, TTL) Time to live (different meaning from ttl in ping report)","title":"5. DNS"},{"location":"Computer%20Network/2-application%20layer/#6-p2p","text":"BitTorrent Rarest First DHT: Distributed Hash Table","title":"6. P2P"},{"location":"Computer%20Network/2-application%20layer/#7-streaming-media","text":"","title":"7. Streaming Media"},{"location":"Computer%20Network/2-application%20layer/#71-dynamic-adaptive-streaming-over-http","text":"DASH","title":"7.1 Dynamic Adaptive Streaming over HTTP"},{"location":"Computer%20Network/3-transport%20layer/","text":"3 Transport Layer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Transport Layer provides different processes with logic communication. Protocol of transport layer only works in the end system . Transport Layer extend the host-to- host delivery service provided by the network layer to a process-to-process delivery service for applications running on the hosts. Protocol: TCP and UDP 1. Multiplexing and Demultiplexing Port range: 16bits, 0\\~65535 Well-known port numbers: 0~1023 UDP socket can be identified by a two-tuple. TCP socket can be identified by a quadruple. 2. UDP UDP socket can be identified by a two-tuple . There's no source IP, so the receiver will treat UDP segments which has the same source port and dest. port in the same way, although their source IP may be different. (Source IP is transported by the Network Layer.) 2.1 Checksum Ref: UDP Checksum Pseudo Header is not transported. It only serves for computing the checksum. If the result overflows, we need to \" wrap it around \". Also note the \"reserved\" or \"padding\" zeros. If the data size is not an integral multiple of 16 bits, we need to pad zeros behind. 2.1.1 Checking by Receiver Add all data (certainly including the checksum computed by the sender) as 16 bits numbers together. If the result contains \"0\", the process must have some error. Even the result consists of \"1\", we can not be sure that the process is totally right. 3. Reliable Data Transfer ARQ, Automatic Repeat reQuest: based on pos./neg. acknowledgment Error detection Receiver Feedback: ACK and NAK Retransmission 3.1 Stop and wait The sender have to wait ACK and NAK before leaving the waiting status and then obtaining following data from upper layer. 3.1.1 rdt 2.0 Add ANK and NAK to know whether the data is delivered. 3.1.2 rdt 2.1 To avoid the corruption of ANK and NAK , add sequence number . 3.1.3 rdt 3.0 To address the problem of packet loss , introduce the countdown timer which causes resending and duplicate data packet. 3.2 Pipelining Stop and wait has very poor efficiency. We need to stop waiting too much and send more data. As a result, we have to: 1) Increase the range of sequence numbers. 2) (Optional) Cache in buffer. 3) Know how to respond to lost, corrupted, and overly delayed packets (\u5206\u7ec4). 3.2.1 Go-Back-N GBN, sliding-window protocol . Animation: GBN Features : Cumulative Ack, base, nextseqnum, Typically, consider 2 situations of packet(s) loss: 1) The packet of sender with sequence number \\(i\\) is lost before it reaches the receiver. The receiver expects sequence number \\(i\\) , but it only receives \\(i + 1\\) . So, it wil drop it (not deliver to the upper layer), and send the packet of ACK with sequence number \\(i - 1\\) to the sender. The sender receives \\(i - 1\\) , so \\(base == i\\) will not change (cause the reaching of \\(i - 1\\) will lead to \\(base = (i - 1) + 1 = i\\) ). It will wait the ACK \\(i\\) until timeout, and then re-send it. 2) The responsive packet ACK of the receiver with sequence number \\(i\\) is lost before it reaches the sender. The sender will not receive ACK with sequence number \\(i\\) . However, due to the feature of \"Cumulative Ack\", the reaching of ACK with sequence number \\(i + 1\\) will tell the sender the successful delivery of data packet \\(i\\) . Thus, the loss of ACK with sequence number \\(i\\) has no effect. 3.2.2 Selective Repeat To improve the performance of GBN, because GBN will generate lots of duplicate packets when there are plenty of packets in the pipeline (may caused by the large window length or the large bandwidth-delay product). The difference : The receiver will acknowledge the correctly delivered packets regardless of the order (sequence number). So there's no cumulative ACK ! This leads to a big difference with GBN, which means when the sender receives ACK \\(i\\) , it cannot regard \\(i - 1\\) as having been transmitted correctly to the receiver. So the sender should wait until timeout . So it needs cache and buffer and independent timers . The sender: When receiving ACK: if seqnum in window: receive and \"ACK\" it! if seqnum == send_base: window move forward to min(seqnum that hasn't yet ACK'd) The receiver: window: [rcv_base, rcv_base + N - 1] When receiving packet: if seqnum in window: send corresponding ACK if seqnum/packet is not received before: cache it if seqnum == rcv_base: deliver {packets whose seqnum starting with rcv_base, until the last cached one} to the upper layer elif seqnum in [rcv_base - N, rcv_base - 1]: send corresponding ACK!!! else: do nothing (ignore) Note for \"!!!\": If doing nothing there, the window of sender will not be able to move forward, since the moving forward can only be triggered by seqnum == send_base . Such case will happen when an ACK is lost on the way coming back to sender, and then timeout of this \"seqnum\" will cause re-sending. So the receiver must respond to this re-sent packet although it has already cached it. Issue: The window size must be less than or equal to half the size of the sequence number space for SR protocols! 4. TCP three-way handshake maximum segment size (MSS) : the maximum amount of application-layer data in the segment, not the maximum size of the TCP segment including headers. maximum transmission unit, MTU : the length of the largest link-layer frame that can be sent by the local sending host; setting the MSS based on the path MTU value How many flags ??? Sequence number for a segment is the serial number (\u5e8f\u53f7) (in the whole byte-stream) of the first byte of the segment. ???\"Ack. number\" in TCP is different from \"seq. num\" of ACK packets in GBN or SR!!! The acknowledgment number that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B. ( Cumulative Acknowledgments ) 4.1 Telnet Note that the acknowledgment for client-to-server data is carried in a segment carrying server-to-client data; this acknowledgment is said to be piggybacked on the server-to-client data segment. 4.2 RTT Estimation and Timeout Determination SampleRTT: the amount of time between when the segment is sent (that is, passed to IP) and when an acknowledgment for the segment is received. 2 Rules: The SampleRTT is being estimated for only one of the transmitted but currently unacknowledged segments, and for segments that have been transmitted once . \\(EstimatedRTT=(1\u2212\u03b1)\u22c5EstimatedRTT+\u03b1\u22c5SampleRTT\\) ; recommended \\(\\alpha = 0.125\\) ???EstimatedRTT puts more weight on recent samples than on old samples. Exponential weighted moving average (EWMA) . \\(DevRTT=(1\u2212\u03b2)\u22c5DevRTT+\u03b2\u22c5|SampleRTT\u2212EstimatedRTT|\\) ; recommended \\(\\beta = 0.25\\) Determine \\(TimeoutInterval=EstimatedRTT+4\u22c5DevRTT\\) (Init: 1s; When a timeout occurs, the value of TimeoutInterval is doubled ; Updated when EstimatedRTT is updated) 4.3 Fast retransmit ??? The reason that the sending side has to wait until the third duplicate ACK is described in RFC2001 as follows: \" Since TCP does not know whether a duplicate ACK is caused by a lost segment or just a reordering of segments, it waits for a small number of duplicate ACKs to be received. It is assumed that if there is just a reordering of the segments, there will be only one or two duplicate ACKs before the reordered segment is processed, which will then generate a new ACK. If three or more duplicate ACKs are received in a row, it is a strong indication that a segment has been lost. \" 4.4 Selective Acknowledgement Ref: SACK SACK dedicates to avoid the unnecessary retransmission. TCP uses cumulative Ack. By implementing GBN, the lost of packet 2 will lead to retransmission of packet 3, 4, ... The receiver has no way to tell the sender that it has received packet 3, 4 or the following ones correctly. So TCP appends a SACK option in ACK packets to deliver these informations about the following ones. (See ref. for an example.) 4.5 Comparison with GBN and SR TCP is a hybrid protocol of GBN and SR. Ref: An article about comparison 4.6 Flow Control Animation: Flow Control For the receiver, \\(rwnd=RcvBuffer\u2212[LastByteRcvd\u2212LastByteRead]\\) The receiver tells the sender how much spare room it has in the connection buffer by placing its current value of \\(rwnd\\) in the receive window field (\"Window Size\" in the TCP segment figure before) of every segment it sends to the sender. For the sender, \\(LastByteSent \u2013 LastByteAcked\\) , is the amount of unacknowledged data that A has sent into the connection. Thus, it makes sure throughout the connection\u2019s life that \\(LastByteSent\u2212LastByteAcked\u2264rwnd\\) Issue Addressing : The TCP specification requires Host A to continue to send segments with one data byte when B\u2019s receive window is zero. 4.7 TCP Connection Management 1) SYN: SYN = 1; 2) SYNACK: SYN = 1; 3) SYN = 0 (SYN: synchronize) When receiving a segment at wrong ports, the host will send RST (reset) . 4.8 Congestion Control Animation: Congestion Control End-to-end congestion control Network-assisted congestion control Congestion window: \\(cwnd\\) \\(LastByteSent - LastByteAcked \\le min\\{cwnd, rwnd\\}\\) 1) limit: adjusting the value of \\(cwnd\\) 2) perceive: \"loss event\": timeout or 4 ACKs (1 original + 3 duplicate) 3) change: increase/decrease \\(cwnd\\) according to the rate at which ACKs arrive ( self-clocking ) How to determine the rate? Guiding Principles: 1) Lost segments, lower rate 2) ACK segments, higher rate 3) Keep probing the bandwidth 4.8.1 Slow Start ssthresh: slow start threshold 4.8.2 Congestion Avoidance 4.8.3 Fast Recovery FSM Summary : The additive-increase/multiplicative-decrease ( AIMD ) feedback control algorithm Throughput: associated with loss rate High-bandwidth: average throughput ~ loss rate (L), RTT, maximum segment size (MSS): \\(aver(throughput) = {1.22MSS \\over RTT \\sqrt L}\\) 4.8.4 Fairness Ideal model with same MSS and RTT for a single associated TCP connection: In real world, those sessions with a smaller RTT will enjoy higher throughput. (open their congestion windows faster ???) It is possible for UDP sources to crowd out TCP traffic. There is nothing to stop a TCP-based application from using multiple parallel connections . 4.8.5 ECN Explicit Congestion Notification Need recent extensions to work. 2 bits \"Type of Service\" field of the IP datagram header are used for ECN. One for the router, another for the sending host (to inform routers the ECN capability). When the receiving host receives an ECN indication, it will setting the ECE (Explicit Congestion Notification Echo) bit in TCP ACK segment. Then the TCP sender, reacts to an ACK with an ECE congestion indication by halving the congestion window .","title":"3 Transport Layer"},{"location":"Computer%20Network/3-transport%20layer/#3-transport-layer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Transport Layer provides different processes with logic communication. Protocol of transport layer only works in the end system . Transport Layer extend the host-to- host delivery service provided by the network layer to a process-to-process delivery service for applications running on the hosts. Protocol: TCP and UDP","title":"3 Transport Layer"},{"location":"Computer%20Network/3-transport%20layer/#1-multiplexing-and-demultiplexing","text":"Port range: 16bits, 0\\~65535 Well-known port numbers: 0~1023 UDP socket can be identified by a two-tuple. TCP socket can be identified by a quadruple.","title":"1. Multiplexing and Demultiplexing"},{"location":"Computer%20Network/3-transport%20layer/#2-udp","text":"UDP socket can be identified by a two-tuple . There's no source IP, so the receiver will treat UDP segments which has the same source port and dest. port in the same way, although their source IP may be different. (Source IP is transported by the Network Layer.)","title":"2. UDP"},{"location":"Computer%20Network/3-transport%20layer/#21-checksum","text":"Ref: UDP Checksum Pseudo Header is not transported. It only serves for computing the checksum. If the result overflows, we need to \" wrap it around \". Also note the \"reserved\" or \"padding\" zeros. If the data size is not an integral multiple of 16 bits, we need to pad zeros behind.","title":"2.1 Checksum"},{"location":"Computer%20Network/3-transport%20layer/#211-checking-by-receiver","text":"Add all data (certainly including the checksum computed by the sender) as 16 bits numbers together. If the result contains \"0\", the process must have some error. Even the result consists of \"1\", we can not be sure that the process is totally right.","title":"2.1.1 Checking by Receiver"},{"location":"Computer%20Network/3-transport%20layer/#3-reliable-data-transfer","text":"ARQ, Automatic Repeat reQuest: based on pos./neg. acknowledgment Error detection Receiver Feedback: ACK and NAK Retransmission","title":"3. Reliable Data Transfer"},{"location":"Computer%20Network/3-transport%20layer/#31-stop-and-wait","text":"The sender have to wait ACK and NAK before leaving the waiting status and then obtaining following data from upper layer.","title":"3.1 Stop and wait"},{"location":"Computer%20Network/3-transport%20layer/#311-rdt-20","text":"Add ANK and NAK to know whether the data is delivered.","title":"3.1.1 rdt 2.0"},{"location":"Computer%20Network/3-transport%20layer/#312-rdt-21","text":"To avoid the corruption of ANK and NAK , add sequence number .","title":"3.1.2 rdt 2.1"},{"location":"Computer%20Network/3-transport%20layer/#313-rdt-30","text":"To address the problem of packet loss , introduce the countdown timer which causes resending and duplicate data packet.","title":"3.1.3 rdt 3.0"},{"location":"Computer%20Network/3-transport%20layer/#32-pipelining","text":"Stop and wait has very poor efficiency. We need to stop waiting too much and send more data. As a result, we have to: 1) Increase the range of sequence numbers. 2) (Optional) Cache in buffer. 3) Know how to respond to lost, corrupted, and overly delayed packets (\u5206\u7ec4).","title":"3.2 Pipelining"},{"location":"Computer%20Network/3-transport%20layer/#321-go-back-n","text":"GBN, sliding-window protocol . Animation: GBN Features : Cumulative Ack, base, nextseqnum, Typically, consider 2 situations of packet(s) loss: 1) The packet of sender with sequence number \\(i\\) is lost before it reaches the receiver. The receiver expects sequence number \\(i\\) , but it only receives \\(i + 1\\) . So, it wil drop it (not deliver to the upper layer), and send the packet of ACK with sequence number \\(i - 1\\) to the sender. The sender receives \\(i - 1\\) , so \\(base == i\\) will not change (cause the reaching of \\(i - 1\\) will lead to \\(base = (i - 1) + 1 = i\\) ). It will wait the ACK \\(i\\) until timeout, and then re-send it. 2) The responsive packet ACK of the receiver with sequence number \\(i\\) is lost before it reaches the sender. The sender will not receive ACK with sequence number \\(i\\) . However, due to the feature of \"Cumulative Ack\", the reaching of ACK with sequence number \\(i + 1\\) will tell the sender the successful delivery of data packet \\(i\\) . Thus, the loss of ACK with sequence number \\(i\\) has no effect.","title":"3.2.1 Go-Back-N"},{"location":"Computer%20Network/3-transport%20layer/#322-selective-repeat","text":"To improve the performance of GBN, because GBN will generate lots of duplicate packets when there are plenty of packets in the pipeline (may caused by the large window length or the large bandwidth-delay product). The difference : The receiver will acknowledge the correctly delivered packets regardless of the order (sequence number). So there's no cumulative ACK ! This leads to a big difference with GBN, which means when the sender receives ACK \\(i\\) , it cannot regard \\(i - 1\\) as having been transmitted correctly to the receiver. So the sender should wait until timeout . So it needs cache and buffer and independent timers . The sender: When receiving ACK: if seqnum in window: receive and \"ACK\" it! if seqnum == send_base: window move forward to min(seqnum that hasn't yet ACK'd) The receiver: window: [rcv_base, rcv_base + N - 1] When receiving packet: if seqnum in window: send corresponding ACK if seqnum/packet is not received before: cache it if seqnum == rcv_base: deliver {packets whose seqnum starting with rcv_base, until the last cached one} to the upper layer elif seqnum in [rcv_base - N, rcv_base - 1]: send corresponding ACK!!! else: do nothing (ignore) Note for \"!!!\": If doing nothing there, the window of sender will not be able to move forward, since the moving forward can only be triggered by seqnum == send_base . Such case will happen when an ACK is lost on the way coming back to sender, and then timeout of this \"seqnum\" will cause re-sending. So the receiver must respond to this re-sent packet although it has already cached it. Issue: The window size must be less than or equal to half the size of the sequence number space for SR protocols!","title":"3.2.2 Selective Repeat"},{"location":"Computer%20Network/3-transport%20layer/#4-tcp","text":"three-way handshake maximum segment size (MSS) : the maximum amount of application-layer data in the segment, not the maximum size of the TCP segment including headers. maximum transmission unit, MTU : the length of the largest link-layer frame that can be sent by the local sending host; setting the MSS based on the path MTU value How many flags ??? Sequence number for a segment is the serial number (\u5e8f\u53f7) (in the whole byte-stream) of the first byte of the segment. ???\"Ack. number\" in TCP is different from \"seq. num\" of ACK packets in GBN or SR!!! The acknowledgment number that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B. ( Cumulative Acknowledgments )","title":"4. TCP"},{"location":"Computer%20Network/3-transport%20layer/#41-telnet","text":"Note that the acknowledgment for client-to-server data is carried in a segment carrying server-to-client data; this acknowledgment is said to be piggybacked on the server-to-client data segment.","title":"4.1 Telnet"},{"location":"Computer%20Network/3-transport%20layer/#42-rtt-estimation-and-timeout-determination","text":"SampleRTT: the amount of time between when the segment is sent (that is, passed to IP) and when an acknowledgment for the segment is received. 2 Rules: The SampleRTT is being estimated for only one of the transmitted but currently unacknowledged segments, and for segments that have been transmitted once . \\(EstimatedRTT=(1\u2212\u03b1)\u22c5EstimatedRTT+\u03b1\u22c5SampleRTT\\) ; recommended \\(\\alpha = 0.125\\) ???EstimatedRTT puts more weight on recent samples than on old samples. Exponential weighted moving average (EWMA) . \\(DevRTT=(1\u2212\u03b2)\u22c5DevRTT+\u03b2\u22c5|SampleRTT\u2212EstimatedRTT|\\) ; recommended \\(\\beta = 0.25\\) Determine \\(TimeoutInterval=EstimatedRTT+4\u22c5DevRTT\\) (Init: 1s; When a timeout occurs, the value of TimeoutInterval is doubled ; Updated when EstimatedRTT is updated)","title":"4.2 RTT Estimation and Timeout Determination"},{"location":"Computer%20Network/3-transport%20layer/#43-fast-retransmit","text":"??? The reason that the sending side has to wait until the third duplicate ACK is described in RFC2001 as follows: \" Since TCP does not know whether a duplicate ACK is caused by a lost segment or just a reordering of segments, it waits for a small number of duplicate ACKs to be received. It is assumed that if there is just a reordering of the segments, there will be only one or two duplicate ACKs before the reordered segment is processed, which will then generate a new ACK. If three or more duplicate ACKs are received in a row, it is a strong indication that a segment has been lost. \"","title":"4.3 Fast retransmit"},{"location":"Computer%20Network/3-transport%20layer/#44-selective-acknowledgement","text":"Ref: SACK SACK dedicates to avoid the unnecessary retransmission. TCP uses cumulative Ack. By implementing GBN, the lost of packet 2 will lead to retransmission of packet 3, 4, ... The receiver has no way to tell the sender that it has received packet 3, 4 or the following ones correctly. So TCP appends a SACK option in ACK packets to deliver these informations about the following ones. (See ref. for an example.)","title":"4.4 Selective Acknowledgement"},{"location":"Computer%20Network/3-transport%20layer/#45-comparison-with-gbn-and-sr","text":"TCP is a hybrid protocol of GBN and SR. Ref: An article about comparison","title":"4.5 Comparison with GBN and SR"},{"location":"Computer%20Network/3-transport%20layer/#46-flow-control","text":"Animation: Flow Control For the receiver, \\(rwnd=RcvBuffer\u2212[LastByteRcvd\u2212LastByteRead]\\) The receiver tells the sender how much spare room it has in the connection buffer by placing its current value of \\(rwnd\\) in the receive window field (\"Window Size\" in the TCP segment figure before) of every segment it sends to the sender. For the sender, \\(LastByteSent \u2013 LastByteAcked\\) , is the amount of unacknowledged data that A has sent into the connection. Thus, it makes sure throughout the connection\u2019s life that \\(LastByteSent\u2212LastByteAcked\u2264rwnd\\) Issue Addressing : The TCP specification requires Host A to continue to send segments with one data byte when B\u2019s receive window is zero.","title":"4.6 Flow Control"},{"location":"Computer%20Network/3-transport%20layer/#47-tcp-connection-management","text":"1) SYN: SYN = 1; 2) SYNACK: SYN = 1; 3) SYN = 0 (SYN: synchronize) When receiving a segment at wrong ports, the host will send RST (reset) .","title":"4.7 TCP Connection Management"},{"location":"Computer%20Network/3-transport%20layer/#48-congestion-control","text":"Animation: Congestion Control End-to-end congestion control Network-assisted congestion control Congestion window: \\(cwnd\\) \\(LastByteSent - LastByteAcked \\le min\\{cwnd, rwnd\\}\\) 1) limit: adjusting the value of \\(cwnd\\) 2) perceive: \"loss event\": timeout or 4 ACKs (1 original + 3 duplicate) 3) change: increase/decrease \\(cwnd\\) according to the rate at which ACKs arrive ( self-clocking ) How to determine the rate? Guiding Principles: 1) Lost segments, lower rate 2) ACK segments, higher rate 3) Keep probing the bandwidth","title":"4.8 Congestion Control"},{"location":"Computer%20Network/3-transport%20layer/#481-slow-start","text":"ssthresh: slow start threshold","title":"4.8.1 Slow Start"},{"location":"Computer%20Network/3-transport%20layer/#482-congestion-avoidance","text":"","title":"4.8.2 Congestion Avoidance"},{"location":"Computer%20Network/3-transport%20layer/#483-fast-recovery","text":"FSM Summary : The additive-increase/multiplicative-decrease ( AIMD ) feedback control algorithm Throughput: associated with loss rate High-bandwidth: average throughput ~ loss rate (L), RTT, maximum segment size (MSS): \\(aver(throughput) = {1.22MSS \\over RTT \\sqrt L}\\)","title":"4.8.3 Fast Recovery"},{"location":"Computer%20Network/3-transport%20layer/#484-fairness","text":"Ideal model with same MSS and RTT for a single associated TCP connection: In real world, those sessions with a smaller RTT will enjoy higher throughput. (open their congestion windows faster ???) It is possible for UDP sources to crowd out TCP traffic. There is nothing to stop a TCP-based application from using multiple parallel connections .","title":"4.8.4 Fairness"},{"location":"Computer%20Network/3-transport%20layer/#485-ecn","text":"Explicit Congestion Notification Need recent extensions to work. 2 bits \"Type of Service\" field of the IP datagram header are used for ECN. One for the router, another for the sending host (to inform routers the ECN capability). When the receiving host receives an ECN indication, it will setting the ECE (Explicit Congestion Notification Echo) bit in TCP ACK segment. Then the TCP sender, reacts to an ACK with an ECE congestion indication by halving the congestion window .","title":"4.8.5 ECN"},{"location":"Computer%20Network/4-network%20layer/","text":"4 Network Layer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Forwarding (data plane) and routing (control plane) Control plane: how to determine the forwarding table? Traditional approach or SDN (Software defined networking) approach. 1. Inside a router Destination-based forwarding or generalized forwarding The forwarding table is copied from the routing processor to the line cards over a separate bus. Forwarding decisions can be made locally to avoid centralized processing bottleneck. 1.1 Input Port Processing & Destination-Based Forwarding Lookup: longest prefix matching rule on-chip DRAM and faster SRAM; Ternary Content Addressable Memories (TCAMs) 1.1.1 Netmask Ref: https://www.hacksplaining.com/glossary/netmasks A netmask is a shorthand for describing a range of IP addresses , e.g. 192.168.0.1/32 . The left hand side of a netmask (e.g. 192.168.0.1 ) specifies a the host IP address. The right hand side specifies (e.g. /32 ) how many digits of the host address are significant, when considered as a binary number. Non-significant bits in the binary form are treated as a wild-card. Apparently, the left part of a subnet mask consists of consecutive 1 , and the right part consists of consecutive 0 . 1.1.2 Routing Table Ref: https://en.wikipedia.org/wiki/Routing_table Network destination Netmask Gateway Interface Metric 0.0.0.0 0.0.0.0 192.168.0.1 192.168.0.100 10 127.0.0.0 255.0.0.0 127.0.0.1 127.0.0.1 1 192.168.0.0 255.255.255.0 192.168.0.100 192.168.0.100 10 192.168.0.100 255.255.255.255 127.0.0.1 127.0.0.1 10 192.168.0.1 255.255.255.255 192.168.0.100 192.168.0.100 10 The columns Network destination and Netmask together describe the Network identifier as mentioned earlier. For example, destination 192.168.0.0 and netmask 255.255.255.0 can be written as 192.168.0.0/24 . The Gateway column contains the same information as the Next hop , i.e. it points to the gateway through which the network can be reached. The Interface indicates what locally available interface is responsible for reaching the gateway. In this example, gateway 192.168.0.1 (the internet router) can be reached through the local network card with address 192.168.0.100 . Finally, the Metric indicates the associated cost of using the indicated route. Forwarding Table 1.1.3 The Link-State (LS) Routing Algorithm Each node broadcasts link-state packets to all other nodes in the network. All nodes have an identical and complete view of the network. Dijkstra\u2019s algorithm 1.1.4 The Distance-Vector (DV) Routing Algorithm Iterative, asynchronous, and distribute: It is distributed in that each node receives some information from one or more of its directly attached neighbors, performs a calculation, and then distributes the results of its calculation back to its neighbors . It is iterative in that this process continues on until no more information is exchanged between neighbors. The algorithm is asynchronous in that it does not require all of the nodes to operate in lockstep with each other. Bellman-Ford equation : \\(dist(x, end) = \\min_v(w(x, v), dist(v, end))\\) , while \\(v\\) is one of x's neighbor. The solution to the Bellman-Ford equation provides the entries in node x \u2019s forwarding table . With the DV algorithm, each node x maintains: the cost c ( x, v ) from x to directly attached neighbor, v Node x \u2019s distance vector , that is, \\(D_x=[D_x(y): y \\in N]\\) , containing x \u2019s estimate of its cost to all destinations y , in N Distance vectors of each of its neighbors, that is, \\(D_v=[D_v(y): y \\in N]\\) for each neighbor v of x 1.1.5 Routing Information Protocol Based on UDP. Relationship and position in the network packets: IP Header (e.g. 20Bytes) UDP Header (8 Bytes) RIP Packet Structure of RIPv2 (Ref: RFC 2453 ): 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | command (1) | version (1) | must be zero (2) | // header (4 Bytes) +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Address Family Identifier (2) | Route Tag (2) | // entry follows +-------------------------------+-------------------------------+ | IP Address (4) | +---------------------------------------------------------------+ | Subnet Mask (4) | +---------------------------------------------------------------+ | Next Hop (4) | +---------------------------------------------------------------+ | Metric (4) | // total: 24 Bytes +---------------------------------------------------------------+ // more entries (total <= 25) may follow 1.2 Switching 1) Switching via mem. 2) Switching via a bus. 3) Switching via an interconnection network. 1.3 Output Port Processing selecting, de-queueing, link- and physical-layer functions 1.4 Queueing 1.4.1 Input queueing \\(R_{switch} = N R_{line}\\) , negligible queuing Problem: head-of-the-line (HOL) blocking (may cause unbounded queue size) 1.4.2 Output queueing Though \\(R_{switch} = N R_{line}\\) , unbounded queue size! 1.4.3 Buffer size Rule of thumb: \\(RTT \\times Capacity\\) (Recent: \\(RTT \\times Capacity / \\sqrt N\\) , where N denotes the number of TCP flows) 1.4.4 Packet Scheduling FIFO/FCFS Priority queueing Round robin queuing -> weighted fair queuing (WFQ): class i will receive a fraction \\(w_i \\over \\Sigma w_j\\) of the bandwidth. 2. The Internet Protocol (IP) 2.1 IPv4 Ref: IPv4 - Wikipedia Internet Header Length (IHL): [20, 60] Bytes 2.1.1 IPv4 Datagram Fragmentation Maximum Transmission Unit 2.1.2 Classification A\u7c7bIPv4\u5730\u5740 B\u7c7bIPv4\u5730\u5740 C\u7c7bIPv4\u5730\u5740 D\u7c7bIPv4\u5730\u5740 E\u7c7bIPv4\u5730\u5740 \u7f51\u7edc\u6807\u5fd7\u4f4d 0 10 110 1110 11110 IP\u5730\u5740\u8303\u56f4 1.0.0.0~127.255.255.255 128.0.0.0~191.255.255.255 192.0.0.0~223.255.255.255 224.0.0.0~239.255.255.255 240.0.0.0~247.255.255.255 \u53ef\u7528IP\u5730\u5740\u8303\u56f4 1.0.0.1~127.255.255.254 128.0.0.1~191.255.255.254 192.0.0.1~223.255.255.254 \u662f\u5426\u53ef\u4ee5\u5206\u914d\u7ed9\u4e3b\u673a\u4f7f\u7528 \u662f \u662f \u662f \u5426 \u5426 \u7f51\u7edc\u6570\u91cf\uff08\u4e2a\uff09 126 ( \\(2^7\\) -2) 16384 ( \\(2^{14}\\) ) 2097152 ( \\(2^{21}\\) ) --- --- \u6bcf\u4e2a\u7f51\u7edc\u4e2d\u53ef\u5bb9\u7eb3\u4e3b\u673a\u6570\uff08\u4e2a\uff09 16777214 ( \\(2^{24}-2\\) ) 65534 ( \\(2^{16}-2\\) ) 254 ( \\(2^8-2\\) ) --- --- \u9002\u7528\u8303\u56f4 \u5927\u91cf\u4e3b\u673a\u7684\u5927\u578b\u7f51\u7edc \u4e2d\u7b49\u89c4\u6a21\u4e3b\u673a\u6570\u7684\u7f51\u7edc \u5c0f\u578b\u5c40\u57df\u7f51 \u7559\u7ed9Internet\u4f53\u7cfb\u7ed3\u6784\u59d4\u5458\u4f1a(IAB)\u4f7f\u7528\u3010\u7ec4\u64ad\u5730\u5740\u3011 \u4fdd\u7559\uff0c\u4ec5\u4f5c\u4e3a\u641c\u7d22\u3001Internet\u7684\u5b9e\u9a8c\u548c\u5f00\u53d1\u7528 IP\u5730\u5740\u6839\u636e\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7\u6765\u5206\uff0c\u5206\u4e3aA\u3001B\u3001C\u4e09\u7c7b\u53ca\u7279\u6b8a\u5730\u5740D\u3001E\u3002 \u51680\u548c\u51681\u7684\u90fd\u4fdd\u7559\u4e0d\u7528\u3002 A\u7c7b\uff1a(1.0.0.0-126.0.0.0)\uff08\u9ed8\u8ba4\u5b50\u7f51\u63a9\u7801\uff1a255.0.0.0\u6216 0xFF000000\uff09\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u540e\u4e09\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c0\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e1~126\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u5927\u578b\u7f51\u7edc\u3002 B\u7c7b\uff1a(128.0.0.0-191.255.0.0)\uff08\u9ed8\u8ba4\u5b50\u7f51\u63a9\u7801\uff1a255.255.0.0\u62160xFFFF0000\uff09\u524d\u4e24\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u540e\u4e24\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c10\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e128~191\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7f51\u7edc\u3002 C\u7c7b\uff1a(192.0.0.0-223.255.255.0)\uff08\u5b50\u7f51\u63a9\u7801\uff1a255.255.255.0\u6216 0xFFFFFF00\uff09\u524d\u4e09\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c110\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e192~223\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u5c0f\u578b\u7f51\u7edc\u3002 D\u7c7b\uff1a\u662f\u591a\u64ad\u5730\u5740\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c1110\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e224~239\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u591a\u8def\u5e7f\u64ad\u7528\u6237[1] \u3002 E\u7c7b\uff1a\u662f\u4fdd\u7559\u5730\u5740\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c1111\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e240~255\u4e4b\u95f4\u3002 2.1.3 DHCP 2.1.4 Network Address Translator 3. \u7f51\u7edc\u5c42\u7684\u670d\u52a1\u65b9\u5f0f 3.1 \u65e0\u8fde\u63a5\u670d\u52a1 \u6240\u6709\u7684\u6570\u636e\u5305\u88ab\u72ec\u7acb\u9001\u5165\u7f51\u7edc\uff0c\u6bcf\u4e2a\u5305\u72ec\u7acb\u8def\u7531\uff0c\u4e0d\u63d0\u524d\u5efa\u7acb\u4efb\u4f55\u8bbe\u7f6e\u3002 \u8def\u7531\u7b97\u6cd5 3.2 \u6709\u8fde\u63a5\u670d\u52a1 Virtual Circuit \u903b\u8f91\u8fde\u63a5\uff0c\u4e0d\u540c\u4e8e\u771f\u6b63\u7684\u7269\u7406\u8fde\u63a5\u3002 \u6240\u6709\u5206\u7ec4\u90fd\u6cbf\u7740\u8fd9\u6761\u903b\u8f91\u8fde\u63a5\u6309\u5b58\u50a8\u8f6c\u53d1\u53d1\u9001\u3002 \u8f6c\u53d1\u7b56\u7565\uff1a\u57fa\u4e8e\u5206\u7ec4\u6807\u7b7e\uff0ci.e. \u865a\u7535\u8def\u53f7 Label Switching\uff1a R4\u6839\u636e\u8f93\u5165\u7684\u7aef\u53e3\u548c\u6807\u7b7e\u67e5\u8868\u5f97\u5230\u51fa\u53e3\u548c\u201c\u6807\u7b7e\u201d\uff0cR4\u9700\u8981\u5c06\u539f\u6765\u7684\u6807\u7b7eL1\u66ff\u6362\u4e3aL2\u518d\u53d1\u51fa\u53bb\u3002 \u6309\u9700\u5230\u8fbe\u3002 \u95ee\u9898\uff1a\u94fe\u8def\u4e2d\u4efb\u4f55\u4e00\u4e2a\u73af\u8282\u5931\u6548\u5219\u7ecf\u8fc7\u5b83\u7684\u6240\u6709VC\u5931\u6548\u3002","title":"4 Network Layer"},{"location":"Computer%20Network/4-network%20layer/#4-network-layer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Forwarding (data plane) and routing (control plane) Control plane: how to determine the forwarding table? Traditional approach or SDN (Software defined networking) approach.","title":"4 Network Layer"},{"location":"Computer%20Network/4-network%20layer/#1-inside-a-router","text":"Destination-based forwarding or generalized forwarding The forwarding table is copied from the routing processor to the line cards over a separate bus. Forwarding decisions can be made locally to avoid centralized processing bottleneck.","title":"1. Inside a router"},{"location":"Computer%20Network/4-network%20layer/#11-input-port-processing-destination-based-forwarding","text":"Lookup: longest prefix matching rule on-chip DRAM and faster SRAM; Ternary Content Addressable Memories (TCAMs)","title":"1.1 Input Port Processing &amp; Destination-Based Forwarding"},{"location":"Computer%20Network/4-network%20layer/#111-netmask","text":"Ref: https://www.hacksplaining.com/glossary/netmasks A netmask is a shorthand for describing a range of IP addresses , e.g. 192.168.0.1/32 . The left hand side of a netmask (e.g. 192.168.0.1 ) specifies a the host IP address. The right hand side specifies (e.g. /32 ) how many digits of the host address are significant, when considered as a binary number. Non-significant bits in the binary form are treated as a wild-card. Apparently, the left part of a subnet mask consists of consecutive 1 , and the right part consists of consecutive 0 .","title":"1.1.1 Netmask"},{"location":"Computer%20Network/4-network%20layer/#112-routing-table","text":"Ref: https://en.wikipedia.org/wiki/Routing_table Network destination Netmask Gateway Interface Metric 0.0.0.0 0.0.0.0 192.168.0.1 192.168.0.100 10 127.0.0.0 255.0.0.0 127.0.0.1 127.0.0.1 1 192.168.0.0 255.255.255.0 192.168.0.100 192.168.0.100 10 192.168.0.100 255.255.255.255 127.0.0.1 127.0.0.1 10 192.168.0.1 255.255.255.255 192.168.0.100 192.168.0.100 10 The columns Network destination and Netmask together describe the Network identifier as mentioned earlier. For example, destination 192.168.0.0 and netmask 255.255.255.0 can be written as 192.168.0.0/24 . The Gateway column contains the same information as the Next hop , i.e. it points to the gateway through which the network can be reached. The Interface indicates what locally available interface is responsible for reaching the gateway. In this example, gateway 192.168.0.1 (the internet router) can be reached through the local network card with address 192.168.0.100 . Finally, the Metric indicates the associated cost of using the indicated route. Forwarding Table","title":"1.1.2 Routing Table"},{"location":"Computer%20Network/4-network%20layer/#113-the-link-state-ls-routing-algorithm","text":"Each node broadcasts link-state packets to all other nodes in the network. All nodes have an identical and complete view of the network. Dijkstra\u2019s algorithm","title":"1.1.3 The Link-State (LS) Routing Algorithm"},{"location":"Computer%20Network/4-network%20layer/#114-the-distance-vector-dv-routing-algorithm","text":"Iterative, asynchronous, and distribute: It is distributed in that each node receives some information from one or more of its directly attached neighbors, performs a calculation, and then distributes the results of its calculation back to its neighbors . It is iterative in that this process continues on until no more information is exchanged between neighbors. The algorithm is asynchronous in that it does not require all of the nodes to operate in lockstep with each other. Bellman-Ford equation : \\(dist(x, end) = \\min_v(w(x, v), dist(v, end))\\) , while \\(v\\) is one of x's neighbor. The solution to the Bellman-Ford equation provides the entries in node x \u2019s forwarding table . With the DV algorithm, each node x maintains: the cost c ( x, v ) from x to directly attached neighbor, v Node x \u2019s distance vector , that is, \\(D_x=[D_x(y): y \\in N]\\) , containing x \u2019s estimate of its cost to all destinations y , in N Distance vectors of each of its neighbors, that is, \\(D_v=[D_v(y): y \\in N]\\) for each neighbor v of x","title":"1.1.4 The Distance-Vector (DV) Routing Algorithm"},{"location":"Computer%20Network/4-network%20layer/#115-routing-information-protocol","text":"Based on UDP. Relationship and position in the network packets: IP Header (e.g. 20Bytes) UDP Header (8 Bytes) RIP Packet Structure of RIPv2 (Ref: RFC 2453 ): 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | command (1) | version (1) | must be zero (2) | // header (4 Bytes) +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Address Family Identifier (2) | Route Tag (2) | // entry follows +-------------------------------+-------------------------------+ | IP Address (4) | +---------------------------------------------------------------+ | Subnet Mask (4) | +---------------------------------------------------------------+ | Next Hop (4) | +---------------------------------------------------------------+ | Metric (4) | // total: 24 Bytes +---------------------------------------------------------------+ // more entries (total <= 25) may follow","title":"1.1.5 Routing Information Protocol"},{"location":"Computer%20Network/4-network%20layer/#12-switching","text":"1) Switching via mem. 2) Switching via a bus. 3) Switching via an interconnection network.","title":"1.2 Switching"},{"location":"Computer%20Network/4-network%20layer/#13-output-port-processing","text":"selecting, de-queueing, link- and physical-layer functions","title":"1.3 Output Port Processing"},{"location":"Computer%20Network/4-network%20layer/#14-queueing","text":"","title":"1.4 Queueing"},{"location":"Computer%20Network/4-network%20layer/#141-input-queueing","text":"\\(R_{switch} = N R_{line}\\) , negligible queuing Problem: head-of-the-line (HOL) blocking (may cause unbounded queue size)","title":"1.4.1 Input queueing"},{"location":"Computer%20Network/4-network%20layer/#142-output-queueing","text":"Though \\(R_{switch} = N R_{line}\\) , unbounded queue size!","title":"1.4.2 Output queueing"},{"location":"Computer%20Network/4-network%20layer/#143-buffer-size","text":"Rule of thumb: \\(RTT \\times Capacity\\) (Recent: \\(RTT \\times Capacity / \\sqrt N\\) , where N denotes the number of TCP flows)","title":"1.4.3 Buffer size"},{"location":"Computer%20Network/4-network%20layer/#144-packet-scheduling","text":"FIFO/FCFS Priority queueing Round robin queuing -> weighted fair queuing (WFQ): class i will receive a fraction \\(w_i \\over \\Sigma w_j\\) of the bandwidth.","title":"1.4.4 Packet Scheduling"},{"location":"Computer%20Network/4-network%20layer/#2-the-internet-protocol-ip","text":"","title":"2. The Internet Protocol (IP)"},{"location":"Computer%20Network/4-network%20layer/#21-ipv4","text":"Ref: IPv4 - Wikipedia Internet Header Length (IHL): [20, 60] Bytes","title":"2.1 IPv4"},{"location":"Computer%20Network/4-network%20layer/#211-ipv4-datagram-fragmentation","text":"Maximum Transmission Unit","title":"2.1.1 IPv4 Datagram Fragmentation"},{"location":"Computer%20Network/4-network%20layer/#212-classification","text":"A\u7c7bIPv4\u5730\u5740 B\u7c7bIPv4\u5730\u5740 C\u7c7bIPv4\u5730\u5740 D\u7c7bIPv4\u5730\u5740 E\u7c7bIPv4\u5730\u5740 \u7f51\u7edc\u6807\u5fd7\u4f4d 0 10 110 1110 11110 IP\u5730\u5740\u8303\u56f4 1.0.0.0~127.255.255.255 128.0.0.0~191.255.255.255 192.0.0.0~223.255.255.255 224.0.0.0~239.255.255.255 240.0.0.0~247.255.255.255 \u53ef\u7528IP\u5730\u5740\u8303\u56f4 1.0.0.1~127.255.255.254 128.0.0.1~191.255.255.254 192.0.0.1~223.255.255.254 \u662f\u5426\u53ef\u4ee5\u5206\u914d\u7ed9\u4e3b\u673a\u4f7f\u7528 \u662f \u662f \u662f \u5426 \u5426 \u7f51\u7edc\u6570\u91cf\uff08\u4e2a\uff09 126 ( \\(2^7\\) -2) 16384 ( \\(2^{14}\\) ) 2097152 ( \\(2^{21}\\) ) --- --- \u6bcf\u4e2a\u7f51\u7edc\u4e2d\u53ef\u5bb9\u7eb3\u4e3b\u673a\u6570\uff08\u4e2a\uff09 16777214 ( \\(2^{24}-2\\) ) 65534 ( \\(2^{16}-2\\) ) 254 ( \\(2^8-2\\) ) --- --- \u9002\u7528\u8303\u56f4 \u5927\u91cf\u4e3b\u673a\u7684\u5927\u578b\u7f51\u7edc \u4e2d\u7b49\u89c4\u6a21\u4e3b\u673a\u6570\u7684\u7f51\u7edc \u5c0f\u578b\u5c40\u57df\u7f51 \u7559\u7ed9Internet\u4f53\u7cfb\u7ed3\u6784\u59d4\u5458\u4f1a(IAB)\u4f7f\u7528\u3010\u7ec4\u64ad\u5730\u5740\u3011 \u4fdd\u7559\uff0c\u4ec5\u4f5c\u4e3a\u641c\u7d22\u3001Internet\u7684\u5b9e\u9a8c\u548c\u5f00\u53d1\u7528 IP\u5730\u5740\u6839\u636e\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7\u6765\u5206\uff0c\u5206\u4e3aA\u3001B\u3001C\u4e09\u7c7b\u53ca\u7279\u6b8a\u5730\u5740D\u3001E\u3002 \u51680\u548c\u51681\u7684\u90fd\u4fdd\u7559\u4e0d\u7528\u3002 A\u7c7b\uff1a(1.0.0.0-126.0.0.0)\uff08\u9ed8\u8ba4\u5b50\u7f51\u63a9\u7801\uff1a255.0.0.0\u6216 0xFF000000\uff09\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u540e\u4e09\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c0\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e1~126\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u5927\u578b\u7f51\u7edc\u3002 B\u7c7b\uff1a(128.0.0.0-191.255.0.0)\uff08\u9ed8\u8ba4\u5b50\u7f51\u63a9\u7801\uff1a255.255.0.0\u62160xFFFF0000\uff09\u524d\u4e24\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u540e\u4e24\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c10\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e128~191\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7f51\u7edc\u3002 C\u7c7b\uff1a(192.0.0.0-223.255.255.0)\uff08\u5b50\u7f51\u63a9\u7801\uff1a255.255.255.0\u6216 0xFFFFFF00\uff09\u524d\u4e09\u4e2a\u5b57\u8282\u4e3a\u7f51\u7edc\u53f7\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4e3b\u673a\u53f7\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c110\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e192~223\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u5c0f\u578b\u7f51\u7edc\u3002 D\u7c7b\uff1a\u662f\u591a\u64ad\u5730\u5740\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c1110\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e224~239\u4e4b\u95f4\u3002\u4e00\u822c\u7528\u4e8e\u591a\u8def\u5e7f\u64ad\u7528\u6237[1] \u3002 E\u7c7b\uff1a\u662f\u4fdd\u7559\u5730\u5740\u3002\u8be5\u7c7bIP\u5730\u5740\u7684\u6700\u524d\u9762\u4e3a\u201c1111\u201d\uff0c\u6240\u4ee5\u5730\u5740\u7684\u7f51\u7edc\u53f7\u53d6\u503c\u4e8e240~255\u4e4b\u95f4\u3002","title":"2.1.2 Classification"},{"location":"Computer%20Network/4-network%20layer/#213-dhcp","text":"","title":"2.1.3 DHCP"},{"location":"Computer%20Network/4-network%20layer/#214-network-address-translator","text":"","title":"2.1.4 Network Address Translator"},{"location":"Computer%20Network/4-network%20layer/#3","text":"","title":"3. \u7f51\u7edc\u5c42\u7684\u670d\u52a1\u65b9\u5f0f"},{"location":"Computer%20Network/4-network%20layer/#31","text":"\u6240\u6709\u7684\u6570\u636e\u5305\u88ab\u72ec\u7acb\u9001\u5165\u7f51\u7edc\uff0c\u6bcf\u4e2a\u5305\u72ec\u7acb\u8def\u7531\uff0c\u4e0d\u63d0\u524d\u5efa\u7acb\u4efb\u4f55\u8bbe\u7f6e\u3002 \u8def\u7531\u7b97\u6cd5","title":"3.1 \u65e0\u8fde\u63a5\u670d\u52a1"},{"location":"Computer%20Network/4-network%20layer/#32","text":"Virtual Circuit \u903b\u8f91\u8fde\u63a5\uff0c\u4e0d\u540c\u4e8e\u771f\u6b63\u7684\u7269\u7406\u8fde\u63a5\u3002 \u6240\u6709\u5206\u7ec4\u90fd\u6cbf\u7740\u8fd9\u6761\u903b\u8f91\u8fde\u63a5\u6309\u5b58\u50a8\u8f6c\u53d1\u53d1\u9001\u3002 \u8f6c\u53d1\u7b56\u7565\uff1a\u57fa\u4e8e\u5206\u7ec4\u6807\u7b7e\uff0ci.e. \u865a\u7535\u8def\u53f7 Label Switching\uff1a R4\u6839\u636e\u8f93\u5165\u7684\u7aef\u53e3\u548c\u6807\u7b7e\u67e5\u8868\u5f97\u5230\u51fa\u53e3\u548c\u201c\u6807\u7b7e\u201d\uff0cR4\u9700\u8981\u5c06\u539f\u6765\u7684\u6807\u7b7eL1\u66ff\u6362\u4e3aL2\u518d\u53d1\u51fa\u53bb\u3002 \u6309\u9700\u5230\u8fbe\u3002 \u95ee\u9898\uff1a\u94fe\u8def\u4e2d\u4efb\u4f55\u4e00\u4e2a\u73af\u8282\u5931\u6548\u5219\u7ecf\u8fc7\u5b83\u7684\u6240\u6709VC\u5931\u6548\u3002","title":"3.2 \u6709\u8fde\u63a5\u670d\u52a1"},{"location":"Computer%20Network/5-MAC%20Sublayer/","text":"5 MAC Sublayer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. \u4fe1\u9053\u5206\u914d \u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u591a\u65b9\u7ade\u4e89\u4fe1\u9053\u4f7f\u7528\u6743\u65f6\u5982\u4f55\u786e\u5b9a\u8c01\u53ef\u4ee5\u4f7f\u7528\u4fe1\u9053\u3002 1.1 \u9759\u6001\u5206\u914d \u65b9\u6cd5\uff1aTDM\u3001FDM \u9002\u7528\u8303\u56f4\uff1a\u7528\u6237\u5c11\uff1b\u6570\u76ee\u56fa\u5b9a\uff1b\u901a\u4fe1\u91cf\u5927\uff1b\u6d41\u91cf\u7a33\u5b9a \u4e0d\u9002\u7528\uff1a\u7a81\u53d1\u6027\u4e1a\u52a1\uff1b \u7f3a\u70b9\uff1a\u8d44\u6e90\u5206\u914d\u4e0d\u5408\u7406\uff0c\u6709\u6d6a\u8d39\uff0c\u6548\u7387\u4f4e\uff1b\u5ef6\u8fdf\u65f6\u95f4\u589e\u5927N\u500d\uff08N\u4e3a\u5212\u5206\u7684\u5b50\u4fe1\u9053\u4e2a\u6570\uff09 1.2 \u52a8\u6001\u5206\u914d 1.2.1 ALOHA 1.2.1.1 \u7eafALOHA \u60f3\u53d1\u5c31\u53d1\uff0c\u968f\u65f6\u53d1 \u51b2\u7a81\u7684\u5224\u65ad\u65b9\u5f0f\uff1a \u6bcf\u4e2a\u7ad9\u5728\u7ed9\u4e2d\u592e\u8ba1\u7b97\u673a\u53d1\u9001\u5e27\u4e4b\u540e\uff0c\u8be5\u8ba1\u7b97\u673a\u628a\u8be5\u5e27\u91cd\u65b0\u5e7f\u64ad\u7ed9\u6240\u6709\u7ad9\u3002\u56e0\u6b64\uff0c\u90a3\u4e2a\u53d1\u9001\u7ad9\u53ef\u4ee5\u4fa6\u542c\u6765\u81ea\u96c6\u7ebf\u5668\u7684\u5e7f\u64ad\uff0c\u4ee5\u6b64\u786e\u5b9a\u5b83\u7684\u5e27\u662f\u5426\u53d1\u9001\u6210\u529f\u3002 \u7c7b\u6bd4\uff1aSSH\u7ec8\u7aef\u8f93\u5165\uff0c\u770b\u5230\u7684\u662f\u8fdc\u7a0b\u53cd\u9988\u56de\u6765\u7684\u63a5\u6536\u7684\u7ed3\u679c\u3002 \u4fe1\u9053\u6548\u7387\u8bc4\u4f30\uff1a \u5047\u8bbe\u65b0\u751f\u6210\u7684\u5e27\u52a0\u4e0a\u9700\u8981\u91cd\u53d1\u7684\u8001\u5e27\u7684\u6570\u91cf\u7b26\u5408Poisson Distribution\uff0c\u6bcf\u5e27\u65f6 \u5e73\u5747\u5e27\u6570\u4e3aG \u3002 \u541e\u5410\u91cf S \u5c31\u662f\u8d1f\u8f7d G \u4e58\u4ee5\u6210\u529f\u4f20\u8f93\u7684\u6982\u7387\uff1a \\(S = GP_0\\) \uff08 \\(P_0\\) \u662f\u8fd9\u4e00\u5e27\u6ca1\u6709\u906d\u53d7\u51b2\u7a81\u7684\u6982\u7387\uff09\u3002 \u7ed9\u5b9a\u7684\u5e27\u65f6\u5185\u751f\u6210\u4e86k\u5e27\u7684\u6982\u7387\uff1a \\(Pr[k] = {G^k e^{-G} \\over k!}\\) \u3002\u4e0d\u51b2\u7a81\u5373\u4e3ak=0\uff0c\u6982\u7387\u4e3a \\(e^{-G}\\) \u3002 \u8003\u8651\u67d0\u4e00\u5e27\uff08\u56fe\u4e2d\u9634\u5f71\uff09\uff0c\u5176\u53ef\u80fd\u4e0e\u524d\u9762\u7684\u6216\u8005\u540e\u9762\u7684\u5e27\u65f6\u4e2d\u53d1\u51fa\u7684\u5e27\u51b2\u7a81\u3002\u524d\u540e\u4e24\u5e27\u52a0\u8d77\u6765\u751f\u62100\u5e27\u7684\u6982\u7387\u4e3a \\(e^{-2G}\\) \u3002 \u541e\u5410\u91cf\uff1a \\(S=Ge^{-2G}\\) \u3002\u6700\u5927\u503c\uff1a \\(S = {1 \\over 2e} \\approx 0.184\\) , where \\(G = 0.5\\) \u3002 1.2.1.2 \u5206\u69fd ALOHA \u6539\u5584\uff1a\u6572\u56de\u8f66\u4e4b\u540e\uff0c\u5fc5\u987b\u7b49\u5230\u4e0b\u4e00\u4e2a\u65f6\u69fd\u7684\u5f00\u59cb\u65f6\u523b\u624d\u53d1\u9001\u3002 \u5728\u6d4b\u8bd5\u5e27\u6240\u5728\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u69fd\u4e2d\u6ca1\u6709\u5176\u4ed6\u6d41\u91cf\u7684\u6982\u7387\u662f \\(e^{-G}\\) \uff0c \\(S = G e^{-G}\\) \u3002 1.2.2 Carrier Sense Protocol \u8f7d\u6ce2\u4fa6\u542c 1.2.2.1 1-persistent Carrier Sense Multiple Access \u53d1\u4e4b\u524d\u5148\u4fa6\u542c\u4fe1\u53f7 \u5176\u5b83\u7ad9\u5728\u53d1\uff0c\u7b49\u5f85\u76f4\u5230\u4fe1\u9053\u7a7a\u95f2 \u7a7a\u95f2\uff0c\u53d1\u4e00\u5e27\uff081-persistent\uff1a\u53d1\u73b0\u4fe1\u9053\u7a7a\u95f2\u65f6\u53d1\u9001\u7684\u6982\u7387\u4e3a1\uff09 \u51b2\u7a81\uff1a\u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u4ece\u5934\u5f00\u59cb\u4e0a\u8ff0\u8fc7\u7a0b 1.2.2.2 Non-persistent Carrier Sense Multiple Access \u5982\u679c\u4fe1\u9053\u5fd9\uff0c\u5e76\u4e0d\u662f\u6301\u7eed\u4fa6\u542c\u7136\u540e\u4e00\u5230\u7a7a\u95f2\u5c31\u7acb\u5373\u53d1\u9001 \u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u65f6\u95f4\uff0c\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b \u7f3a\u70b9\uff1a\u5ef6\u65f6++ 1.2.2.3 p-persistent Carrier Sense Multiple Access \u5982\u679c\u4fe1\u9053\u7a7a\u95f2\uff0c\u53d1\u9001\u6982\u7387\u4e3ap \u6bd4\u8f83\uff1a 1.2.2.4 CSMA with Collision Detection (CSMA/CD) \u88abEthernet\u91c7\u7528 \u5982\u679c\u4e00\u4e2a\u7ad9\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u5b83\u7acb\u5373\u4e2d\u6b62\u81ea\u5df1\u7684\u4f20\u9001\uff0c\u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u65f6\u95f4\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5c1d\u8bd5\u4f20\u9001\u3002 \u5982\u4f55\u786e\u5b9a\u7ade\u4e89\u5468\u671f\u7684\u957f\u5ea6\uff1f \u5047\u8bbe\u4e24\u4e2a\u76f8\u8ddd\u6700\u8fdc\u7684\u7ad9\u4f20\u64ad\u4fe1\u53f7\u6240\u9700\u8981\u7684\u65f6\u95f4\u4e3a \\(\\tau\\) \u3002 \\(t_0\\) \u65f6\u4e00\u4e2a\u7ad9\u5f00\u59cb\u53d1 \\(t_0 + \\tau - \\epsilon\\) \uff0c\u5373\u4fe1\u53f7\u5230\u8fbe\u6700\u8fdc\u90a3\u4e2a\u7ad9\u4e4b\u524d\u7684\u4e00\u5239\u90a3\uff0c \u90a3\u4e2a\u7ad9\u4e5f\u5f00\u59cb\u4f20\u8f93 \u6700\u8fdc\u7684\u90a3\u4e2a\u7ad9\u7acb\u5373\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u505c\u6b62 \u51b2\u7a81\u5f15\u8d77\u7684\u5fae\u5c0f\u566a\u58f0\u5c16\u5cf0\u8981\u5230 \\(t_0 + 2\\tau - \\epsilon\\) \u624d\u80fd\u56de\u5230\u539f\u6765\u90a3\u4e2a\u7ad9 \u7efc\u4e0a\uff0c\u4e00\u4e2a\u7ad9\u4f20\u8f93\u4e86 \\(2\\tau\\) \u4e4b\u540e\u8fd8\u6ca1\u6709\u76d1\u542c\u5230\u51b2\u7a81\uff0c\u5b83\u624d\u53ef\u4ee5\u786e\u4fdd\u81ea\u5df2\u7ecfseize\u4e86\u4fe1\u9053\uff08\u5373\u77e5\u9053\u5176\u4ed6\u7ad9\u77e5\u9053\u81ea\u5df1\u5728\u4f20\u56e0\u6b64\u4e0d\u4f1a\u5e72\u6270\u81ea\u5df1\uff09\u3002 \u6700\u5c0f\u6709\u6548\u5e27\u957f\u5ea6\uff1a64 Bytes\u3002 \u51e1\u662f\u4f4e\u4e8e\u6b64\u503c\u7684\uff0c\u5747\u89c6\u4e3a\u56e0\u51b2\u7a81\u800c\u5f02\u5e38\u4e2d\u6b62\u7684\u5e27\u3002 \u8be5\u503c\u662f\u7531\u4e0a\u8ff0\u7684 \\(2 \\tau\\) \u51b3\u5b9a\u7684\uff1a802.3\u89c4\u8303\u4e2d\u768410Mbps\u4ee5\u592a\u7f51\uff0c\u957f\u5ea62500m\uff0c\u5728 \\(2 \\tau \\approx 50 \\mu s\\) \u7684\u65f6\u95f4\u5185\u80fd\u53d1\u9001500bits\uff0c\u52a0\u4e0a\u5b89\u5168\u4f59\u91cf\u589e\u52a0\u81f3512bits = 64Bytes\u3002 \u7f3a\u70b9\uff1a\u7535\u7f06\u5f88\u957f\u800c\u5e27\u7684\u957f\u5ea6\u53c8\u5f88\u77ed\u65f6\uff0c\u51b2\u7a81\u4e0d\u4ec5\u964d\u4f4e\u4e86\u5e26\u5bbd\uff0c\u800c\u4e14\u4f7f\u5f97\u53d1\u9001\u4e00\u4e2a\u5e27\u7684\u65f6\u95f4\u53d8\u5f97\u52a8\u8361\u4e0d\u5b9a\u3002 1.2.3 \u65e0\u51b2\u7a81\u534f\u8bae 1.2.3.1 \u4f4d\u56fe\u534f\u8bae \u7ade\u4e89\u671f\uff1a\u4e3e\u624b\u793a\u610f\uff0c\u8d44\u6e90\u9884\u7559 \u4f20\u8f93\u671f\uff1a\u6309\u5e8f\u53d1\u9001 \u5229\u7528\u7387\uff1a \u4f4e\u8d1f\u8377/\u975e\u5747\u8861\u65f6\uff1ad/(d+N) \uff08\u7ad9\u70b9\u8d8a\u591a\uff0cN\u8d8a\u5927\uff0c\u5229\u7528\u7387\u8d8a\u4f4e\uff09 \u5728\u9ad8\u8d1f\u8377\u6761\u4ef6\u4e0b\uff1ad/(d+1)\uff0c\u63a5\u8fd1100% \u7f3a\u70b9\uff1a\u65e0\u6cd5\u8003\u8651\u4f18\u5148\u7ea7 2. \u6570\u636e\u94fe\u8def\u5c42\u4ea4\u6362\u539f\u7406 \u6570\u636e\u94fe\u8def\u5c42\u8bbe\u5907 \u6269\u5145 \u7f51\u7edc \u51b2\u7a81\u57df\u7684\u4e2a\u6570 https://blog.51cto.com/u_2225558/2312623 \u7f51\u6865\uff1a \u65b9\u5f0f\uff1a\u5b58\u50a8\u8f6c\u53d1 \u4f5c\u7528\uff1a\u5206\u5272\u51b2\u7a81\u57df\uff1b\u8fde\u63a5\u4e0d\u540c\u7c7b\u578b\u7684\u5c40\u57df\u7f51 2.1 \u900f\u660e\u7f51\u6865 \u65e0\u9700\u914d\u7f6e 2.1.1 \u9006\u5411\u5b66\u4e60 MAC\u5730\u5740\u8868\u7684\u6784\u5efa\uff1a\u9006\u5411\u5b66\u4e60\u6e90\u5730\u5740\uff1a \u4e3b\u673a \u5411\u5916\u53d1\u9001\u6570\u636e\u65f6 \uff0c\u5176MAC\u5730\u5740\u5c31\u4f1a\u88ab\u5b66\u4e60 \u8001\u5316\u65f6\u95f4\uff08\u9ed8\u8ba4300s\uff09\uff08\u5e94\u5bf9\u8bbe\u5907\u4f4d\u7f6e\u53d8\u66f4\uff09 \u603b\u7ed3\uff1a\u589e\uff08\u5e27\u7684\u6e90\u5730\u5740\u4e0d\u5728\u8868\u4e2d\uff09\uff1b\u5220\uff08\u8001\u5316\u65f6\u95f4\u5230\u671f\uff09\uff1b\u6539\uff08\u5e27\u7684\u6e90\u5730\u5740\u5728\u8868\u4e2d\uff0c\u66f4\u65b0\u65f6\u95f4\u6233\uff09 2.1.2 \u6cdb\u6d2a Flooding \u5c06\u4ece\u67d0\u4e2a\u63a5\u53e3\u6536\u5230\u7684\u6570\u636e\u6d41\u5411\u9664\u8be5\u63a5\u53e3\u4e4b\u5916\u7684\u6240\u6709\u63a5\u53e3\u53d1\u9001\u51fa\u53bb\u3002 \u4e24\u79cd\u76ee\u7684\u5730\u5740\u7684\u5e27\uff0c\u9700\u8981\u6cdb\u6d2a\uff1a \u5e7f\u64ad\u5e27:\u76ee\u7684\u5730\u5740\u4e3aFF-FF-FF-FF-FF-FF\u7684\u6570\u636e\u5e27 \u672a\u77e5\u5355\u64ad\u5e27:\u76ee\u7684\u5730\u5740\u4e0d\u5728MAC\u5730\u5740\u8f6c\u53d1\u8868\u4e2d\u7684\u5355\u64ad\u6570\u636e\u5e27 2.2 \u94fe\u8def\u5c42\u4ea4\u6362\u673a \u5206\u7c7b\uff1a\u591a\u7aef\u53e3\u900f\u660e\u7f51\u6865\uff1bPOE\uff08Power Over Ethernet\uff09\u4ea4\u6362\u673a \u4ea4\u6362\u6a21\u5f0f1\uff1a\u5b58\u50a8\u8f6c\u53d1\uff1a\u8f6c\u53d1\u524d\u63a5\u6536\u6574\u4e2a\u5e27\uff0cCRC\u6821\u9a8c\uff1b\u5ef6\u8fdf\u9ad8 \u4ea4\u6362\u6a21\u5f0f2\uff1a\u76f4\u901a\u4ea4\u6362\uff1a\u4e00\u65e6\u63a5\u6536\u5230\u5e27\u7684\u76ee\u7684\u5730\u5740\uff0c\u5c31\u5f00\u59cb\u8f6c\u53d1\uff1b\u5ef6\u8fdf\u4f4e \u4ea4\u6362\u6a21\u5f0f3\uff1a \u65e0\u788e\u7247\u8f6c\u53d1 \uff1a\u63a5\u6536\u5230\u5e27\u7684\u524d64\u5b57\u8282\uff0c\u5373\u5f00\u59cb\u8f6c\u53d1\uff1b \u5ef6\u8fdf\u4e2d\uff0c\u4f46\u662f\u8fc7\u6ee4\u4e86\u51b2\u7a81\u5bfc\u81f4\u7684\u788e\u7247\u5e27 \u5bf9\u79f0\u4ea4\u6362/\u975e\u5bf9\u79f0\u4ea4\u6362\uff1a\u51fa\u5165\u5e26\u5bbd\u662f\u5426\u76f8\u540c 2.3 \u751f\u6210\u6811\u534f\u8bae \u589e\u5f3a\u7a33\u5b9a\u6027\uff1a\u5197\u4f59\u62d3\u6251\uff1b\u7269\u7406\u73af\u8def\u5f15\u53d1\u4e86\u4ee5\u4e0b\u95ee\u9898\uff1a \u5e7f\u64ad\u98ce\u66b4\uff1a\u4ea4\u6362\u673a\u5728\u7f51\u6865\u4e0a\u65e0\u4f11\u6b62\u5730flooding\uff0c\u65e0\u9650\u5faa\u73af \u91cd\u590d\u5e27\uff1aX\u53d1\u9001\u5230\u73af\u8def\u7684\u5355\u64ad\u5e27\uff0c\u9020\u6210\u76ee\u7684\u8bbe\u5907Y\u6536\u5230\u91cd\u590d\u7684\u5e27 MAC\u5730\u5740\u8868\u4e0d\u7a33\u5b9a\uff1a\u5f53\u4e00\u4e2a\u5e27\u7684\u591a\u4e2a\u526f\u672c\u5230\u8fbe\u4e0d\u540c\u7aef\u53e3\u65f6\uff0c\u4ea4\u6362\u673a\u4f1a\u4e0d\u65ad\u4fee\u6539\u540c\u4e00MAC\u5730\u5740\u5bf9\u5e94\u7684\u7aef\u53e3 \u89e3\u51b3\u5197\u4f59\u62d3\u6251\u4e2d\u7684\u4f20\u8f93\u95ee\u9898\uff1a\u6784\u5efa\u65e0\u73af\u751f\u6210\u6811 \u6536\u53d1BPDU\uff1a \u6839\u6865ID \u6839\u8def\u5f84\u5f00\u9500 \u6307\u5b9a\u6865ID \u6307\u5b9a\u7aef\u53e3ID \u9009\u4e3e\uff1a \u6839\u6865 \u540c\u4e00\u5e7f\u64ad\u57df\u4e2d\u7684\u5168\u90e8\u4ea4\u6362\u673a\u53c2\u4e0e\u9009\u4e3e \u6865ID\u6700\u5c0f\u7684 \u6839\u6865\u6240\u6709\u7aef\u53e3\u90fd\u5904\u5728\u8f6c\u53d1\u72b6\u6001 \u4e3a\u6bcf\u4e2a\u975e\u6839\u6865\u9009\u51fa\u4e00\u4e2a\u6839\u7aef\u53e3\uff08\u5f00\u9500\u6700\u5c0f\uff1bkaixiao\u54e6 IEEE\u6839\u636e\uff09 \u4e3a\u6bcf\u4e2a\u7f51\u6bb5\u6307\u5b9a\u7aef\u53e3 \u4e00\u4e2a\u5177\u6709\u6700\u5c0f\u6839\u8def\u5f84\u5f00\u9500\u7684\u7aef\u53e3\uff0c\u4f5c\u4e3a\u8be5\u7f51\u6bb5\u7684\u6307\u5b9a\u7aef\u53e3 \u6307\u5b9a\u7aef\u53e3\u5904\u4e8e\u8f6c\u53d1\u72b6\u6001\uff0c\u8d1f\u8d23\u8be5\u7f51\u6bb5\u7684\u6570\u636e\u8f6c\u53d1 \u8fde\u63a5\u8be5\u7f51\u6bb5\u7684\u5176\u4ed6\u7aef\u53e3\uff0c\u82e5\u65e2\u4e0d\u662f\u6307\u5b9a\u7aef\u53e3\uff0c\u4e5f\u4e0d\u662f\u6839\u7aef\u53e3\uff0c\u5219\u963b\u585e\uff08\u663e\u7136\uff0c\u6839\u6865\u7684\u6240\u6709\u7aef\u53e3\u90fd\u662f\u6307\u5b9a\u7aef\u53e3\uff09 \u5f53\u7531\u4ea4\u6362\u673a(\u7f51\u6865)\u6216\u94fe\u8def\u6545\u969c\u5bfc\u81f4\u7f51\u7edc\u62d3\u6251\u6539\u53d8\u65f6\uff0c\u91cd\u65b0\u6784\u9020\u751f\u6210\u6811 \u5feb\u901f\u751f\u6210\u6811\u534f\u8bae(Rapid Spanning Tree Protocol, RSTP) \u5982\u4f55\u5bfb\u627e\u6700\u4f18\u8def\u5f84\uff1f 2.3.1 \u6e90\u8def\u7531\u7f51\u6865 2.4 \u865a\u62df\u5c40\u57df\u7f51 \u5e7f\u64ad\u57df\uff1a \u4ea4\u6362\u673a\u5212\u5206VLAN\uff0c\u5206\u9694\u5e7f\u64ad\u57df \u533a\u5206\u4e0d\u540cVLAN\u7684\u6570\u636e\u5e27\u7684\u65b9\u5f0f\uff1a \u6570\u636e\u5e27\u4e2d\u643a\u5e26VLAN\u6807\u8bb0 VLAN\u6807\u8bb0\u7531\u4ea4\u6362\u673a\u6dfb\u52a0/\u5265\u9664\uff0c\u5bf9\u7ec8\u7aef\u900f\u660e 3. \u65e0\u7ebf\u5c40\u57df\u7f51 3.1 802.11 \u7269\u7406\u5c42 3.1.1 MAC CSMA/CA(Carrier Sense Multiple Access with Collision Avoid)","title":"5 MAC Sublayer"},{"location":"Computer%20Network/5-MAC%20Sublayer/#5-mac-sublayer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"5 MAC Sublayer"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1","text":"\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u591a\u65b9\u7ade\u4e89\u4fe1\u9053\u4f7f\u7528\u6743\u65f6\u5982\u4f55\u786e\u5b9a\u8c01\u53ef\u4ee5\u4f7f\u7528\u4fe1\u9053\u3002","title":"1. \u4fe1\u9053\u5206\u914d"},{"location":"Computer%20Network/5-MAC%20Sublayer/#11","text":"\u65b9\u6cd5\uff1aTDM\u3001FDM \u9002\u7528\u8303\u56f4\uff1a\u7528\u6237\u5c11\uff1b\u6570\u76ee\u56fa\u5b9a\uff1b\u901a\u4fe1\u91cf\u5927\uff1b\u6d41\u91cf\u7a33\u5b9a \u4e0d\u9002\u7528\uff1a\u7a81\u53d1\u6027\u4e1a\u52a1\uff1b \u7f3a\u70b9\uff1a\u8d44\u6e90\u5206\u914d\u4e0d\u5408\u7406\uff0c\u6709\u6d6a\u8d39\uff0c\u6548\u7387\u4f4e\uff1b\u5ef6\u8fdf\u65f6\u95f4\u589e\u5927N\u500d\uff08N\u4e3a\u5212\u5206\u7684\u5b50\u4fe1\u9053\u4e2a\u6570\uff09","title":"1.1 \u9759\u6001\u5206\u914d"},{"location":"Computer%20Network/5-MAC%20Sublayer/#12","text":"","title":"1.2 \u52a8\u6001\u5206\u914d"},{"location":"Computer%20Network/5-MAC%20Sublayer/#121-aloha","text":"","title":"1.2.1 ALOHA"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1211-aloha","text":"\u60f3\u53d1\u5c31\u53d1\uff0c\u968f\u65f6\u53d1 \u51b2\u7a81\u7684\u5224\u65ad\u65b9\u5f0f\uff1a \u6bcf\u4e2a\u7ad9\u5728\u7ed9\u4e2d\u592e\u8ba1\u7b97\u673a\u53d1\u9001\u5e27\u4e4b\u540e\uff0c\u8be5\u8ba1\u7b97\u673a\u628a\u8be5\u5e27\u91cd\u65b0\u5e7f\u64ad\u7ed9\u6240\u6709\u7ad9\u3002\u56e0\u6b64\uff0c\u90a3\u4e2a\u53d1\u9001\u7ad9\u53ef\u4ee5\u4fa6\u542c\u6765\u81ea\u96c6\u7ebf\u5668\u7684\u5e7f\u64ad\uff0c\u4ee5\u6b64\u786e\u5b9a\u5b83\u7684\u5e27\u662f\u5426\u53d1\u9001\u6210\u529f\u3002 \u7c7b\u6bd4\uff1aSSH\u7ec8\u7aef\u8f93\u5165\uff0c\u770b\u5230\u7684\u662f\u8fdc\u7a0b\u53cd\u9988\u56de\u6765\u7684\u63a5\u6536\u7684\u7ed3\u679c\u3002 \u4fe1\u9053\u6548\u7387\u8bc4\u4f30\uff1a \u5047\u8bbe\u65b0\u751f\u6210\u7684\u5e27\u52a0\u4e0a\u9700\u8981\u91cd\u53d1\u7684\u8001\u5e27\u7684\u6570\u91cf\u7b26\u5408Poisson Distribution\uff0c\u6bcf\u5e27\u65f6 \u5e73\u5747\u5e27\u6570\u4e3aG \u3002 \u541e\u5410\u91cf S \u5c31\u662f\u8d1f\u8f7d G \u4e58\u4ee5\u6210\u529f\u4f20\u8f93\u7684\u6982\u7387\uff1a \\(S = GP_0\\) \uff08 \\(P_0\\) \u662f\u8fd9\u4e00\u5e27\u6ca1\u6709\u906d\u53d7\u51b2\u7a81\u7684\u6982\u7387\uff09\u3002 \u7ed9\u5b9a\u7684\u5e27\u65f6\u5185\u751f\u6210\u4e86k\u5e27\u7684\u6982\u7387\uff1a \\(Pr[k] = {G^k e^{-G} \\over k!}\\) \u3002\u4e0d\u51b2\u7a81\u5373\u4e3ak=0\uff0c\u6982\u7387\u4e3a \\(e^{-G}\\) \u3002 \u8003\u8651\u67d0\u4e00\u5e27\uff08\u56fe\u4e2d\u9634\u5f71\uff09\uff0c\u5176\u53ef\u80fd\u4e0e\u524d\u9762\u7684\u6216\u8005\u540e\u9762\u7684\u5e27\u65f6\u4e2d\u53d1\u51fa\u7684\u5e27\u51b2\u7a81\u3002\u524d\u540e\u4e24\u5e27\u52a0\u8d77\u6765\u751f\u62100\u5e27\u7684\u6982\u7387\u4e3a \\(e^{-2G}\\) \u3002 \u541e\u5410\u91cf\uff1a \\(S=Ge^{-2G}\\) \u3002\u6700\u5927\u503c\uff1a \\(S = {1 \\over 2e} \\approx 0.184\\) , where \\(G = 0.5\\) \u3002","title":"1.2.1.1 \u7eafALOHA"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1212-aloha","text":"\u6539\u5584\uff1a\u6572\u56de\u8f66\u4e4b\u540e\uff0c\u5fc5\u987b\u7b49\u5230\u4e0b\u4e00\u4e2a\u65f6\u69fd\u7684\u5f00\u59cb\u65f6\u523b\u624d\u53d1\u9001\u3002 \u5728\u6d4b\u8bd5\u5e27\u6240\u5728\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u69fd\u4e2d\u6ca1\u6709\u5176\u4ed6\u6d41\u91cf\u7684\u6982\u7387\u662f \\(e^{-G}\\) \uff0c \\(S = G e^{-G}\\) \u3002","title":"1.2.1.2 \u5206\u69fd ALOHA"},{"location":"Computer%20Network/5-MAC%20Sublayer/#122-carrier-sense-protocol","text":"","title":"1.2.2 Carrier Sense Protocol \u8f7d\u6ce2\u4fa6\u542c"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1221-1-persistent-carrier-sense-multiple-access","text":"\u53d1\u4e4b\u524d\u5148\u4fa6\u542c\u4fe1\u53f7 \u5176\u5b83\u7ad9\u5728\u53d1\uff0c\u7b49\u5f85\u76f4\u5230\u4fe1\u9053\u7a7a\u95f2 \u7a7a\u95f2\uff0c\u53d1\u4e00\u5e27\uff081-persistent\uff1a\u53d1\u73b0\u4fe1\u9053\u7a7a\u95f2\u65f6\u53d1\u9001\u7684\u6982\u7387\u4e3a1\uff09 \u51b2\u7a81\uff1a\u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u4ece\u5934\u5f00\u59cb\u4e0a\u8ff0\u8fc7\u7a0b","title":"1.2.2.1 1-persistent Carrier Sense Multiple Access"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1222-non-persistent-carrier-sense-multiple-access","text":"\u5982\u679c\u4fe1\u9053\u5fd9\uff0c\u5e76\u4e0d\u662f\u6301\u7eed\u4fa6\u542c\u7136\u540e\u4e00\u5230\u7a7a\u95f2\u5c31\u7acb\u5373\u53d1\u9001 \u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u65f6\u95f4\uff0c\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b \u7f3a\u70b9\uff1a\u5ef6\u65f6++","title":"1.2.2.2 Non-persistent Carrier Sense Multiple Access"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1223-p-persistent-carrier-sense-multiple-access","text":"\u5982\u679c\u4fe1\u9053\u7a7a\u95f2\uff0c\u53d1\u9001\u6982\u7387\u4e3ap \u6bd4\u8f83\uff1a","title":"1.2.2.3 p-persistent Carrier Sense Multiple Access"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1224-csma-with-collision-detection-csmacd","text":"\u88abEthernet\u91c7\u7528 \u5982\u679c\u4e00\u4e2a\u7ad9\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u5b83\u7acb\u5373\u4e2d\u6b62\u81ea\u5df1\u7684\u4f20\u9001\uff0c\u7b49\u5f85\u4e00\u6bb5\u968f\u673a\u65f6\u95f4\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5c1d\u8bd5\u4f20\u9001\u3002 \u5982\u4f55\u786e\u5b9a\u7ade\u4e89\u5468\u671f\u7684\u957f\u5ea6\uff1f \u5047\u8bbe\u4e24\u4e2a\u76f8\u8ddd\u6700\u8fdc\u7684\u7ad9\u4f20\u64ad\u4fe1\u53f7\u6240\u9700\u8981\u7684\u65f6\u95f4\u4e3a \\(\\tau\\) \u3002 \\(t_0\\) \u65f6\u4e00\u4e2a\u7ad9\u5f00\u59cb\u53d1 \\(t_0 + \\tau - \\epsilon\\) \uff0c\u5373\u4fe1\u53f7\u5230\u8fbe\u6700\u8fdc\u90a3\u4e2a\u7ad9\u4e4b\u524d\u7684\u4e00\u5239\u90a3\uff0c \u90a3\u4e2a\u7ad9\u4e5f\u5f00\u59cb\u4f20\u8f93 \u6700\u8fdc\u7684\u90a3\u4e2a\u7ad9\u7acb\u5373\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u505c\u6b62 \u51b2\u7a81\u5f15\u8d77\u7684\u5fae\u5c0f\u566a\u58f0\u5c16\u5cf0\u8981\u5230 \\(t_0 + 2\\tau - \\epsilon\\) \u624d\u80fd\u56de\u5230\u539f\u6765\u90a3\u4e2a\u7ad9 \u7efc\u4e0a\uff0c\u4e00\u4e2a\u7ad9\u4f20\u8f93\u4e86 \\(2\\tau\\) \u4e4b\u540e\u8fd8\u6ca1\u6709\u76d1\u542c\u5230\u51b2\u7a81\uff0c\u5b83\u624d\u53ef\u4ee5\u786e\u4fdd\u81ea\u5df2\u7ecfseize\u4e86\u4fe1\u9053\uff08\u5373\u77e5\u9053\u5176\u4ed6\u7ad9\u77e5\u9053\u81ea\u5df1\u5728\u4f20\u56e0\u6b64\u4e0d\u4f1a\u5e72\u6270\u81ea\u5df1\uff09\u3002 \u6700\u5c0f\u6709\u6548\u5e27\u957f\u5ea6\uff1a64 Bytes\u3002 \u51e1\u662f\u4f4e\u4e8e\u6b64\u503c\u7684\uff0c\u5747\u89c6\u4e3a\u56e0\u51b2\u7a81\u800c\u5f02\u5e38\u4e2d\u6b62\u7684\u5e27\u3002 \u8be5\u503c\u662f\u7531\u4e0a\u8ff0\u7684 \\(2 \\tau\\) \u51b3\u5b9a\u7684\uff1a802.3\u89c4\u8303\u4e2d\u768410Mbps\u4ee5\u592a\u7f51\uff0c\u957f\u5ea62500m\uff0c\u5728 \\(2 \\tau \\approx 50 \\mu s\\) \u7684\u65f6\u95f4\u5185\u80fd\u53d1\u9001500bits\uff0c\u52a0\u4e0a\u5b89\u5168\u4f59\u91cf\u589e\u52a0\u81f3512bits = 64Bytes\u3002 \u7f3a\u70b9\uff1a\u7535\u7f06\u5f88\u957f\u800c\u5e27\u7684\u957f\u5ea6\u53c8\u5f88\u77ed\u65f6\uff0c\u51b2\u7a81\u4e0d\u4ec5\u964d\u4f4e\u4e86\u5e26\u5bbd\uff0c\u800c\u4e14\u4f7f\u5f97\u53d1\u9001\u4e00\u4e2a\u5e27\u7684\u65f6\u95f4\u53d8\u5f97\u52a8\u8361\u4e0d\u5b9a\u3002","title":"1.2.2.4 CSMA with Collision Detection (CSMA/CD)"},{"location":"Computer%20Network/5-MAC%20Sublayer/#123","text":"","title":"1.2.3 \u65e0\u51b2\u7a81\u534f\u8bae"},{"location":"Computer%20Network/5-MAC%20Sublayer/#1231","text":"\u7ade\u4e89\u671f\uff1a\u4e3e\u624b\u793a\u610f\uff0c\u8d44\u6e90\u9884\u7559 \u4f20\u8f93\u671f\uff1a\u6309\u5e8f\u53d1\u9001 \u5229\u7528\u7387\uff1a \u4f4e\u8d1f\u8377/\u975e\u5747\u8861\u65f6\uff1ad/(d+N) \uff08\u7ad9\u70b9\u8d8a\u591a\uff0cN\u8d8a\u5927\uff0c\u5229\u7528\u7387\u8d8a\u4f4e\uff09 \u5728\u9ad8\u8d1f\u8377\u6761\u4ef6\u4e0b\uff1ad/(d+1)\uff0c\u63a5\u8fd1100% \u7f3a\u70b9\uff1a\u65e0\u6cd5\u8003\u8651\u4f18\u5148\u7ea7","title":"1.2.3.1 \u4f4d\u56fe\u534f\u8bae"},{"location":"Computer%20Network/5-MAC%20Sublayer/#2","text":"\u6570\u636e\u94fe\u8def\u5c42\u8bbe\u5907 \u6269\u5145 \u7f51\u7edc \u51b2\u7a81\u57df\u7684\u4e2a\u6570 https://blog.51cto.com/u_2225558/2312623 \u7f51\u6865\uff1a \u65b9\u5f0f\uff1a\u5b58\u50a8\u8f6c\u53d1 \u4f5c\u7528\uff1a\u5206\u5272\u51b2\u7a81\u57df\uff1b\u8fde\u63a5\u4e0d\u540c\u7c7b\u578b\u7684\u5c40\u57df\u7f51","title":"2. \u6570\u636e\u94fe\u8def\u5c42\u4ea4\u6362\u539f\u7406"},{"location":"Computer%20Network/5-MAC%20Sublayer/#21","text":"\u65e0\u9700\u914d\u7f6e","title":"2.1 \u900f\u660e\u7f51\u6865"},{"location":"Computer%20Network/5-MAC%20Sublayer/#211","text":"MAC\u5730\u5740\u8868\u7684\u6784\u5efa\uff1a\u9006\u5411\u5b66\u4e60\u6e90\u5730\u5740\uff1a \u4e3b\u673a \u5411\u5916\u53d1\u9001\u6570\u636e\u65f6 \uff0c\u5176MAC\u5730\u5740\u5c31\u4f1a\u88ab\u5b66\u4e60 \u8001\u5316\u65f6\u95f4\uff08\u9ed8\u8ba4300s\uff09\uff08\u5e94\u5bf9\u8bbe\u5907\u4f4d\u7f6e\u53d8\u66f4\uff09 \u603b\u7ed3\uff1a\u589e\uff08\u5e27\u7684\u6e90\u5730\u5740\u4e0d\u5728\u8868\u4e2d\uff09\uff1b\u5220\uff08\u8001\u5316\u65f6\u95f4\u5230\u671f\uff09\uff1b\u6539\uff08\u5e27\u7684\u6e90\u5730\u5740\u5728\u8868\u4e2d\uff0c\u66f4\u65b0\u65f6\u95f4\u6233\uff09","title":"2.1.1 \u9006\u5411\u5b66\u4e60"},{"location":"Computer%20Network/5-MAC%20Sublayer/#212-flooding","text":"\u5c06\u4ece\u67d0\u4e2a\u63a5\u53e3\u6536\u5230\u7684\u6570\u636e\u6d41\u5411\u9664\u8be5\u63a5\u53e3\u4e4b\u5916\u7684\u6240\u6709\u63a5\u53e3\u53d1\u9001\u51fa\u53bb\u3002 \u4e24\u79cd\u76ee\u7684\u5730\u5740\u7684\u5e27\uff0c\u9700\u8981\u6cdb\u6d2a\uff1a \u5e7f\u64ad\u5e27:\u76ee\u7684\u5730\u5740\u4e3aFF-FF-FF-FF-FF-FF\u7684\u6570\u636e\u5e27 \u672a\u77e5\u5355\u64ad\u5e27:\u76ee\u7684\u5730\u5740\u4e0d\u5728MAC\u5730\u5740\u8f6c\u53d1\u8868\u4e2d\u7684\u5355\u64ad\u6570\u636e\u5e27","title":"2.1.2 \u6cdb\u6d2a Flooding"},{"location":"Computer%20Network/5-MAC%20Sublayer/#22","text":"\u5206\u7c7b\uff1a\u591a\u7aef\u53e3\u900f\u660e\u7f51\u6865\uff1bPOE\uff08Power Over Ethernet\uff09\u4ea4\u6362\u673a \u4ea4\u6362\u6a21\u5f0f1\uff1a\u5b58\u50a8\u8f6c\u53d1\uff1a\u8f6c\u53d1\u524d\u63a5\u6536\u6574\u4e2a\u5e27\uff0cCRC\u6821\u9a8c\uff1b\u5ef6\u8fdf\u9ad8 \u4ea4\u6362\u6a21\u5f0f2\uff1a\u76f4\u901a\u4ea4\u6362\uff1a\u4e00\u65e6\u63a5\u6536\u5230\u5e27\u7684\u76ee\u7684\u5730\u5740\uff0c\u5c31\u5f00\u59cb\u8f6c\u53d1\uff1b\u5ef6\u8fdf\u4f4e \u4ea4\u6362\u6a21\u5f0f3\uff1a \u65e0\u788e\u7247\u8f6c\u53d1 \uff1a\u63a5\u6536\u5230\u5e27\u7684\u524d64\u5b57\u8282\uff0c\u5373\u5f00\u59cb\u8f6c\u53d1\uff1b \u5ef6\u8fdf\u4e2d\uff0c\u4f46\u662f\u8fc7\u6ee4\u4e86\u51b2\u7a81\u5bfc\u81f4\u7684\u788e\u7247\u5e27 \u5bf9\u79f0\u4ea4\u6362/\u975e\u5bf9\u79f0\u4ea4\u6362\uff1a\u51fa\u5165\u5e26\u5bbd\u662f\u5426\u76f8\u540c","title":"2.2 \u94fe\u8def\u5c42\u4ea4\u6362\u673a"},{"location":"Computer%20Network/5-MAC%20Sublayer/#23","text":"\u589e\u5f3a\u7a33\u5b9a\u6027\uff1a\u5197\u4f59\u62d3\u6251\uff1b\u7269\u7406\u73af\u8def\u5f15\u53d1\u4e86\u4ee5\u4e0b\u95ee\u9898\uff1a \u5e7f\u64ad\u98ce\u66b4\uff1a\u4ea4\u6362\u673a\u5728\u7f51\u6865\u4e0a\u65e0\u4f11\u6b62\u5730flooding\uff0c\u65e0\u9650\u5faa\u73af \u91cd\u590d\u5e27\uff1aX\u53d1\u9001\u5230\u73af\u8def\u7684\u5355\u64ad\u5e27\uff0c\u9020\u6210\u76ee\u7684\u8bbe\u5907Y\u6536\u5230\u91cd\u590d\u7684\u5e27 MAC\u5730\u5740\u8868\u4e0d\u7a33\u5b9a\uff1a\u5f53\u4e00\u4e2a\u5e27\u7684\u591a\u4e2a\u526f\u672c\u5230\u8fbe\u4e0d\u540c\u7aef\u53e3\u65f6\uff0c\u4ea4\u6362\u673a\u4f1a\u4e0d\u65ad\u4fee\u6539\u540c\u4e00MAC\u5730\u5740\u5bf9\u5e94\u7684\u7aef\u53e3 \u89e3\u51b3\u5197\u4f59\u62d3\u6251\u4e2d\u7684\u4f20\u8f93\u95ee\u9898\uff1a\u6784\u5efa\u65e0\u73af\u751f\u6210\u6811 \u6536\u53d1BPDU\uff1a \u6839\u6865ID \u6839\u8def\u5f84\u5f00\u9500 \u6307\u5b9a\u6865ID \u6307\u5b9a\u7aef\u53e3ID \u9009\u4e3e\uff1a \u6839\u6865 \u540c\u4e00\u5e7f\u64ad\u57df\u4e2d\u7684\u5168\u90e8\u4ea4\u6362\u673a\u53c2\u4e0e\u9009\u4e3e \u6865ID\u6700\u5c0f\u7684 \u6839\u6865\u6240\u6709\u7aef\u53e3\u90fd\u5904\u5728\u8f6c\u53d1\u72b6\u6001 \u4e3a\u6bcf\u4e2a\u975e\u6839\u6865\u9009\u51fa\u4e00\u4e2a\u6839\u7aef\u53e3\uff08\u5f00\u9500\u6700\u5c0f\uff1bkaixiao\u54e6 IEEE\u6839\u636e\uff09 \u4e3a\u6bcf\u4e2a\u7f51\u6bb5\u6307\u5b9a\u7aef\u53e3 \u4e00\u4e2a\u5177\u6709\u6700\u5c0f\u6839\u8def\u5f84\u5f00\u9500\u7684\u7aef\u53e3\uff0c\u4f5c\u4e3a\u8be5\u7f51\u6bb5\u7684\u6307\u5b9a\u7aef\u53e3 \u6307\u5b9a\u7aef\u53e3\u5904\u4e8e\u8f6c\u53d1\u72b6\u6001\uff0c\u8d1f\u8d23\u8be5\u7f51\u6bb5\u7684\u6570\u636e\u8f6c\u53d1 \u8fde\u63a5\u8be5\u7f51\u6bb5\u7684\u5176\u4ed6\u7aef\u53e3\uff0c\u82e5\u65e2\u4e0d\u662f\u6307\u5b9a\u7aef\u53e3\uff0c\u4e5f\u4e0d\u662f\u6839\u7aef\u53e3\uff0c\u5219\u963b\u585e\uff08\u663e\u7136\uff0c\u6839\u6865\u7684\u6240\u6709\u7aef\u53e3\u90fd\u662f\u6307\u5b9a\u7aef\u53e3\uff09 \u5f53\u7531\u4ea4\u6362\u673a(\u7f51\u6865)\u6216\u94fe\u8def\u6545\u969c\u5bfc\u81f4\u7f51\u7edc\u62d3\u6251\u6539\u53d8\u65f6\uff0c\u91cd\u65b0\u6784\u9020\u751f\u6210\u6811 \u5feb\u901f\u751f\u6210\u6811\u534f\u8bae(Rapid Spanning Tree Protocol, RSTP) \u5982\u4f55\u5bfb\u627e\u6700\u4f18\u8def\u5f84\uff1f","title":"2.3 \u751f\u6210\u6811\u534f\u8bae"},{"location":"Computer%20Network/5-MAC%20Sublayer/#231","text":"","title":"2.3.1 \u6e90\u8def\u7531\u7f51\u6865"},{"location":"Computer%20Network/5-MAC%20Sublayer/#24","text":"\u5e7f\u64ad\u57df\uff1a \u4ea4\u6362\u673a\u5212\u5206VLAN\uff0c\u5206\u9694\u5e7f\u64ad\u57df \u533a\u5206\u4e0d\u540cVLAN\u7684\u6570\u636e\u5e27\u7684\u65b9\u5f0f\uff1a \u6570\u636e\u5e27\u4e2d\u643a\u5e26VLAN\u6807\u8bb0 VLAN\u6807\u8bb0\u7531\u4ea4\u6362\u673a\u6dfb\u52a0/\u5265\u9664\uff0c\u5bf9\u7ec8\u7aef\u900f\u660e","title":"2.4 \u865a\u62df\u5c40\u57df\u7f51"},{"location":"Computer%20Network/5-MAC%20Sublayer/#3","text":"","title":"3. \u65e0\u7ebf\u5c40\u57df\u7f51"},{"location":"Computer%20Network/5-MAC%20Sublayer/#31-80211","text":"","title":"3.1 802.11 \u7269\u7406\u5c42"},{"location":"Computer%20Network/5-MAC%20Sublayer/#311-mac","text":"CSMA/CA(Carrier Sense Multiple Access with Collision Avoid)","title":"3.1.1 MAC"},{"location":"Computer%20Network/6-Data%20Link%20Layer/","text":"6 Data Link Layer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. \u5411\u7f51\u7edc\u5c42\u63d0\u4f9b\u7684\u670d\u52a1 (1) \u65e0\u786e\u8ba4\u7684\u65e0\u8fde\u63a5\u670d\u52a1\uff1a\u4e8b\u5148\u4e0d\u5efa\u7acb\u903b\u8f91\u8fde\u63a5\uff1b\u51fa\u9519\u4e0d\u68c0\u6d4b\u4e0d\u6062\u590d\u3002e.g. \u4ee5\u592a\u7f51 (2) \u6709\u786e\u8ba4\u7684\u65e0\u8fde\u63a5\u670d\u52a1\uff1a\u53d1\u9001\u7684\u6bcf\u4e00\u5e27\u63a5\u5230\u540e\u5355\u72ec\u786e\u8ba4\uff1be.g. 802.11 (WiFi) (3) \u6709\u786e\u8ba4\u7684 \u6709\u8fde\u63a5 \u670d\u52a1\uff1a \u5efa\u7acb\u8fde\u63a5 \u6bcf\u4e00\u5e27\u7f16\u53f7\uff1b\u786e\u4fdd\u6070\u597d\u6536\u5230\u4e00\u6b21\uff1b \u9002\u7528\u4e8e\uff1a\u957f\u8ddd\u79bb\u4e0d\u53ef\u9760\uff1be.g. \u536b\u661f\uff1b\uff08\u53ef\u4ee5\u60f3\u8c61\u4e22\u5931\u4e86\u786e\u8ba4\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e2a\u5e27\u88ab\u6536\u53d1\u591a\u6b21\uff0c\u56e0\u800c\u5c06\u6d6a\u8d39\u5e26\u5bbd\u3002\uff09 \u4e09\u4e2a\u9636\u6bb5\uff1a \u5efa\u7acb\u8fde\u63a5\uff1a\u521d\u59cb\u5316\u53d8\u91cf\u3001\u8ba1\u6570\u5668 \u4f20\u8f93\u6570\u636e\u5e27 \u91ca\u653e\u8fde\u63a5\uff1a\u91ca\u653e\u53d8\u91cf\u3001\u7f13\u51b2\u533a\u7b49\u8d44\u6e90 2. \u6210\u5e27 \u68c0\u9519\u3001\u7ea0\u9519\uff1b\u62c6\u5206\u6bd4\u7279\u6d41\u4ee5\u6210\u5e27 2.1 \u5b57\u8282\u8ba1\u6570\u6cd5 \u7528\u5934\u90e8\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u6765\u6807\u8bc6\u8be5\u5e27\u4e2d\u7684\u5b57\u7b26\u6570\uff08\u540e\u9762\u8ddf\u7740\u7684\u5e27\u7684\u5b57\u7b26\u6570\uff09 \u8ba1\u6570\u503c\u6709\u53ef\u80fd\u56e0\u4e3a\u4e00\u4e2a\u4f20\u8f93\u9519\u8bef\u800c\u88ab\u5f04\u6df7 2.2 \u5b57\u8282\u586b\u5145\u7684\u6807\u5fd7\u5b57\u8282\u6cd5 \u6bcf\u4e2a\u5e27\u7528\u6807\u5fd7\u5b57\u8282\uff08flag byte\uff09\u4f5c\u4e3a\u5f00\u59cb\u548c\u7ed3\u675f \u89e3\u51b3\u6570\u636e\u4e2d\u51fa\u73b0FLAG\uff1aESC\u8f6c\u4e49\u5b57\u8282 \u6570\u636e\u4e2d\u51fa\u73b0ESC\uff1a\u4ecd\u7136\u7528ESC\u8f6c\u4e49\uff1b \u5728\u63a5\u6536\u65b9\uff0c\u7b2c\u4e00\u4e2a\u8f6c\u4e49\u5b57\u8282ESC\u88ab\u5220\u9664\uff0c\u800c\u7559\u4e0b\u7d27\u8ddf\u5728\u5b83\u540e\u9762\u7684\u4e00\u4e2a\u6570\u636e\u5b57\u8282 \u7f3a\u70b9\uff1a\u53ea\u80fd\u4f7f\u7528 8 \u6bd4\u7279\u7684\u5b57\u8282\uff1b\u5e27\u53ea\u80fd\u4ee58\u5b57\u8282\u4e3a\u5355\u5143 2.3 \u6bd4\u7279\u586b\u5145\u7684\u6807\u5fd7\u6bd4\u7279\u6cd5 \u5e27\u7684\u5212\u5206\u53ef\u4ee5\u5728\u6bd4\u7279\u7ea7\u5b8c\u6210 \u6bcf\u4e2a\u5e27\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u662f\u6807\u5fd7\u5b57\u8282\uff1a01111110\uff08Ox7E\uff09 \u6bcf\u5f53\u53d1\u9001\u65b9\u5728\u6570\u636e\u4e2d\u9047\u5230\u8fde\u7eed\u4e94\u4e2a1\uff0c\u5b83\u4fbf\u81ea\u52a8\u5728\u8f93\u51fa\u7684\u6bd4\u7279\u6d41\u4e2d\u586b\u5165\u4e00\u4e2a\u6bd4\u72790\u3002 \u5f53\u63a5\u6536\u65b9\u770b\u5230 5 \u4e2a\u8fde\u7eed\u6bd4\u7279 1 \uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u6bd4\u72790\uff0c\u5b83\u5c31\u81ea\u52a8\u5254\u9664\uff08\u5373\u5220\u9664\uff09\u6bd4\u7279 0 \u3002 \u7f3a\u70b9\uff1a\u5982\u679c\u6570\u636e\u4e2d\u6807\u5fd7\u5b57\u8282\u592a\u591a\uff0c\u5219\u5e27\u7684\u957f\u5ea6\u5927\u5e45\u589e\u52a0\u3002 2.4 \u7269\u7406\u5c42\u7f16\u7801\u8fdd\u7981\u6cd5 \u6838\u5fc3\u601d\u60f3:\u9009\u62e9\u7684\u5b9a\u754c\u7b26\u4e0d\u4f1a\u5728\u6570\u636e\u90e8\u5206\u51fa\u73b0 4B/5B\u7f16\u7801\u65b9\u6848\uff1a 4\u6bd4\u7279\u6570\u636e\u6620\u5c04\u62105\u6bd4\u7279\u7f16\u7801\uff0c\u5269\u4f59\u7684\u4e00\u534a\u7801\u5b57(16\u4e2a\u7801\u5b57)\u672a\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528\u505a\u5e27\u5b9a\u754c\u7b26 \u4f8b\u5982: 00110\u7ec4\u5408\u4e0d\u5305\u542b\u57284B/5B\u7f16\u7801\u4e2d\uff0c\u53ef\u505a\u5e27\u5b9a\u754c\u7b26 3. \u68c0\u9519 3.1 \u5947\u5076\u6821\u9a8c \u589e\u52a01\u4f4d\u6821\u9a8c\u4f4d\uff0c\u53ef\u4ee5\u68c0\u67e5\u5947\u6570\u4e2a\u4f4d\u9519\u8bef \u5076\u6821\u9a8c\uff1a\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e3a\u5076\u6570\u4e2a \u5947\u6821\u9a8c\uff1a\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e3a\u5947\u6570\u4e2a 3.2 Checksum \u6821\u9a8c\u548c 3.3 CRC \u5faa\u73af\u5197\u4f59\u6821\u9a8c 4. \u7ea0\u9519 Codeword\uff1an\u4f4d\u7801\u5b57\uff0cm\u4e2a\u6d88\u606f\u4f4d\u548cr\u4e2a\u6821\u9a8c\u4f4d\uff0c \\(n = m + r\\) \u3002 Hamming distance\uff1a\u4e24\u4e2a\u7801\u5b57\u4e2d\u4e0d\u76f8\u540c\u7684\u4f4d\u7684\u4e2a\u6570 \u539f\u7406\uff1a\u7a7a\u95f4\u7a00\u758f\uff1a\u5bf9 r \u6821\u9a8c\u4f4d\uff0c\u53ef\u80fd\u7684\u62a5\u6587\u4e2d\u53ea\u6709\u5f88\u5c11\u4e00\u90e8\u5206\uff08 \\(1/2^r\\) \uff09\u662f\u5408\u6cd5\u7684\u3002 Hamming distance\u4e3ad\u7684\u7f16\u7801\u65b9\u6848\uff1a\u6700\u77ed\u7684\u4e24\u4e2a\u5408\u6cd5\u7684\u7f16\u7801\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3ad \u4e3a\u4e86\u68c0\u67e5\u51fad\u4e2a\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d77\u660e\u8ddd\u79bb\u4e3a d+1 \u7684\u7f16\u7801 \u4e3a\u4e86\u7ea0\u6b63d\u4e2a\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d77\u660e\u8ddd\u79bb\u4e3a 2d+1 \u7684\u7f16\u7801 \u5408\u6cd5\u7801\u5b57\u4e4b\u95f4\u7684\u8ddd\u79bb\u8db3\u591f\u8fdc\uff0c\u5373\u4f7f\u53d1\u751f\u4e86 d \u4f4d\u53d8\u5316\uff0c\u7ed3\u679c\u4e5f\u8fd8\u662f\u79bb\u5b83\u539f\u6765\u7684\u7801\u5b57\u6700\u8fd1\u3002\u8fd9\u610f\u5473\u7740\u5728\u4e0d\u592a\u53ef\u80fd\u6709\u66f4\u591a\u9519\u8bef\u7684\u5047\u8bbe\u4e0b\uff0c\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u539f\u6765\u7684\u7801\u5b57\u3002 \u8bbe\u8ba1\u7ea0\u9519\u7801\u7684\u8981\u6c42\uff1a m\u4e2a\u4fe1\u606f\u4f4d\uff0cr\u4e2a\u6821\u9a8c\u4f4d\uff0cn=m+r\u4f4d\u7801\u5b57\uff1b\u6700\u591a\u9519d\u4f4d\u3002 \u6709\u6548\u4fe1\u606f\uff1a \\(2^m\\) \u4e2a\uff1b \u6bcf\u4e00\u4e2an\u4f4d\u7ea0\u9519\u7801\uff0c\u5305\u62ec\u6b63\u786e\u7684\uff0c\u5b9e\u9645\u4e2d\u53ef\u80fd\u4f1a\u56e0\u4e3a\u51fa\u9519\u53d8\u6210 \\(\\Sigma_{k = 0}^d\\C_n^k\\) \u79cd\u5f62\u5f0f\u3002 \u4fdd\u8bc1n\u4f4d\u7ea0\u9519\u7801\u80fd\u591f\u8868\u793a\u4e0a\u8ff0\u6240\u6709\u4e0d\u540c\u7684\u7801\u5b57\uff1a \\(2^m \\cdot \\Sigma_{k = 0}^d\\C_n^k \\leq 2^n\\) \u3002 \u7531\u4e0a\u5f0f\u53ef\u89e3\u51fa\u7ea0\u9519\u6240\u9700\u7684\u6821\u9a8c\u4f4d\u7684\u4e2a\u6570\u7684 \u4e0b\u754c \u3002 4.1 Hamming Code 4.1.1 \u7f16\u7801 \u7f3a\u7701\u4e3a\u5076\u6821\u9a8c 4.1.2 \u7ea0\u9519 \u7ec41\u30012\u5171\u540c\u5b9a\u4f4d\u5217 \u7ec43\u30014\u5171\u540c\u5b9a\u4f4d\u884c \u6574\u4e2a\u8fc7\u7a0b\uff1a \u6bcf\u4e2a\u7801\u5b57\u5230\u6765\u524d\uff0c\u63a5\u6536\u65b9\u8ba1\u6570\u5668\u6e05\u96f6\uff1b \u63a5\u6536\u65b9\u68c0\u67e5\u6bcf\u4e2a\u6821\u9a8c\u4f4dk\uff08k = 1, 2, 4 ...\uff09\u7684\u5947\u5076\u503c\u662f\u5426\u6b63\u786e\uff08\u6bcf\u7ec4\u8fd0\u7b97\uff09\uff1b \u82e5\u6821\u9a8c\u4f4d\u5947\u5076\u503c\u4e0d\u5bf9\uff0c\u8ba1\u6570\u5668\u52a0 k\uff1b \u6700\u540e\uff0c\u82e5\u8ba1\u6570\u5668\u503c\u4e3a0\uff0c\u5219\u7801\u5b57\u6709\u6548\uff1b\u82e5\u8ba1\u6570\u5668\u503c\u4e3aj\uff0c\u5219\u7b2cj\u4f4d\u51fa\u9519\uff1b 5. \u57fa\u672c\u534f\u8bae 5.1 Utopia Simplex \u5355\u5de5 \u4e0d\u8003\u8651\u63a5\u6536\u80fd\u529b 5.2 Stop-and-wait P2 Half Duplex \u534a\u53cc\u5de5 \u63a5\u6536\u80fd\u529b\u6709\u9650\uff0c\u6709\u53ef\u80fdoverwhelming Sender\uff1a\u53d1\u4e00\u5e27\u6682\u505c\uff1b\u7b49\u5f85ACK\uff08ACK\u5e27\uff1adummy frame\uff09 Receiver\uff1a\u63a5\u6536\u540eACK 5.3 Stop-and-wait P3 \u8003\u8651\u9519\u8bef Timer\uff1a\u8d85\u65f6\u672a\u6536\u5230ACK\u91cd\u4f20 SEQ\uff1a\uff08\u6700\u5c0f\u5e8f\u53f71bit\uff09 \u53d1\u9001/\u63a5\u6536\u65b9\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u5e27\u5e8f\u53f7\uff08\u671f\u5f85\u5e27\u5e8f\u53f7\uff090 \u63a5\u6536\u65b9\u7531\u6b64\u5224\u65ad\u8fd9\u662f\u4e2a\u65b0\u5e27\u8fd8\u662f\u5e94\u8be5\u88ab\u4e22\u5f03\u7684\u91cd\u590d\u5e27 \u7f3a\u70b9\uff1a\u53ea\u80fd\u6709\u4e00\u4e2a\u6ca1\u6709\u88ab\u786e\u8ba4\u7684\u5e27\u5728\u53d1\u9001\u4e2d\uff1b\u4fe1\u9053\u5229\u7528\u7387\u5f88\u4f4e ARQ\uff1aAutomatic Repeat reQuest\uff1a\u53d1\u9001\u65b9\u5728\u524d\u79fb\u5230\u4e0b\u4e00\u4e2a\u6570\u636e \u4e4b\u524d\u5fc5\u987b\u7b49\u5f85\u4e00\u4e2a\u80af\u5b9a\u786e\u8ba4 PAR\uff1aPositive Acknowledgement with Retransmission\uff1a\u5e26\u6709\u91cd\u4f20\u7684\u80af\u5b9a\u786e\u8ba4 5.4 Sliding Window Protocol 5.4.1 Basis Window Duplex \u634e\u5e26/\u8f7d\u7b54 piggybacking \u5faa\u73af\u91cd\u590d\u4f7f\u7528\u6709\u9650\u7684\u5e27\u5e8f\u53f7 \u6d41\u91cf\u63a7\u5236:\u63a5\u6536\u7a97\u53e3\u9a71\u52a8\u53d1\u9001\u7a97\u53e3\u7684\u8f6c\u52a8 \u53d1\u9001\u7a97\u53e3\uff1a \\(W_T\\) \uff0c\u8868\u793a\u5728\u6536\u5230\u5bf9\u65b9\u786e\u8ba4\u7684\u4fe1\u606f\u4e4b\u524d\uff0c\u53ef\u4ee5\u8fde\u7eed\u53d1\u51fa\u7684\u6700\u591a\u6570\u636e\u5e27\u6570 \u5df2\u53d1\u9001\u4f46\u672a\u786e\u8ba4\u7684\u5e27\uff1b \\([low, high]\\) \uff1b \u53d1\u9001\u4e00\u4e2a\u5e27\uff0chigh++ \u63a5\u6536\u5230\u4e00\u4e2a\u5e27\u7684ACK\uff1alow=\u88ab\u786e\u8ba4\u7684\u5e27\u7684\u5e8f\u53f7+1 \u63a5\u6536\u7a97\u53e3\uff1a \\(W_R\\) \uff0c\u4e3a\u53ef\u4ee5\u8fde\u7eed\u63a5\u6536\u7684\u6700\u591a\u6570\u636e\u5e27\u6570\uff08\u4e0d\u7ed9\u4e0a\u5c42\u63d0\u4ea4\uff09 high\uff1a\u5141\u8bb8\u63a5\u6536\u7684\u6700\u5927\u5e8f\u53f7\uff1blow\uff1a\u5e0c\u671b\u6536\u7684\u6700\u5c0f\u5e8f\u53f7\uff1b\u7a97\u53e3\u5916\u7684\u4e22\u5f03 \u7d2f\u8ba1\u786e\u8ba4\uff1a\u5bf9\u6309\u5e8f\u5230\u8fbe\u7684\u6700\u540e\u4e00\u4e2a\u5206\u7ec4\u53d1\u9001\u786e\u8ba4 \u94fe\u8def\u5229\u7528\u7387 \\(\\leq {w \\over 1+2BD}\\) \uff1b \\(BD = { bandwidth \\cdot delay \\over bit~ size~ of~ frame }\\) 5.4.2 1-bit SWP P4 \\(W_T = W_R = 1\\) \u6548\u7387\u4f4e 5.4.3 GBN P5 \\(W_R = 1, W_T \\leq 2^n - 1\\) \uff08\u5e8f\u53f7\u7a7a\u95f4-1\uff09 \u63a5\u6536\uff1a\u6536\u5230\u4e00\u4e2a\u51fa\u9519\u5e27\u6216\u4e71\u5e8f\u5e27\u65f6\uff0c\u4e22\u5f03\u6240\u6709\u7684\u540e\u7ee7\u5e27\uff0c\u5e76\u4e14\u4e0d\u4e3a\u8fd9\u4e9b\u5e27\u53d1\u9001\u786e\u8ba4\uff08\u6216\u53cd\u5411\u786e\u8ba4NACK\uff09 \u53d1\u9001\uff1a\u8d85\u65f6\u540e\uff0c\u91cd\u4f20\u6240\u6709\u672a\u88ab\u786e\u8ba4\u7684\u5e27 5.4.4 SR P6 \\(W_R > 1, W_T \\leq 2^{n - 1}\\) \u6bcf\u4e2aPDU\u4e00\u4e2aTimer 6. \u6570\u636e\u94fe\u8def\u534f\u8bae\u5b9e\u4f8b 6.1 PPP (Point-to-Point Protocol) 6.1.1 \u6210\u5e27 Address\u5b57\u6bb5\uff1a\u8fd9\u4e2a\u5b57\u6bb5\u603b\u662f\u88ab\u8bbe\u7f6e\u4e3a\u4e8c\u8fdb\u5236\u503c 11111111\uff0c\u8868\u793a\u6240\u6709\u7ad9\u70b9\u90fd\u5e94\u8be5\u63a5\u53d7\u8be5\u5e27 Control\uff1a\u9ed8\u8ba4\u503c\u662f00000011\uff0c\u6b64\u503c\u8868\u793a\u4e00\u4e2a\u65e0\u7f16\u53f7\u5e27\u3002\uff08Internet\u51e0\u4e4e\u90fd\u662f\u91c7\u7528\u4e00\u79cd\u201c\u65e0\u7f16\u53f7\u6a21\u5f0f\u201d\u6765\u63d0\u4f9b\u65e0\u8fde\u63a5\u65e0\u786e\u8ba4\u7684\u670d\u52a1\u3002\uff09 Address \u548c Control \u603b\u662f\u53d6\u9ed8\u8ba4\u914d\u7f6e\u7684\u5e38\u6570\uff0c\u56e0\u6b64 LCP \u63d0\u4f9b\u4e86\u67d0\u79cd\u5fc5\u8981\u7684\u673a\u5236\uff0c\u5141\u8bb8\u901a\u4fe1\u53cc\u65b9\u5c31\u662f\u5426\u7701\u7565\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u8fdb\u884c\u534f\u5546\uff0c\u53bb\u6389\u7684\u8bdd\u53ef\u4ee5\u4e3a\u6bcf\u5e27\u8282\u7701 2 \u4e2a\u5b57\u8282\u7684 \u7a7a\u95f4\u3002 \u5b57\u8282\u586b\u5145\uff1a Sender\uff1a0x7E\u5f00\u59cb\uff1bPayload\u4e2d\u51fa\u73b00x7E\uff0c\u5219\u7528\u8f6c\u4e49\u5b57\u8282 0x7D \u53bb\u586b\u5145\uff0c\u7136\u540e\u5c06\u7d27\u8ddf\u7684\u90a3\u4e2a\u5b57\u8282\u4e0e 0x20 \u8fdb\u884c XOR \u64cd\u4f5c\uff0c\u5982\u6b64\u8f6c\u4e49\u4f7f\u5f97\u7b2c 6 \u4f4d\uff08\u7b2c6\u4f4e\u7684\u4f4d\uff09\u6bd4\u7279\u53cd\u8f6c\u3002 Receiver\uff1a\u626b\u63cf\u641c\u7d22 0x7D\uff0c\u53d1\u73b0\u540e\u7acb\u5373\u5220\u9664\uff1b\u7136\u540e\u7528 0x20 \u5bf9\u7d27\u8ddf\u5728\u540e\u9762\u7684\u90a3\u4e2a\u5b57\u8282\u8fdb\u884c XOR \u64cd\u4f5c \u4e24\u4e2a\u5e27\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u4e2a\u6807\u5fd7\u5b57\u8282 6.2 PPPoE (Point-to-Point Protocol over Ethernet) 6.2.1 \u76ee\u7684 \u63d0\u4f9bEthernet\u4e0a\u7684PPP\u94fe\u63a5 \u5b9e\u73b0\u8eab\u4efd\u9a8c\u8bc1\u3001\u52a0\u5bc6\u3001\u538b\u7f29 \u5b9e\u73b0\u8bbf\u95ee\u63a7\u5236\u3001\u8ba1\u8d39\u3001\u4e1a\u52a1\u7c7b\u578b\u5206\u7c7b\uff0c\u8fd0\u8425\u5546\u5e7f\u6cdb\u652f\u6301 6.2.2 \u72b6\u6001\u8f6c\u79fb \u4e00\u5f00\u59cbDEAD\uff0c\u4e0d\u5b58\u5728\u7269\u7406\u5c42\u8fde\u63a5\uff1b \u7269\u7406\u5c42\u8fde\u63a5\u5efa\u7acb\uff0c\u8f6c\u79fb\u5230ESTABLISH\uff1b\u4ea4\u6362LCP\u62a5\u6587\u8fdb\u884cPPP\u9009\u9879\u534f\u5546\uff1b \u534f\u5546\u6210\u529f\uff0c\u8fdb\u5165AUTHENTICATE\uff1b\u6210\u529f\uff0c\u5219\u8fdb\u5165NETWORK\uff0c\u7136\u540e\u53d1NCP\u914d\u7f6e\u7f51\u7edc\u5c42\u53c2\u6570\uff08e.g. For IP Protocol, assign IP Address\uff09\uff1b \u8fdb\u5165OPEN\uff0c\u6570\u636e\u4f20\u8f93\uff1b\u5b8c\u6210\u4f20\u8f93\uff0c\u8fdb\u5165TERMINATE\uff1b\u5f53\u7269\u7406\u5c42\u8fde\u63a5\u88ab\u820d\u5f03\u540e\u56de\u5230 DEAD \u72b6\u6001\u3002","title":"6 Data Link Layer"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#6-data-link-layer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"6 Data Link Layer"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#1","text":"(1) \u65e0\u786e\u8ba4\u7684\u65e0\u8fde\u63a5\u670d\u52a1\uff1a\u4e8b\u5148\u4e0d\u5efa\u7acb\u903b\u8f91\u8fde\u63a5\uff1b\u51fa\u9519\u4e0d\u68c0\u6d4b\u4e0d\u6062\u590d\u3002e.g. \u4ee5\u592a\u7f51 (2) \u6709\u786e\u8ba4\u7684\u65e0\u8fde\u63a5\u670d\u52a1\uff1a\u53d1\u9001\u7684\u6bcf\u4e00\u5e27\u63a5\u5230\u540e\u5355\u72ec\u786e\u8ba4\uff1be.g. 802.11 (WiFi) (3) \u6709\u786e\u8ba4\u7684 \u6709\u8fde\u63a5 \u670d\u52a1\uff1a \u5efa\u7acb\u8fde\u63a5 \u6bcf\u4e00\u5e27\u7f16\u53f7\uff1b\u786e\u4fdd\u6070\u597d\u6536\u5230\u4e00\u6b21\uff1b \u9002\u7528\u4e8e\uff1a\u957f\u8ddd\u79bb\u4e0d\u53ef\u9760\uff1be.g. \u536b\u661f\uff1b\uff08\u53ef\u4ee5\u60f3\u8c61\u4e22\u5931\u4e86\u786e\u8ba4\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e2a\u5e27\u88ab\u6536\u53d1\u591a\u6b21\uff0c\u56e0\u800c\u5c06\u6d6a\u8d39\u5e26\u5bbd\u3002\uff09 \u4e09\u4e2a\u9636\u6bb5\uff1a \u5efa\u7acb\u8fde\u63a5\uff1a\u521d\u59cb\u5316\u53d8\u91cf\u3001\u8ba1\u6570\u5668 \u4f20\u8f93\u6570\u636e\u5e27 \u91ca\u653e\u8fde\u63a5\uff1a\u91ca\u653e\u53d8\u91cf\u3001\u7f13\u51b2\u533a\u7b49\u8d44\u6e90","title":"1. \u5411\u7f51\u7edc\u5c42\u63d0\u4f9b\u7684\u670d\u52a1"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#2","text":"\u68c0\u9519\u3001\u7ea0\u9519\uff1b\u62c6\u5206\u6bd4\u7279\u6d41\u4ee5\u6210\u5e27","title":"2. \u6210\u5e27"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#21","text":"\u7528\u5934\u90e8\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u6765\u6807\u8bc6\u8be5\u5e27\u4e2d\u7684\u5b57\u7b26\u6570\uff08\u540e\u9762\u8ddf\u7740\u7684\u5e27\u7684\u5b57\u7b26\u6570\uff09 \u8ba1\u6570\u503c\u6709\u53ef\u80fd\u56e0\u4e3a\u4e00\u4e2a\u4f20\u8f93\u9519\u8bef\u800c\u88ab\u5f04\u6df7","title":"2.1 \u5b57\u8282\u8ba1\u6570\u6cd5"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#22","text":"\u6bcf\u4e2a\u5e27\u7528\u6807\u5fd7\u5b57\u8282\uff08flag byte\uff09\u4f5c\u4e3a\u5f00\u59cb\u548c\u7ed3\u675f \u89e3\u51b3\u6570\u636e\u4e2d\u51fa\u73b0FLAG\uff1aESC\u8f6c\u4e49\u5b57\u8282 \u6570\u636e\u4e2d\u51fa\u73b0ESC\uff1a\u4ecd\u7136\u7528ESC\u8f6c\u4e49\uff1b \u5728\u63a5\u6536\u65b9\uff0c\u7b2c\u4e00\u4e2a\u8f6c\u4e49\u5b57\u8282ESC\u88ab\u5220\u9664\uff0c\u800c\u7559\u4e0b\u7d27\u8ddf\u5728\u5b83\u540e\u9762\u7684\u4e00\u4e2a\u6570\u636e\u5b57\u8282 \u7f3a\u70b9\uff1a\u53ea\u80fd\u4f7f\u7528 8 \u6bd4\u7279\u7684\u5b57\u8282\uff1b\u5e27\u53ea\u80fd\u4ee58\u5b57\u8282\u4e3a\u5355\u5143","title":"2.2 \u5b57\u8282\u586b\u5145\u7684\u6807\u5fd7\u5b57\u8282\u6cd5"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#23","text":"\u5e27\u7684\u5212\u5206\u53ef\u4ee5\u5728\u6bd4\u7279\u7ea7\u5b8c\u6210 \u6bcf\u4e2a\u5e27\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u662f\u6807\u5fd7\u5b57\u8282\uff1a01111110\uff08Ox7E\uff09 \u6bcf\u5f53\u53d1\u9001\u65b9\u5728\u6570\u636e\u4e2d\u9047\u5230\u8fde\u7eed\u4e94\u4e2a1\uff0c\u5b83\u4fbf\u81ea\u52a8\u5728\u8f93\u51fa\u7684\u6bd4\u7279\u6d41\u4e2d\u586b\u5165\u4e00\u4e2a\u6bd4\u72790\u3002 \u5f53\u63a5\u6536\u65b9\u770b\u5230 5 \u4e2a\u8fde\u7eed\u6bd4\u7279 1 \uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u6bd4\u72790\uff0c\u5b83\u5c31\u81ea\u52a8\u5254\u9664\uff08\u5373\u5220\u9664\uff09\u6bd4\u7279 0 \u3002 \u7f3a\u70b9\uff1a\u5982\u679c\u6570\u636e\u4e2d\u6807\u5fd7\u5b57\u8282\u592a\u591a\uff0c\u5219\u5e27\u7684\u957f\u5ea6\u5927\u5e45\u589e\u52a0\u3002","title":"2.3 \u6bd4\u7279\u586b\u5145\u7684\u6807\u5fd7\u6bd4\u7279\u6cd5"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#24","text":"\u6838\u5fc3\u601d\u60f3:\u9009\u62e9\u7684\u5b9a\u754c\u7b26\u4e0d\u4f1a\u5728\u6570\u636e\u90e8\u5206\u51fa\u73b0 4B/5B\u7f16\u7801\u65b9\u6848\uff1a 4\u6bd4\u7279\u6570\u636e\u6620\u5c04\u62105\u6bd4\u7279\u7f16\u7801\uff0c\u5269\u4f59\u7684\u4e00\u534a\u7801\u5b57(16\u4e2a\u7801\u5b57)\u672a\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528\u505a\u5e27\u5b9a\u754c\u7b26 \u4f8b\u5982: 00110\u7ec4\u5408\u4e0d\u5305\u542b\u57284B/5B\u7f16\u7801\u4e2d\uff0c\u53ef\u505a\u5e27\u5b9a\u754c\u7b26","title":"2.4 \u7269\u7406\u5c42\u7f16\u7801\u8fdd\u7981\u6cd5"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#3","text":"","title":"3. \u68c0\u9519"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#31","text":"\u589e\u52a01\u4f4d\u6821\u9a8c\u4f4d\uff0c\u53ef\u4ee5\u68c0\u67e5\u5947\u6570\u4e2a\u4f4d\u9519\u8bef \u5076\u6821\u9a8c\uff1a\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e3a\u5076\u6570\u4e2a \u5947\u6821\u9a8c\uff1a\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e3a\u5947\u6570\u4e2a","title":"3.1 \u5947\u5076\u6821\u9a8c"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#32-checksum","text":"","title":"3.2 Checksum \u6821\u9a8c\u548c"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#33-crc","text":"","title":"3.3 CRC \u5faa\u73af\u5197\u4f59\u6821\u9a8c"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#4","text":"Codeword\uff1an\u4f4d\u7801\u5b57\uff0cm\u4e2a\u6d88\u606f\u4f4d\u548cr\u4e2a\u6821\u9a8c\u4f4d\uff0c \\(n = m + r\\) \u3002 Hamming distance\uff1a\u4e24\u4e2a\u7801\u5b57\u4e2d\u4e0d\u76f8\u540c\u7684\u4f4d\u7684\u4e2a\u6570 \u539f\u7406\uff1a\u7a7a\u95f4\u7a00\u758f\uff1a\u5bf9 r \u6821\u9a8c\u4f4d\uff0c\u53ef\u80fd\u7684\u62a5\u6587\u4e2d\u53ea\u6709\u5f88\u5c11\u4e00\u90e8\u5206\uff08 \\(1/2^r\\) \uff09\u662f\u5408\u6cd5\u7684\u3002 Hamming distance\u4e3ad\u7684\u7f16\u7801\u65b9\u6848\uff1a\u6700\u77ed\u7684\u4e24\u4e2a\u5408\u6cd5\u7684\u7f16\u7801\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3ad \u4e3a\u4e86\u68c0\u67e5\u51fad\u4e2a\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d77\u660e\u8ddd\u79bb\u4e3a d+1 \u7684\u7f16\u7801 \u4e3a\u4e86\u7ea0\u6b63d\u4e2a\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d77\u660e\u8ddd\u79bb\u4e3a 2d+1 \u7684\u7f16\u7801 \u5408\u6cd5\u7801\u5b57\u4e4b\u95f4\u7684\u8ddd\u79bb\u8db3\u591f\u8fdc\uff0c\u5373\u4f7f\u53d1\u751f\u4e86 d \u4f4d\u53d8\u5316\uff0c\u7ed3\u679c\u4e5f\u8fd8\u662f\u79bb\u5b83\u539f\u6765\u7684\u7801\u5b57\u6700\u8fd1\u3002\u8fd9\u610f\u5473\u7740\u5728\u4e0d\u592a\u53ef\u80fd\u6709\u66f4\u591a\u9519\u8bef\u7684\u5047\u8bbe\u4e0b\uff0c\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u539f\u6765\u7684\u7801\u5b57\u3002 \u8bbe\u8ba1\u7ea0\u9519\u7801\u7684\u8981\u6c42\uff1a m\u4e2a\u4fe1\u606f\u4f4d\uff0cr\u4e2a\u6821\u9a8c\u4f4d\uff0cn=m+r\u4f4d\u7801\u5b57\uff1b\u6700\u591a\u9519d\u4f4d\u3002 \u6709\u6548\u4fe1\u606f\uff1a \\(2^m\\) \u4e2a\uff1b \u6bcf\u4e00\u4e2an\u4f4d\u7ea0\u9519\u7801\uff0c\u5305\u62ec\u6b63\u786e\u7684\uff0c\u5b9e\u9645\u4e2d\u53ef\u80fd\u4f1a\u56e0\u4e3a\u51fa\u9519\u53d8\u6210 \\(\\Sigma_{k = 0}^d\\C_n^k\\) \u79cd\u5f62\u5f0f\u3002 \u4fdd\u8bc1n\u4f4d\u7ea0\u9519\u7801\u80fd\u591f\u8868\u793a\u4e0a\u8ff0\u6240\u6709\u4e0d\u540c\u7684\u7801\u5b57\uff1a \\(2^m \\cdot \\Sigma_{k = 0}^d\\C_n^k \\leq 2^n\\) \u3002 \u7531\u4e0a\u5f0f\u53ef\u89e3\u51fa\u7ea0\u9519\u6240\u9700\u7684\u6821\u9a8c\u4f4d\u7684\u4e2a\u6570\u7684 \u4e0b\u754c \u3002","title":"4. \u7ea0\u9519"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#41-hamming-code","text":"","title":"4.1 Hamming Code"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#411","text":"\u7f3a\u7701\u4e3a\u5076\u6821\u9a8c","title":"4.1.1 \u7f16\u7801"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#412","text":"\u7ec41\u30012\u5171\u540c\u5b9a\u4f4d\u5217 \u7ec43\u30014\u5171\u540c\u5b9a\u4f4d\u884c \u6574\u4e2a\u8fc7\u7a0b\uff1a \u6bcf\u4e2a\u7801\u5b57\u5230\u6765\u524d\uff0c\u63a5\u6536\u65b9\u8ba1\u6570\u5668\u6e05\u96f6\uff1b \u63a5\u6536\u65b9\u68c0\u67e5\u6bcf\u4e2a\u6821\u9a8c\u4f4dk\uff08k = 1, 2, 4 ...\uff09\u7684\u5947\u5076\u503c\u662f\u5426\u6b63\u786e\uff08\u6bcf\u7ec4\u8fd0\u7b97\uff09\uff1b \u82e5\u6821\u9a8c\u4f4d\u5947\u5076\u503c\u4e0d\u5bf9\uff0c\u8ba1\u6570\u5668\u52a0 k\uff1b \u6700\u540e\uff0c\u82e5\u8ba1\u6570\u5668\u503c\u4e3a0\uff0c\u5219\u7801\u5b57\u6709\u6548\uff1b\u82e5\u8ba1\u6570\u5668\u503c\u4e3aj\uff0c\u5219\u7b2cj\u4f4d\u51fa\u9519\uff1b","title":"4.1.2 \u7ea0\u9519"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#5","text":"","title":"5. \u57fa\u672c\u534f\u8bae"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#51-utopia","text":"Simplex \u5355\u5de5 \u4e0d\u8003\u8651\u63a5\u6536\u80fd\u529b","title":"5.1 Utopia"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#52-stop-and-wait-p2","text":"Half Duplex \u534a\u53cc\u5de5 \u63a5\u6536\u80fd\u529b\u6709\u9650\uff0c\u6709\u53ef\u80fdoverwhelming Sender\uff1a\u53d1\u4e00\u5e27\u6682\u505c\uff1b\u7b49\u5f85ACK\uff08ACK\u5e27\uff1adummy frame\uff09 Receiver\uff1a\u63a5\u6536\u540eACK","title":"5.2 Stop-and-wait P2"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#53-stop-and-wait-p3","text":"\u8003\u8651\u9519\u8bef Timer\uff1a\u8d85\u65f6\u672a\u6536\u5230ACK\u91cd\u4f20 SEQ\uff1a\uff08\u6700\u5c0f\u5e8f\u53f71bit\uff09 \u53d1\u9001/\u63a5\u6536\u65b9\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u5e27\u5e8f\u53f7\uff08\u671f\u5f85\u5e27\u5e8f\u53f7\uff090 \u63a5\u6536\u65b9\u7531\u6b64\u5224\u65ad\u8fd9\u662f\u4e2a\u65b0\u5e27\u8fd8\u662f\u5e94\u8be5\u88ab\u4e22\u5f03\u7684\u91cd\u590d\u5e27 \u7f3a\u70b9\uff1a\u53ea\u80fd\u6709\u4e00\u4e2a\u6ca1\u6709\u88ab\u786e\u8ba4\u7684\u5e27\u5728\u53d1\u9001\u4e2d\uff1b\u4fe1\u9053\u5229\u7528\u7387\u5f88\u4f4e ARQ\uff1aAutomatic Repeat reQuest\uff1a\u53d1\u9001\u65b9\u5728\u524d\u79fb\u5230\u4e0b\u4e00\u4e2a\u6570\u636e \u4e4b\u524d\u5fc5\u987b\u7b49\u5f85\u4e00\u4e2a\u80af\u5b9a\u786e\u8ba4 PAR\uff1aPositive Acknowledgement with Retransmission\uff1a\u5e26\u6709\u91cd\u4f20\u7684\u80af\u5b9a\u786e\u8ba4","title":"5.3 Stop-and-wait P3"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#54-sliding-window-protocol","text":"","title":"5.4 Sliding Window Protocol"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#541-basis","text":"Window Duplex \u634e\u5e26/\u8f7d\u7b54 piggybacking \u5faa\u73af\u91cd\u590d\u4f7f\u7528\u6709\u9650\u7684\u5e27\u5e8f\u53f7 \u6d41\u91cf\u63a7\u5236:\u63a5\u6536\u7a97\u53e3\u9a71\u52a8\u53d1\u9001\u7a97\u53e3\u7684\u8f6c\u52a8 \u53d1\u9001\u7a97\u53e3\uff1a \\(W_T\\) \uff0c\u8868\u793a\u5728\u6536\u5230\u5bf9\u65b9\u786e\u8ba4\u7684\u4fe1\u606f\u4e4b\u524d\uff0c\u53ef\u4ee5\u8fde\u7eed\u53d1\u51fa\u7684\u6700\u591a\u6570\u636e\u5e27\u6570 \u5df2\u53d1\u9001\u4f46\u672a\u786e\u8ba4\u7684\u5e27\uff1b \\([low, high]\\) \uff1b \u53d1\u9001\u4e00\u4e2a\u5e27\uff0chigh++ \u63a5\u6536\u5230\u4e00\u4e2a\u5e27\u7684ACK\uff1alow=\u88ab\u786e\u8ba4\u7684\u5e27\u7684\u5e8f\u53f7+1 \u63a5\u6536\u7a97\u53e3\uff1a \\(W_R\\) \uff0c\u4e3a\u53ef\u4ee5\u8fde\u7eed\u63a5\u6536\u7684\u6700\u591a\u6570\u636e\u5e27\u6570\uff08\u4e0d\u7ed9\u4e0a\u5c42\u63d0\u4ea4\uff09 high\uff1a\u5141\u8bb8\u63a5\u6536\u7684\u6700\u5927\u5e8f\u53f7\uff1blow\uff1a\u5e0c\u671b\u6536\u7684\u6700\u5c0f\u5e8f\u53f7\uff1b\u7a97\u53e3\u5916\u7684\u4e22\u5f03 \u7d2f\u8ba1\u786e\u8ba4\uff1a\u5bf9\u6309\u5e8f\u5230\u8fbe\u7684\u6700\u540e\u4e00\u4e2a\u5206\u7ec4\u53d1\u9001\u786e\u8ba4 \u94fe\u8def\u5229\u7528\u7387 \\(\\leq {w \\over 1+2BD}\\) \uff1b \\(BD = { bandwidth \\cdot delay \\over bit~ size~ of~ frame }\\)","title":"5.4.1 Basis"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#542-1-bit-swp-p4","text":"\\(W_T = W_R = 1\\) \u6548\u7387\u4f4e","title":"5.4.2 1-bit SWP P4"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#543-gbn-p5","text":"\\(W_R = 1, W_T \\leq 2^n - 1\\) \uff08\u5e8f\u53f7\u7a7a\u95f4-1\uff09 \u63a5\u6536\uff1a\u6536\u5230\u4e00\u4e2a\u51fa\u9519\u5e27\u6216\u4e71\u5e8f\u5e27\u65f6\uff0c\u4e22\u5f03\u6240\u6709\u7684\u540e\u7ee7\u5e27\uff0c\u5e76\u4e14\u4e0d\u4e3a\u8fd9\u4e9b\u5e27\u53d1\u9001\u786e\u8ba4\uff08\u6216\u53cd\u5411\u786e\u8ba4NACK\uff09 \u53d1\u9001\uff1a\u8d85\u65f6\u540e\uff0c\u91cd\u4f20\u6240\u6709\u672a\u88ab\u786e\u8ba4\u7684\u5e27","title":"5.4.3 GBN P5"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#544-sr-p6","text":"\\(W_R > 1, W_T \\leq 2^{n - 1}\\) \u6bcf\u4e2aPDU\u4e00\u4e2aTimer","title":"5.4.4 SR P6"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#6","text":"","title":"6. \u6570\u636e\u94fe\u8def\u534f\u8bae\u5b9e\u4f8b"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#61-ppp-point-to-point-protocol","text":"","title":"6.1 PPP (Point-to-Point Protocol)"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#611","text":"Address\u5b57\u6bb5\uff1a\u8fd9\u4e2a\u5b57\u6bb5\u603b\u662f\u88ab\u8bbe\u7f6e\u4e3a\u4e8c\u8fdb\u5236\u503c 11111111\uff0c\u8868\u793a\u6240\u6709\u7ad9\u70b9\u90fd\u5e94\u8be5\u63a5\u53d7\u8be5\u5e27 Control\uff1a\u9ed8\u8ba4\u503c\u662f00000011\uff0c\u6b64\u503c\u8868\u793a\u4e00\u4e2a\u65e0\u7f16\u53f7\u5e27\u3002\uff08Internet\u51e0\u4e4e\u90fd\u662f\u91c7\u7528\u4e00\u79cd\u201c\u65e0\u7f16\u53f7\u6a21\u5f0f\u201d\u6765\u63d0\u4f9b\u65e0\u8fde\u63a5\u65e0\u786e\u8ba4\u7684\u670d\u52a1\u3002\uff09 Address \u548c Control \u603b\u662f\u53d6\u9ed8\u8ba4\u914d\u7f6e\u7684\u5e38\u6570\uff0c\u56e0\u6b64 LCP \u63d0\u4f9b\u4e86\u67d0\u79cd\u5fc5\u8981\u7684\u673a\u5236\uff0c\u5141\u8bb8\u901a\u4fe1\u53cc\u65b9\u5c31\u662f\u5426\u7701\u7565\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u8fdb\u884c\u534f\u5546\uff0c\u53bb\u6389\u7684\u8bdd\u53ef\u4ee5\u4e3a\u6bcf\u5e27\u8282\u7701 2 \u4e2a\u5b57\u8282\u7684 \u7a7a\u95f4\u3002 \u5b57\u8282\u586b\u5145\uff1a Sender\uff1a0x7E\u5f00\u59cb\uff1bPayload\u4e2d\u51fa\u73b00x7E\uff0c\u5219\u7528\u8f6c\u4e49\u5b57\u8282 0x7D \u53bb\u586b\u5145\uff0c\u7136\u540e\u5c06\u7d27\u8ddf\u7684\u90a3\u4e2a\u5b57\u8282\u4e0e 0x20 \u8fdb\u884c XOR \u64cd\u4f5c\uff0c\u5982\u6b64\u8f6c\u4e49\u4f7f\u5f97\u7b2c 6 \u4f4d\uff08\u7b2c6\u4f4e\u7684\u4f4d\uff09\u6bd4\u7279\u53cd\u8f6c\u3002 Receiver\uff1a\u626b\u63cf\u641c\u7d22 0x7D\uff0c\u53d1\u73b0\u540e\u7acb\u5373\u5220\u9664\uff1b\u7136\u540e\u7528 0x20 \u5bf9\u7d27\u8ddf\u5728\u540e\u9762\u7684\u90a3\u4e2a\u5b57\u8282\u8fdb\u884c XOR \u64cd\u4f5c \u4e24\u4e2a\u5e27\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u4e2a\u6807\u5fd7\u5b57\u8282","title":"6.1.1 \u6210\u5e27"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#62-pppoe-point-to-point-protocol-over-ethernet","text":"","title":"6.2 PPPoE (Point-to-Point Protocol over Ethernet)"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#621","text":"\u63d0\u4f9bEthernet\u4e0a\u7684PPP\u94fe\u63a5 \u5b9e\u73b0\u8eab\u4efd\u9a8c\u8bc1\u3001\u52a0\u5bc6\u3001\u538b\u7f29 \u5b9e\u73b0\u8bbf\u95ee\u63a7\u5236\u3001\u8ba1\u8d39\u3001\u4e1a\u52a1\u7c7b\u578b\u5206\u7c7b\uff0c\u8fd0\u8425\u5546\u5e7f\u6cdb\u652f\u6301","title":"6.2.1 \u76ee\u7684"},{"location":"Computer%20Network/6-Data%20Link%20Layer/#622","text":"\u4e00\u5f00\u59cbDEAD\uff0c\u4e0d\u5b58\u5728\u7269\u7406\u5c42\u8fde\u63a5\uff1b \u7269\u7406\u5c42\u8fde\u63a5\u5efa\u7acb\uff0c\u8f6c\u79fb\u5230ESTABLISH\uff1b\u4ea4\u6362LCP\u62a5\u6587\u8fdb\u884cPPP\u9009\u9879\u534f\u5546\uff1b \u534f\u5546\u6210\u529f\uff0c\u8fdb\u5165AUTHENTICATE\uff1b\u6210\u529f\uff0c\u5219\u8fdb\u5165NETWORK\uff0c\u7136\u540e\u53d1NCP\u914d\u7f6e\u7f51\u7edc\u5c42\u53c2\u6570\uff08e.g. For IP Protocol, assign IP Address\uff09\uff1b \u8fdb\u5165OPEN\uff0c\u6570\u636e\u4f20\u8f93\uff1b\u5b8c\u6210\u4f20\u8f93\uff0c\u8fdb\u5165TERMINATE\uff1b\u5f53\u7269\u7406\u5c42\u8fde\u63a5\u88ab\u820d\u5f03\u540e\u56de\u5230 DEAD \u72b6\u6001\u3002","title":"6.2.2 \u72b6\u6001\u8f6c\u79fb"},{"location":"Deep%20RL/Policy%20Gradient/","text":"Policy Gradient Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Definitions Given an actor \\(\\pi_\\theta(s)\\) with network parameter \\(\\theta\\) Use the actor to play the game to gain rewards Due to the randomness in the environment, even with the same actor, total reward is different each time \\(R_\\theta\\) : total rewards \\(\\overline{R_\\theta}\\) : expected value of total rewards; evaluates the goodness of an actor 2. Formulation of Average Reward We use sampling to estimate average reward: 3. Optimization: Gradient Ascent We need to optimize \\(\\theta\\) to get an optimal reward: Actually, gradient of \\(R\\) to \\(\\theta\\) is only related to: In the trajectory, (s, a) -> (r, s') Finally, Because So 4. Summary 5. Tips 5.1 Baseline Use average value as baseline. 5.2 Assign Suitable Credit It's not very fair to assign the same credit to all of the actions in a trajectory. Optimizations: Suffix sum of rewards Discount factor 5.3 Estimate by Network We can use advantage function to represent \\(R(\\tau^n) - b\\) , which can be estimated by a network!","title":"Policy Gradient"},{"location":"Deep%20RL/Policy%20Gradient/#policy-gradient","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Policy Gradient"},{"location":"Deep%20RL/Policy%20Gradient/#1-definitions","text":"Given an actor \\(\\pi_\\theta(s)\\) with network parameter \\(\\theta\\) Use the actor to play the game to gain rewards Due to the randomness in the environment, even with the same actor, total reward is different each time \\(R_\\theta\\) : total rewards \\(\\overline{R_\\theta}\\) : expected value of total rewards; evaluates the goodness of an actor","title":"1. Definitions"},{"location":"Deep%20RL/Policy%20Gradient/#2-formulation-of-average-reward","text":"We use sampling to estimate average reward:","title":"2. Formulation of Average Reward"},{"location":"Deep%20RL/Policy%20Gradient/#3-optimization-gradient-ascent","text":"We need to optimize \\(\\theta\\) to get an optimal reward: Actually, gradient of \\(R\\) to \\(\\theta\\) is only related to: In the trajectory, (s, a) -> (r, s') Finally, Because So","title":"3. Optimization: Gradient Ascent"},{"location":"Deep%20RL/Policy%20Gradient/#4-summary","text":"","title":"4. Summary"},{"location":"Deep%20RL/Policy%20Gradient/#5-tips","text":"","title":"5. Tips"},{"location":"Deep%20RL/Policy%20Gradient/#51-baseline","text":"Use average value as baseline.","title":"5.1 Baseline"},{"location":"Deep%20RL/Policy%20Gradient/#52-assign-suitable-credit","text":"It's not very fair to assign the same credit to all of the actions in a trajectory. Optimizations: Suffix sum of rewards Discount factor","title":"5.2 Assign Suitable Credit"},{"location":"Deep%20RL/Policy%20Gradient/#53-estimate-by-network","text":"We can use advantage function to represent \\(R(\\tau^n) - b\\) , which can be estimated by a network!","title":"5.3 Estimate by Network"},{"location":"Jupyter/jupyter/","text":"Jupyter 1. Jupyter Lab 2. Jupyter Notebook nohup jupyter notebook --no-browser --port = 8888 --ip = localhost &","title":"Jupyter"},{"location":"Jupyter/jupyter/#jupyter","text":"","title":"Jupyter"},{"location":"Jupyter/jupyter/#1-jupyter-lab","text":"","title":"1. Jupyter Lab"},{"location":"Jupyter/jupyter/#2-jupyter-notebook","text":"nohup jupyter notebook --no-browser --port = 8888 --ip = localhost &","title":"2. Jupyter Notebook"},{"location":"Machine%20Learning/Attention/","text":"Self-Attention Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Objective: 1. Structure 1.1 Attention score Compute attention score \\(\\alpha\\) : query, key and value use query to perform a query, i.e. query multiplies each of the key of others, to produce a weight parameter \\(\\alpha\\) which is then used to \"weigh\" the values . 1.2 Extract info 1.3 Presented by Matrix multiplication (From input I to output O.) 2. Multi-head Self-attention Concept: different types of relevance. 2.1 Positional Encoding Add a vector to each input embedding, which helps the model to: determine the position of each word determine the distance between different words in the sequence 3. Relationship with Other models 3.1 CNN CNN is a subset of self-attention. So we can select the better one according to the size of dataset ! 3.2 RNN Self-attention can replace RNN nowadays due to its advantages: RNN(LSTM) cannot remember effectively when the sequence is relatively long. However, self-attention builds connections between every input vectors. Though self-attention seems more computational expensive, it is parallel! So actually it is faster than RNN (which is not parallel) with GPUs. 3.3 GNN 3.4 More","title":"Self-Attention"},{"location":"Machine%20Learning/Attention/#self-attention","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Objective:","title":"Self-Attention"},{"location":"Machine%20Learning/Attention/#1-structure","text":"","title":"1. Structure"},{"location":"Machine%20Learning/Attention/#11-attention-score","text":"Compute attention score \\(\\alpha\\) : query, key and value use query to perform a query, i.e. query multiplies each of the key of others, to produce a weight parameter \\(\\alpha\\) which is then used to \"weigh\" the values .","title":"1.1 Attention score"},{"location":"Machine%20Learning/Attention/#12-extract-info","text":"","title":"1.2 Extract info"},{"location":"Machine%20Learning/Attention/#13-presented-by-matrix-multiplication","text":"(From input I to output O.)","title":"1.3 Presented by Matrix multiplication"},{"location":"Machine%20Learning/Attention/#2-multi-head-self-attention","text":"Concept: different types of relevance.","title":"2. Multi-head Self-attention"},{"location":"Machine%20Learning/Attention/#21-positional-encoding","text":"Add a vector to each input embedding, which helps the model to: determine the position of each word determine the distance between different words in the sequence","title":"2.1 Positional Encoding"},{"location":"Machine%20Learning/Attention/#3-relationship-with-other-models","text":"","title":"3. Relationship with Other models"},{"location":"Machine%20Learning/Attention/#31-cnn","text":"CNN is a subset of self-attention. So we can select the better one according to the size of dataset !","title":"3.1 CNN"},{"location":"Machine%20Learning/Attention/#32-rnn","text":"Self-attention can replace RNN nowadays due to its advantages: RNN(LSTM) cannot remember effectively when the sequence is relatively long. However, self-attention builds connections between every input vectors. Though self-attention seems more computational expensive, it is parallel! So actually it is faster than RNN (which is not parallel) with GPUs.","title":"3.2 RNN"},{"location":"Machine%20Learning/Attention/#33-gnn","text":"","title":"3.3 GNN"},{"location":"Machine%20Learning/Attention/#34-more","text":"","title":"3.4 More"},{"location":"Machine%20Learning/Auto-encoder/","text":"Auto-encoder Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Overall 2. Feature Disentangle Application: Voice Conversion 3. Discrete Latent Representation The discrete, finite options in the middle represent basic features . If we use other forms rather than vectors in the middle, we can get some human readable summaries! Use a discriminator to force the decoder to generate human readable summaries. (equipped with RL) 4. Anomaly Detection To address the problem that it is hard to collect abnormal data if we want to use classifiers.","title":"Auto-encoder"},{"location":"Machine%20Learning/Auto-encoder/#auto-encoder","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Auto-encoder"},{"location":"Machine%20Learning/Auto-encoder/#1-overall","text":"","title":"1. Overall"},{"location":"Machine%20Learning/Auto-encoder/#2-feature-disentangle","text":"Application: Voice Conversion","title":"2. Feature Disentangle"},{"location":"Machine%20Learning/Auto-encoder/#3-discrete-latent-representation","text":"The discrete, finite options in the middle represent basic features . If we use other forms rather than vectors in the middle, we can get some human readable summaries! Use a discriminator to force the decoder to generate human readable summaries. (equipped with RL)","title":"3. Discrete Latent Representation"},{"location":"Machine%20Learning/Auto-encoder/#4-anomaly-detection","text":"To address the problem that it is hard to collect abnormal data if we want to use classifiers.","title":"4. Anomaly Detection"},{"location":"Machine%20Learning/BERT/","text":"BERT Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Self-supervised Learning The system learns to predict part of its input from other parts of its input . A portion of the input is used as a supervisory signal. 2. Masking Input 3. Next Sentence Prediction & Sentence Order Prediction NSP is not helpful. SOP works. Note : CLS: a token used for classification 4. Pre-train & Fine-tune How to use? 4.1 Text Classification 4.2 Extraction-based Q&A Only need to randomly initialize two vectors (for beginning and ending). 4.3 seq2seq Ways of corruption: Comparison of these ways: T5 & C4 5. General Language Understanding Evaluation https://gluebenchmark.com/ 6. BERT Embryology When does BERT know POS tagging, syntactic parsing, semantics? 7. Features & Interesting things 7.1 Contextualized word embedding 7.2 Protein 7.3 Multi-lingual BERT Training a BERT model by many different languages. 7.3.1 Language Information","title":"BERT"},{"location":"Machine%20Learning/BERT/#bert","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"BERT"},{"location":"Machine%20Learning/BERT/#1-self-supervised-learning","text":"The system learns to predict part of its input from other parts of its input . A portion of the input is used as a supervisory signal.","title":"1. Self-supervised Learning"},{"location":"Machine%20Learning/BERT/#2-masking-input","text":"","title":"2. Masking Input"},{"location":"Machine%20Learning/BERT/#3-next-sentence-prediction-sentence-order-prediction","text":"NSP is not helpful. SOP works. Note : CLS: a token used for classification","title":"3. Next Sentence Prediction &amp; Sentence Order Prediction"},{"location":"Machine%20Learning/BERT/#4-pre-train-fine-tune","text":"How to use?","title":"4. Pre-train &amp; Fine-tune"},{"location":"Machine%20Learning/BERT/#41-text-classification","text":"","title":"4.1 Text Classification"},{"location":"Machine%20Learning/BERT/#42-extraction-based-qa","text":"Only need to randomly initialize two vectors (for beginning and ending).","title":"4.2 Extraction-based Q&amp;A"},{"location":"Machine%20Learning/BERT/#43-seq2seq","text":"Ways of corruption: Comparison of these ways: T5 & C4","title":"4.3 seq2seq"},{"location":"Machine%20Learning/BERT/#5-general-language-understanding-evaluation","text":"https://gluebenchmark.com/","title":"5. General Language Understanding Evaluation"},{"location":"Machine%20Learning/BERT/#6-bert-embryology","text":"When does BERT know POS tagging, syntactic parsing, semantics?","title":"6. BERT Embryology"},{"location":"Machine%20Learning/BERT/#7-features-interesting-things","text":"","title":"7. Features &amp; Interesting things"},{"location":"Machine%20Learning/BERT/#71-contextualized-word-embedding","text":"","title":"7.1 Contextualized word embedding"},{"location":"Machine%20Learning/BERT/#72-protein","text":"","title":"7.2 Protein"},{"location":"Machine%20Learning/BERT/#73-multi-lingual-bert","text":"Training a BERT model by many different languages.","title":"7.3 Multi-lingual BERT"},{"location":"Machine%20Learning/BERT/#731-language-information","text":"","title":"7.3.1 Language Information"},{"location":"Machine%20Learning/Basis/","text":"Basis Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. General Guidelines 1.1 Issues of model complexity and optimization How to realize the optimization issue? 1.2 Tackle overfitting Less parameters, sharing parameters Less features Early stopping Regularization Dropout Validation set The correct way to set hyperparameters is to split your training data into two: a training set and a fake test set , which we call validation set . ### Cross-validation If the lack of training data is a concern e.g. 5 folds Cross-validation: \u6bcf\u6b21\u7528\u4e00\u4e2a\u4f5c\u4e3avalidation set\uff0c\u8f6e\u63625\u6b21\uff0c\u53d6\u5e73\u5747 1.3 Validation set The correct way to set hyperparameters is to split your training data into two: a training set and a fake test set , which we call validation set . 1.3.1 Cross-validation If the lack of training data is a concern e.g. 5 folds Cross-validation: \u6bcf\u6b21\u7528\u4e00\u4e2a\u4f5c\u4e3avalidation set\uff0c\u8f6e\u63625\u6b21\uff0c\u53d6\u5e73\u5747 2. Data Preprocessing Note : It is very important to zero-center the data, and it is common to see normalization of every pixel as well. Common pitfall. An important point to make about the preprocessing is that any preprocessing statistics (e.g. the data mean) must only be computed on the training data, and then applied to the validation / test data. E.g. computing the mean and subtracting it from every image across the entire dataset and then splitting the data into train/val/test splits would be a mistake. Instead, the mean must be computed only over the training data and then subtracted equally from all splits (train/val/test). 2.1 Mean subtraction X -= np.mean(X, axis = 0) 2.2 Normalization After zero-centered, we can: X /= np.std(X, axis = 0) 2.3 PCA and Whitening 2.4 Data Augmentation Clipping, rotating, ... 3. Weight Initialization Pitfall: all zero initialization . This turns out to be a mistake, because if every neuron in the network computes the same output, then they will also all compute the same gradients during backpropagation and undergo the exact same parameter updates. In other words, there is no source of asymmetry between neurons if their weights are initialized to be the same. 3.1 Small random numbers W = 0.01* np.random.randn(D,H) , where randn samples from a zero mean, unit standard deviation gaussian . Warning: small is not always good! For example, a Neural Network layer that has very small weights will during backpropagation compute very small gradients on its data (since this gradient is proportional to the value of the weights). This could greatly diminish the \u201cgradient signal\u201d flowing backward through a network, and could become a concern for deep networks . 3.2 Xavier Initialization - Calibrating the variances Common: w = np.random.randn(n) / sqrt(n) , where n is the number of its inputs. w = np.random.randn(n) * sqrt(2.0/n) is the current recommendation for use in practice in the specific case of neural networks with ReLU neurons . 3.2.1 For ReLU 4. Loss function 4.1 Multiclass SVM Loss (Hinge Loss) \"1\" can be replaced by other values. The essence of SVM loss is that the score of the correct label needs to be greater than other scores by 1. 4.2 Softmax and Cross-entropy 4.3 Regularization 5. Optimization 5.1 SGD 5.2 Local minima and Saddle point A naive way to escape saddle point. Seldom used! 5.3 Minibatch epoch: see all the batches once shuffle for every epoch 5.4 Momentum 5.5 Learning rate Learning rate cannot be one-size-fits-all! 5.5.1 Adam Optimizer: RMSProp + Momentum 5.5.2 Learning rate scheduling 5.5.2.1 Learning rate decay 5.5.2.2 Warm up 6. Activation 6.1 ReLU So we want input data with mean 0! 6.2 Sigmoid 6.3 Leaky ReLU 6.4 PReLU \\(\\alpha\\) is not hard-coded! It can be learned! 6.5 ELU 6.6 SELU 6.7 Maxout 6.8 Swish 7. Batch Normalization 7.1 Batch Understanding: Input data \\(\\mathbf{x}\\) s are not independent! \\(\\mathbf{x}\\) s in a (mini-)batch are related to each other. So we need to treat the whole (mini-)batch as a large network! 7.2 Recovery Sometimes we use a linear equation to recover : (Initialize \\(\\gamma\\) with \\(\\mathbf{1}\\) and \\(\\beta\\) with \\(\\mathbf0\\) ; after training for some time, the loss function gets to some good error surface , then we can cancel the constraint of normalization.) 7.3 Pros and Corns: 7.4 Test-Time 8. Transfer Learning","title":"Basis"},{"location":"Machine%20Learning/Basis/#basis","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Basis"},{"location":"Machine%20Learning/Basis/#1-general-guidelines","text":"","title":"1. General Guidelines"},{"location":"Machine%20Learning/Basis/#11-issues-of-model-complexity-and-optimization","text":"How to realize the optimization issue?","title":"1.1 Issues of model complexity and optimization"},{"location":"Machine%20Learning/Basis/#12-tackle-overfitting","text":"Less parameters, sharing parameters Less features Early stopping Regularization Dropout","title":"1.2 Tackle overfitting"},{"location":"Machine%20Learning/Basis/#validation-set","text":"The correct way to set hyperparameters is to split your training data into two: a training set and a fake test set , which we call validation set . ### Cross-validation If the lack of training data is a concern e.g. 5 folds Cross-validation: \u6bcf\u6b21\u7528\u4e00\u4e2a\u4f5c\u4e3avalidation set\uff0c\u8f6e\u63625\u6b21\uff0c\u53d6\u5e73\u5747","title":"Validation set"},{"location":"Machine%20Learning/Basis/#13-validation-set","text":"The correct way to set hyperparameters is to split your training data into two: a training set and a fake test set , which we call validation set .","title":"1.3 Validation set"},{"location":"Machine%20Learning/Basis/#131-cross-validation","text":"If the lack of training data is a concern e.g. 5 folds Cross-validation: \u6bcf\u6b21\u7528\u4e00\u4e2a\u4f5c\u4e3avalidation set\uff0c\u8f6e\u63625\u6b21\uff0c\u53d6\u5e73\u5747","title":"1.3.1 Cross-validation"},{"location":"Machine%20Learning/Basis/#2-data-preprocessing","text":"Note : It is very important to zero-center the data, and it is common to see normalization of every pixel as well. Common pitfall. An important point to make about the preprocessing is that any preprocessing statistics (e.g. the data mean) must only be computed on the training data, and then applied to the validation / test data. E.g. computing the mean and subtracting it from every image across the entire dataset and then splitting the data into train/val/test splits would be a mistake. Instead, the mean must be computed only over the training data and then subtracted equally from all splits (train/val/test).","title":"2. Data Preprocessing"},{"location":"Machine%20Learning/Basis/#21-mean-subtraction","text":"X -= np.mean(X, axis = 0)","title":"2.1 Mean subtraction"},{"location":"Machine%20Learning/Basis/#22-normalization","text":"After zero-centered, we can: X /= np.std(X, axis = 0)","title":"2.2 Normalization"},{"location":"Machine%20Learning/Basis/#23-pca-and-whitening","text":"","title":"2.3 PCA and Whitening"},{"location":"Machine%20Learning/Basis/#24-data-augmentation","text":"Clipping, rotating, ...","title":"2.4 Data Augmentation"},{"location":"Machine%20Learning/Basis/#3-weight-initialization","text":"Pitfall: all zero initialization . This turns out to be a mistake, because if every neuron in the network computes the same output, then they will also all compute the same gradients during backpropagation and undergo the exact same parameter updates. In other words, there is no source of asymmetry between neurons if their weights are initialized to be the same.","title":"3. Weight Initialization"},{"location":"Machine%20Learning/Basis/#31-small-random-numbers","text":"W = 0.01* np.random.randn(D,H) , where randn samples from a zero mean, unit standard deviation gaussian . Warning: small is not always good! For example, a Neural Network layer that has very small weights will during backpropagation compute very small gradients on its data (since this gradient is proportional to the value of the weights). This could greatly diminish the \u201cgradient signal\u201d flowing backward through a network, and could become a concern for deep networks .","title":"3.1 Small random numbers"},{"location":"Machine%20Learning/Basis/#32-xavier-initialization-calibrating-the-variances","text":"Common: w = np.random.randn(n) / sqrt(n) , where n is the number of its inputs. w = np.random.randn(n) * sqrt(2.0/n) is the current recommendation for use in practice in the specific case of neural networks with ReLU neurons .","title":"3.2 Xavier Initialization - Calibrating the variances"},{"location":"Machine%20Learning/Basis/#321-for-relu","text":"","title":"3.2.1 For ReLU"},{"location":"Machine%20Learning/Basis/#4-loss-function","text":"","title":"4. Loss function"},{"location":"Machine%20Learning/Basis/#41-multiclass-svm-loss-hinge-loss","text":"\"1\" can be replaced by other values. The essence of SVM loss is that the score of the correct label needs to be greater than other scores by 1.","title":"4.1 Multiclass SVM Loss (Hinge Loss)"},{"location":"Machine%20Learning/Basis/#42-softmax-and-cross-entropy","text":"","title":"4.2 Softmax and Cross-entropy"},{"location":"Machine%20Learning/Basis/#43-regularization","text":"","title":"4.3 Regularization"},{"location":"Machine%20Learning/Basis/#5-optimization","text":"","title":"5. Optimization"},{"location":"Machine%20Learning/Basis/#51-sgd","text":"","title":"5.1 SGD"},{"location":"Machine%20Learning/Basis/#52-local-minima-and-saddle-point","text":"A naive way to escape saddle point. Seldom used!","title":"5.2 Local minima and Saddle point"},{"location":"Machine%20Learning/Basis/#53-minibatch","text":"epoch: see all the batches once shuffle for every epoch","title":"5.3 Minibatch"},{"location":"Machine%20Learning/Basis/#54-momentum","text":"","title":"5.4 Momentum"},{"location":"Machine%20Learning/Basis/#55-learning-rate","text":"Learning rate cannot be one-size-fits-all!","title":"5.5 Learning rate"},{"location":"Machine%20Learning/Basis/#551-adam-optimizer-rmsprop-momentum","text":"","title":"5.5.1 Adam Optimizer: RMSProp + Momentum"},{"location":"Machine%20Learning/Basis/#552-learning-rate-scheduling","text":"","title":"5.5.2 Learning rate scheduling"},{"location":"Machine%20Learning/Basis/#5521-learning-rate-decay","text":"","title":"5.5.2.1 Learning rate decay"},{"location":"Machine%20Learning/Basis/#5522-warm-up","text":"","title":"5.5.2.2 Warm up"},{"location":"Machine%20Learning/Basis/#6-activation","text":"","title":"6. Activation"},{"location":"Machine%20Learning/Basis/#61-relu","text":"So we want input data with mean 0!","title":"6.1 ReLU"},{"location":"Machine%20Learning/Basis/#62-sigmoid","text":"","title":"6.2 Sigmoid"},{"location":"Machine%20Learning/Basis/#63-leaky-relu","text":"","title":"6.3 Leaky ReLU"},{"location":"Machine%20Learning/Basis/#64-prelu","text":"\\(\\alpha\\) is not hard-coded! It can be learned!","title":"6.4 PReLU"},{"location":"Machine%20Learning/Basis/#65-elu","text":"","title":"6.5 ELU"},{"location":"Machine%20Learning/Basis/#66-selu","text":"","title":"6.6 SELU"},{"location":"Machine%20Learning/Basis/#67-maxout","text":"","title":"6.7 Maxout"},{"location":"Machine%20Learning/Basis/#68-swish","text":"","title":"6.8 Swish"},{"location":"Machine%20Learning/Basis/#7-batch-normalization","text":"","title":"7. Batch Normalization"},{"location":"Machine%20Learning/Basis/#71-batch-understanding","text":"Input data \\(\\mathbf{x}\\) s are not independent! \\(\\mathbf{x}\\) s in a (mini-)batch are related to each other. So we need to treat the whole (mini-)batch as a large network!","title":"7.1 Batch Understanding:"},{"location":"Machine%20Learning/Basis/#72-recovery","text":"Sometimes we use a linear equation to recover : (Initialize \\(\\gamma\\) with \\(\\mathbf{1}\\) and \\(\\beta\\) with \\(\\mathbf0\\) ; after training for some time, the loss function gets to some good error surface , then we can cancel the constraint of normalization.)","title":"7.2 Recovery"},{"location":"Machine%20Learning/Basis/#73-pros-and-corns","text":"","title":"7.3 Pros and Corns:"},{"location":"Machine%20Learning/Basis/#74-test-time","text":"","title":"7.4 Test-Time"},{"location":"Machine%20Learning/Basis/#8-transfer-learning","text":"","title":"8. Transfer Learning"},{"location":"Machine%20Learning/CNN/","text":"CNN Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Visualizing and Understanding 1.1 First Layer Find edges between different colors. 1.2 Last Layer: Dimensionality Reduction t-SNE","title":"CNN"},{"location":"Machine%20Learning/CNN/#cnn","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"CNN"},{"location":"Machine%20Learning/CNN/#1-visualizing-and-understanding","text":"","title":"1. Visualizing and Understanding"},{"location":"Machine%20Learning/CNN/#11-first-layer","text":"Find edges between different colors.","title":"1.1 First Layer"},{"location":"Machine%20Learning/CNN/#12-last-layer-dimensionality-reduction","text":"t-SNE","title":"1.2 Last Layer: Dimensionality Reduction"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/","text":"Detection & Segmentation Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Classification & Localization Difference between object detection and classification & localization : For classification & localization, you know there are objects that you are looking for, and you know the number of it Basic structure to tackle the task of classification & localization: Question: Is it ok to do the two subtasks (classification & localization) together? Some people may compute the loss for each class separately, but generally speaking it works well. Multi-task loss (two kinds of loss) Use hyper parameters to generate weighted total loss (it is difficult) Or, use some final performance metric rather than just the value of loss to make choices How to do it based on pre-trained models like ImageNet? Freeze the pre-trained models first Train your specific model Train them together 2. Object detection 2.1 Sliding window Object detection as classification Big problem: how to choose the location to perform the classification Brute force: computational expensive 2.2 Region Proposals Use proposals instead of searching for all regions. How to propose? 2.2.1 R-CNN Taking crops from the convolutional feature map. 2.2.2 YOLO / SSD without proposals Single-shot Detection: do all of the detections with a single forward pass (compared with performing detections for each proposals in R-CNN) 3. Instance Segmentation 3.1 Mask R-CNN 4. Semantic Segmentation Paired training data: for each training image, each pixel is labeled with a semantic category. 4.1 Convolution An intuitive idea: encode the entire image with conv net, and do semantic segmentation on top Problem: classification architectures often reduce feature spatial sizes to go deeper, but semantic segmentation requires the output size to be the same as input size. 4.2 Fully Convolutional Design a network with only convolutional layers without downsampling operators to make predictions for pixels all at once! Problem : convolutions at original image resolution will be very expensive ... Solution: Design network as a bunch of convolutional layers, with downsampling and upsampling inside the network! Unpooling: 4.3 Transpose Convolution (Learnable Sampling) Issue: checkerboard artifacts","title":"Detection & Segmentation"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#detection-segmentation","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Detection &amp; Segmentation"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#1-classification-localization","text":"Difference between object detection and classification & localization : For classification & localization, you know there are objects that you are looking for, and you know the number of it Basic structure to tackle the task of classification & localization: Question: Is it ok to do the two subtasks (classification & localization) together? Some people may compute the loss for each class separately, but generally speaking it works well. Multi-task loss (two kinds of loss) Use hyper parameters to generate weighted total loss (it is difficult) Or, use some final performance metric rather than just the value of loss to make choices How to do it based on pre-trained models like ImageNet? Freeze the pre-trained models first Train your specific model Train them together","title":"1. Classification &amp; Localization"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#2-object-detection","text":"","title":"2. Object detection"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#21-sliding-window","text":"Object detection as classification Big problem: how to choose the location to perform the classification Brute force: computational expensive","title":"2.1 Sliding window"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#22-region-proposals","text":"Use proposals instead of searching for all regions. How to propose?","title":"2.2 Region Proposals"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#221-r-cnn","text":"Taking crops from the convolutional feature map.","title":"2.2.1 R-CNN"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#222-yolo-ssd","text":"without proposals Single-shot Detection: do all of the detections with a single forward pass (compared with performing detections for each proposals in R-CNN)","title":"2.2.2 YOLO / SSD"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#3-instance-segmentation","text":"","title":"3. Instance Segmentation"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#31-mask-r-cnn","text":"","title":"3.1 Mask R-CNN"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#4-semantic-segmentation","text":"Paired training data: for each training image, each pixel is labeled with a semantic category.","title":"4. Semantic Segmentation"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#41-convolution","text":"An intuitive idea: encode the entire image with conv net, and do semantic segmentation on top Problem: classification architectures often reduce feature spatial sizes to go deeper, but semantic segmentation requires the output size to be the same as input size.","title":"4.1 Convolution"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#42-fully-convolutional","text":"Design a network with only convolutional layers without downsampling operators to make predictions for pixels all at once! Problem : convolutions at original image resolution will be very expensive ... Solution: Design network as a bunch of convolutional layers, with downsampling and upsampling inside the network! Unpooling:","title":"4.2 Fully Convolutional"},{"location":"Machine%20Learning/Detection%20%26%20Segmentation/#43-transpose-convolution-learnable-sampling","text":"Issue: checkerboard artifacts","title":"4.3 Transpose Convolution (Learnable Sampling)"},{"location":"Machine%20Learning/GPT/","text":"GPT Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Training 2. Usage 2.1 X-shot Learning \u201cIncontext\u201d Learning 2.2 Beyond Text","title":"GPT"},{"location":"Machine%20Learning/GPT/#gpt","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"GPT"},{"location":"Machine%20Learning/GPT/#1-training","text":"","title":"1. Training"},{"location":"Machine%20Learning/GPT/#2-usage","text":"","title":"2. Usage"},{"location":"Machine%20Learning/GPT/#21-x-shot-learning","text":"\u201cIncontext\u201d Learning","title":"2.1 X-shot Learning"},{"location":"Machine%20Learning/GPT/#22-beyond-text","text":"","title":"2.2 Beyond Text"},{"location":"Machine%20Learning/Generative%20Models/","text":"Generative Models Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Formulate as density estimation problems : Explicit density estimation : explicitly define and solve for \\(p_{\\mathrm{model}}(x)\\) Implicit density estimation : learn model that can sample from \\(p_{\\mathrm{model}}(x)\\) without explicitly defining it. 1. Explicit density 1.1 PixelRNN Use a chain rule to estimate a pixel based on previous pixels. Note that there's no labels. Just use the input data to train the probability model. 1.2 PixelCNN 1.3 Summary 2. Implicit Density 2.1 Background: Autoencoders Decoder and reconstructed input data are just used to compute loss to train the Autoencoder. Significance: Encoder can be used to initialize a supervised model. We can use a large amount of unlabeled data to train an unsupervised model which have learned some universal features . Then, we can use it to initialize a supervised model. 2.2 Variational Autoencoders (VAE) Autoencoders can reconstruct data, and can learn features to initialize a supervised model Features capture factors of variation in training data. But we can\u2019t generate new images from an autoencoder because we don\u2019t know the space of z. ??? How do we make autoencoder a generative model ? 2.3 Generative Adversarial Networks","title":"Generative Models"},{"location":"Machine%20Learning/Generative%20Models/#generative-models","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Formulate as density estimation problems : Explicit density estimation : explicitly define and solve for \\(p_{\\mathrm{model}}(x)\\) Implicit density estimation : learn model that can sample from \\(p_{\\mathrm{model}}(x)\\) without explicitly defining it.","title":"Generative Models"},{"location":"Machine%20Learning/Generative%20Models/#1-explicit-density","text":"","title":"1. Explicit density"},{"location":"Machine%20Learning/Generative%20Models/#11-pixelrnn","text":"Use a chain rule to estimate a pixel based on previous pixels. Note that there's no labels. Just use the input data to train the probability model.","title":"1.1 PixelRNN"},{"location":"Machine%20Learning/Generative%20Models/#12-pixelcnn","text":"","title":"1.2 PixelCNN"},{"location":"Machine%20Learning/Generative%20Models/#13-summary","text":"","title":"1.3 Summary"},{"location":"Machine%20Learning/Generative%20Models/#2-implicit-density","text":"","title":"2. Implicit Density"},{"location":"Machine%20Learning/Generative%20Models/#21-background-autoencoders","text":"Decoder and reconstructed input data are just used to compute loss to train the Autoencoder. Significance: Encoder can be used to initialize a supervised model. We can use a large amount of unlabeled data to train an unsupervised model which have learned some universal features . Then, we can use it to initialize a supervised model.","title":"2.1 Background: Autoencoders"},{"location":"Machine%20Learning/Generative%20Models/#22-variational-autoencoders-vae","text":"Autoencoders can reconstruct data, and can learn features to initialize a supervised model Features capture factors of variation in training data. But we can\u2019t generate new images from an autoencoder because we don\u2019t know the space of z. ??? How do we make autoencoder a generative model ?","title":"2.2 Variational Autoencoders (VAE)"},{"location":"Machine%20Learning/Generative%20Models/#23-generative-adversarial-networks","text":"","title":"2.3 Generative Adversarial Networks"},{"location":"Machine%20Learning/Image%20Classification/","text":"Image Classification Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Some Basis of ML 2. KNN k - Nearest Neighbor Classifier 2.1 Pros and Cons Pros: easy to build may sometimes be a good choice in some settings (especially if the data is low-dimensional ) Cons: too slow to get the result of tests 2.2 Promotion Approximate Nearest Neighbor (ANN) k-means","title":"Image Classification"},{"location":"Machine%20Learning/Image%20Classification/#image-classification","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Image Classification"},{"location":"Machine%20Learning/Image%20Classification/#1-some-basis-of-ml","text":"","title":"1. Some Basis of ML"},{"location":"Machine%20Learning/Image%20Classification/#2-knn","text":"k - Nearest Neighbor Classifier","title":"2. KNN"},{"location":"Machine%20Learning/Image%20Classification/#21-pros-and-cons","text":"Pros: easy to build may sometimes be a good choice in some settings (especially if the data is low-dimensional ) Cons: too slow to get the result of tests","title":"2.1 Pros and Cons"},{"location":"Machine%20Learning/Image%20Classification/#22-promotion","text":"Approximate Nearest Neighbor (ANN) k-means","title":"2.2 Promotion"},{"location":"Machine%20Learning/LLL/","text":"Life Long Learning Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Knowledge Retention but NOT Intransigence Catastrophic Forgetting 1.1 Elastic Weight Consolidation Guard \\(b_i\\) is what? Possible one: 2nd derivative","title":"Life Long Learning"},{"location":"Machine%20Learning/LLL/#life-long-learning","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Life Long Learning"},{"location":"Machine%20Learning/LLL/#1-knowledge-retention-but-not-intransigence","text":"Catastrophic Forgetting","title":"1. Knowledge Retention but NOT Intransigence"},{"location":"Machine%20Learning/LLL/#11-elastic-weight-consolidation","text":"Guard \\(b_i\\) is what? Possible one: 2nd derivative","title":"1.1 Elastic Weight Consolidation"},{"location":"Machine%20Learning/RNN/","text":"RNN Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Process sequences and build models with various inputs or outputs: 1 to many many to 1 many to many (e.g. translation; seq2seq) 1. Basis Process entries of vector x as a sequence Add dense layer taking all of the h as input to yield an output 2. vanilla RNN 2.1 Character-level Language Model During tests: Question: Why sampling according to the probability distribution given by softmax , instead of taking the letter with the highest score? Softmax sampling increases the diversity of the outputs 2.2 Truncated BP through time This is like a sliding window mechanism. We only focus on the data in a window during an iteration. 3. Case study We want the model to learn to predict the following characters, but it also learns many things about the structural features of the input data. 3.1 Image to description Input: image Output: description of the image image -> CNN -> summary vector (4096 dim vector \\(\\vec{v}\\) , instead of softmax) -> RNN -> words add image info by adding v and a 3rd weight matrix into the RNN model Get a distribution of every words in the vocabulary, and sample from it. The input of the 1st step is a START token. The sample result serves as the input at the next step. Once sampling a END token, stop generation. Available dataset: COCO from Microsoft 3.2 Attention RNN focuses its attention at a different spatial location when generating each word. Input: Weighted features & sampled word Output: distribution over locations & distribution over vocab \\(a_i\\) : vectors of attention , telling the model where to focus (generating weighted features) Soft attention: weighted distribution over all locations Hard attention: force the model to select exactly one location Problem: NOT a differentiable function Solution : (see below) Pros: the model can focus on the meaningful part in the image Notes for Soft & hard attention as a complement: The attention module has 2 inputs: a context : we use the hidden state \\(h_{t - 1}\\) from the previous time step image features in each localized areas: one of the fully connected layer output \\(x\\) from CNN Nevertheless, we need to keep the spatial information : Use the feature maps of one of the convolution layer which spatial information is still preserved Soft attention input weighted image features accounted for attention \\(s_i\\) is jointly decided by context and the image same number for \\(s_i\\) and \\(x_i\\) The accuracy is subject to the assumption that the weighted average is a good representation for the area of attention Hard attention Instead of a weighted average, hard attention uses \\(\\alpha_i\\) as a sample rate to pick one \\(x_i\\) as the input to the LSTM. So finally we only choose (by sampling!) one part of the image, \\(x_i\\) , instead of a weighted average. How to calculate the gradient descent correctly? Perform samplings and average our results using the Monte Carlo method . The accuracy is subject to how many samplings are performed and how well it is sampled . Related to RL; Estimate the gradient by Monte Carlo method. 3.3 Visual Question Answering: RNN with attention Visual7W: Grounded Question Answering in Images How to combine the encoded image vector with encoded question vector? Most common: Connect / concatenate them together directly and feed them into fully connected layers Sometimes: Vector multiplication Input and encoding: Image \\(I\\) and Question sequence \\(Q\\) consists of words \\(t_i\\) F(\u00b7) transforms an image I from pixel space to a 4096-dimensional feature representation (extract the activations from the last fully connected layer (fc7) of a pre-trained CNN model VGG-16) OH(\u00b7) transforms a word token to its one-hot representation \\(W_i\\) and \\(W_w\\) transform the representations of image and words into embedding spaces with the same dimension . (Finally they are vectors in the same dimensional space: \\(v_0, \\dots v_m\\) .) Feed the vectors into the LSTM model one by one. LSTM with attention Output and decoding: At the decoding stage, it computes the log-likelihood of an answer (while in the encoding stage we feed the question in the model) by a dot product (which can reflect the similarity of two vectors) between its transformed visual feature (fc7 from CNN) and the last LSTM hidden state . 4. Multilayer RNN Usually 2~4 layers for RNN is good enough. 5. Gradient flow Problem: too many W in the gradient! (especially for \\(h_0\\) ) 5.1 Gradient explosion and vanishing gradient 5.2 LSTM (Long Short Term Memory) Four gates: \\(c_t\\) : Cell state \\(h_t\\) : Hidden state Pros compared with vanilla RNN: Forget gate can vary from each time step, unlike the W is consistent in the vanilla RNN. So the model can avoid gradient explosion or vanishing. Sigmoid for f, so the output falls in \\((0, 1)\\) . Why LSTMs Stop Your Gradients From Vanishing: A View from the Backwards Pass \u6f2b\u8c08LSTM\u7cfb\u5217\u7684\u68af\u5ea6\u95ee\u9898 LSTM\u5355\u5143\u68af\u5ea6\u7684\u8be6\u7ec6\u7684\u6570\u5b66\u63a8\u5bfc 5.3 GRU Use only one gate to balance the history and the new data. Performs similarly to LSTM but is computationally cheaper.","title":"RNN"},{"location":"Machine%20Learning/RNN/#rnn","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Process sequences and build models with various inputs or outputs: 1 to many many to 1 many to many (e.g. translation; seq2seq)","title":"RNN"},{"location":"Machine%20Learning/RNN/#1-basis","text":"Process entries of vector x as a sequence Add dense layer taking all of the h as input to yield an output","title":"1. Basis"},{"location":"Machine%20Learning/RNN/#2-vanilla-rnn","text":"","title":"2. vanilla RNN"},{"location":"Machine%20Learning/RNN/#21-character-level-language-model","text":"During tests: Question: Why sampling according to the probability distribution given by softmax , instead of taking the letter with the highest score? Softmax sampling increases the diversity of the outputs","title":"2.1 Character-level Language Model"},{"location":"Machine%20Learning/RNN/#22-truncated-bp-through-time","text":"This is like a sliding window mechanism. We only focus on the data in a window during an iteration.","title":"2.2 Truncated BP through time"},{"location":"Machine%20Learning/RNN/#3-case-study","text":"We want the model to learn to predict the following characters, but it also learns many things about the structural features of the input data.","title":"3. Case study"},{"location":"Machine%20Learning/RNN/#31-image-to-description","text":"Input: image Output: description of the image image -> CNN -> summary vector (4096 dim vector \\(\\vec{v}\\) , instead of softmax) -> RNN -> words add image info by adding v and a 3rd weight matrix into the RNN model Get a distribution of every words in the vocabulary, and sample from it. The input of the 1st step is a START token. The sample result serves as the input at the next step. Once sampling a END token, stop generation. Available dataset: COCO from Microsoft","title":"3.1 Image to description"},{"location":"Machine%20Learning/RNN/#32-attention","text":"RNN focuses its attention at a different spatial location when generating each word. Input: Weighted features & sampled word Output: distribution over locations & distribution over vocab \\(a_i\\) : vectors of attention , telling the model where to focus (generating weighted features) Soft attention: weighted distribution over all locations Hard attention: force the model to select exactly one location Problem: NOT a differentiable function Solution : (see below) Pros: the model can focus on the meaningful part in the image Notes for Soft & hard attention as a complement: The attention module has 2 inputs: a context : we use the hidden state \\(h_{t - 1}\\) from the previous time step image features in each localized areas: one of the fully connected layer output \\(x\\) from CNN Nevertheless, we need to keep the spatial information : Use the feature maps of one of the convolution layer which spatial information is still preserved Soft attention input weighted image features accounted for attention \\(s_i\\) is jointly decided by context and the image same number for \\(s_i\\) and \\(x_i\\) The accuracy is subject to the assumption that the weighted average is a good representation for the area of attention Hard attention Instead of a weighted average, hard attention uses \\(\\alpha_i\\) as a sample rate to pick one \\(x_i\\) as the input to the LSTM. So finally we only choose (by sampling!) one part of the image, \\(x_i\\) , instead of a weighted average. How to calculate the gradient descent correctly? Perform samplings and average our results using the Monte Carlo method . The accuracy is subject to how many samplings are performed and how well it is sampled . Related to RL; Estimate the gradient by Monte Carlo method.","title":"3.2 Attention"},{"location":"Machine%20Learning/RNN/#33-visual-question-answering-rnn-with-attention","text":"Visual7W: Grounded Question Answering in Images How to combine the encoded image vector with encoded question vector? Most common: Connect / concatenate them together directly and feed them into fully connected layers Sometimes: Vector multiplication Input and encoding: Image \\(I\\) and Question sequence \\(Q\\) consists of words \\(t_i\\) F(\u00b7) transforms an image I from pixel space to a 4096-dimensional feature representation (extract the activations from the last fully connected layer (fc7) of a pre-trained CNN model VGG-16) OH(\u00b7) transforms a word token to its one-hot representation \\(W_i\\) and \\(W_w\\) transform the representations of image and words into embedding spaces with the same dimension . (Finally they are vectors in the same dimensional space: \\(v_0, \\dots v_m\\) .) Feed the vectors into the LSTM model one by one. LSTM with attention Output and decoding: At the decoding stage, it computes the log-likelihood of an answer (while in the encoding stage we feed the question in the model) by a dot product (which can reflect the similarity of two vectors) between its transformed visual feature (fc7 from CNN) and the last LSTM hidden state .","title":"3.3 Visual Question Answering: RNN with attention"},{"location":"Machine%20Learning/RNN/#4-multilayer-rnn","text":"Usually 2~4 layers for RNN is good enough.","title":"4. Multilayer RNN"},{"location":"Machine%20Learning/RNN/#5-gradient-flow","text":"Problem: too many W in the gradient! (especially for \\(h_0\\) )","title":"5. Gradient flow"},{"location":"Machine%20Learning/RNN/#51-gradient-explosion-and-vanishing-gradient","text":"","title":"5.1 Gradient explosion and vanishing gradient"},{"location":"Machine%20Learning/RNN/#52-lstm-long-short-term-memory","text":"Four gates: \\(c_t\\) : Cell state \\(h_t\\) : Hidden state Pros compared with vanilla RNN: Forget gate can vary from each time step, unlike the W is consistent in the vanilla RNN. So the model can avoid gradient explosion or vanishing. Sigmoid for f, so the output falls in \\((0, 1)\\) . Why LSTMs Stop Your Gradients From Vanishing: A View from the Backwards Pass \u6f2b\u8c08LSTM\u7cfb\u5217\u7684\u68af\u5ea6\u95ee\u9898 LSTM\u5355\u5143\u68af\u5ea6\u7684\u8be6\u7ec6\u7684\u6570\u5b66\u63a8\u5bfc","title":"5.2 LSTM (Long Short Term Memory)"},{"location":"Machine%20Learning/RNN/#53-gru","text":"Use only one gate to balance the history and the new data. Performs similarly to LSTM but is computationally cheaper.","title":"5.3 GRU"},{"location":"Machine%20Learning/Reinforcement%20Learning/","text":"Reinforcement Learning Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) 1. Mathematical Formulation 1.1 Markov Decision Process 1.2 Value function and Q-value function 1.3 Q-learning Value iteration algorithm : Use Bellman equation as an iterative update Qi will converge to Q* as i -> infinity ! What\u2019s the problem with this? Not scalable. Must compute Q(s,a) for every state-action pair . If state is e.g. current game state pixels, computationally infeasible to compute for entire state space! Solution : use a function approximator to estimate Q(s,a). E.g. a neural network! 1.4 Deep Q-learning 1.4.1 Q-network 1.4.1.1 Architecture 1.4.1.2 Experience Replay Example: a robot grasping an object has a very high-dimensional state => hard to learn exact value of every (state, action) pair But the policy can be much simpler: just close your hand Can we learn a policy directly, e.g. finding the best policy from a collection of policies? 2. Policy Gradients & REINFORCE Algorithm Find the optimal policy without estimating the Q-value. ??? 3. Variance reduction 4. Actor-Critic Algorithm 5. Recurrent Attention Model 6. AlphaGo 7. Summary","title":"Reinforcement Learning"},{"location":"Machine%20Learning/Reinforcement%20Learning/#reinforcement-learning","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Reinforcement Learning"},{"location":"Machine%20Learning/Reinforcement%20Learning/#1-mathematical-formulation","text":"","title":"1. Mathematical Formulation"},{"location":"Machine%20Learning/Reinforcement%20Learning/#11-markov-decision-process","text":"","title":"1.1 Markov Decision Process"},{"location":"Machine%20Learning/Reinforcement%20Learning/#12-value-function-and-q-value-function","text":"","title":"1.2 Value function and Q-value function"},{"location":"Machine%20Learning/Reinforcement%20Learning/#13-q-learning","text":"Value iteration algorithm : Use Bellman equation as an iterative update Qi will converge to Q* as i -> infinity ! What\u2019s the problem with this? Not scalable. Must compute Q(s,a) for every state-action pair . If state is e.g. current game state pixels, computationally infeasible to compute for entire state space! Solution : use a function approximator to estimate Q(s,a). E.g. a neural network!","title":"1.3 Q-learning"},{"location":"Machine%20Learning/Reinforcement%20Learning/#14-deep-q-learning","text":"","title":"1.4 Deep Q-learning"},{"location":"Machine%20Learning/Reinforcement%20Learning/#141-q-network","text":"","title":"1.4.1 Q-network"},{"location":"Machine%20Learning/Reinforcement%20Learning/#1411-architecture","text":"","title":"1.4.1.1 Architecture"},{"location":"Machine%20Learning/Reinforcement%20Learning/#1412-experience-replay","text":"Example: a robot grasping an object has a very high-dimensional state => hard to learn exact value of every (state, action) pair But the policy can be much simpler: just close your hand Can we learn a policy directly, e.g. finding the best policy from a collection of policies?","title":"1.4.1.2 Experience Replay"},{"location":"Machine%20Learning/Reinforcement%20Learning/#2-policy-gradients-reinforce-algorithm","text":"Find the optimal policy without estimating the Q-value. ???","title":"2. Policy Gradients &amp; REINFORCE Algorithm"},{"location":"Machine%20Learning/Reinforcement%20Learning/#3-variance-reduction","text":"","title":"3. Variance reduction"},{"location":"Machine%20Learning/Reinforcement%20Learning/#4-actor-critic-algorithm","text":"","title":"4. Actor-Critic Algorithm"},{"location":"Machine%20Learning/Reinforcement%20Learning/#5-recurrent-attention-model","text":"","title":"5. Recurrent Attention Model"},{"location":"Machine%20Learning/Reinforcement%20Learning/#6-alphago","text":"","title":"6. AlphaGo"},{"location":"Machine%20Learning/Reinforcement%20Learning/#7-summary","text":"","title":"7. Summary"},{"location":"Machine%20Learning/Transformer/","text":"Transformer Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) (Ref: The Illustrated Transformer ) 1. Seq2seq Input a sequence, output a sequence. The output length is determined by model. Applications: too many. Selected: syntactic parsing, multi-label classification, even object detection 2. Encoder Overall: Structure of encoder: Detail of a block in an encoder: Self-attention: build connections between input layers FC: increase the dim and them decrease (recover) the dim, to increase the ability of expression Better design: change the place of Layer Normalization 3. Decoder 3.1 Autoregressive 3.1.1 Overall 3.1.2 Masked Self-attention 3.2 Non-autoregressive NAT can control the output length. Multi-modality: 4. Encoder-Decoder 4.1 Cross Attention 5. Training 5.1 Teacher Forcing using the ground truth as input. loss: sum of cross entropy 5.2 Copy Mechanism Copy something from the input to the output. chat-bot, summarization of articles, ... 5.3 Guided Attention Guide the way of attention to avoid stupid mistakes. Monotonic attention Location-aware attention 5.4 Beam Search Note : Randomness is needed for decoder when generating sequence in some (creative) tasks. 5.5 Optimizing Evaluation Metrics 5.5.1 BLEU score \u5206\u5b50\uff1a\u5728\u7ed9\u5b9a\u7684candidate\u4e2d\u6709\u591a\u5c11\u4e2an-gram\u8bcd\u8bed\u51fa\u73b0\u5728reference\u4e2d\u3002 \u5206\u6bcd\uff1a\u6240\u6709\u7684candidate\u4e2dn-gram\u7684\u4e2a\u6570 We can use BLEU score in validation stage to select the best model. However , it cannot be used to train because it is not differential so we can't optimize it as a loss function. Rule: When you don\u2019t know how to optimize, just use reinforcement learning (RL)! 5.6 Scheduled Sampling 5.6.1 Exposure Bias There is a mismatch due to the teacher forcing mechanism! Scheduled Sampling:","title":"Transformer"},{"location":"Machine%20Learning/Transformer/#transformer","text":"Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) (Ref: The Illustrated Transformer )","title":"Transformer"},{"location":"Machine%20Learning/Transformer/#1-seq2seq","text":"Input a sequence, output a sequence. The output length is determined by model. Applications: too many. Selected: syntactic parsing, multi-label classification, even object detection","title":"1. Seq2seq"},{"location":"Machine%20Learning/Transformer/#2-encoder","text":"Overall: Structure of encoder: Detail of a block in an encoder: Self-attention: build connections between input layers FC: increase the dim and them decrease (recover) the dim, to increase the ability of expression Better design: change the place of Layer Normalization","title":"2. Encoder"},{"location":"Machine%20Learning/Transformer/#3-decoder","text":"","title":"3. Decoder"},{"location":"Machine%20Learning/Transformer/#31-autoregressive","text":"","title":"3.1 Autoregressive"},{"location":"Machine%20Learning/Transformer/#311-overall","text":"","title":"3.1.1 Overall"},{"location":"Machine%20Learning/Transformer/#312-masked-self-attention","text":"","title":"3.1.2 Masked Self-attention"},{"location":"Machine%20Learning/Transformer/#32-non-autoregressive","text":"NAT can control the output length. Multi-modality:","title":"3.2 Non-autoregressive"},{"location":"Machine%20Learning/Transformer/#4-encoder-decoder","text":"","title":"4. Encoder-Decoder"},{"location":"Machine%20Learning/Transformer/#41-cross-attention","text":"","title":"4.1 Cross Attention"},{"location":"Machine%20Learning/Transformer/#5-training","text":"","title":"5. Training"},{"location":"Machine%20Learning/Transformer/#51-teacher-forcing","text":"using the ground truth as input. loss: sum of cross entropy","title":"5.1 Teacher Forcing"},{"location":"Machine%20Learning/Transformer/#52-copy-mechanism","text":"Copy something from the input to the output. chat-bot, summarization of articles, ...","title":"5.2 Copy Mechanism"},{"location":"Machine%20Learning/Transformer/#53-guided-attention","text":"Guide the way of attention to avoid stupid mistakes. Monotonic attention Location-aware attention","title":"5.3 Guided Attention"},{"location":"Machine%20Learning/Transformer/#54-beam-search","text":"Note : Randomness is needed for decoder when generating sequence in some (creative) tasks.","title":"5.4 Beam Search"},{"location":"Machine%20Learning/Transformer/#55-optimizing-evaluation-metrics","text":"","title":"5.5 Optimizing Evaluation Metrics"},{"location":"Machine%20Learning/Transformer/#551-bleu-score","text":"\u5206\u5b50\uff1a\u5728\u7ed9\u5b9a\u7684candidate\u4e2d\u6709\u591a\u5c11\u4e2an-gram\u8bcd\u8bed\u51fa\u73b0\u5728reference\u4e2d\u3002 \u5206\u6bcd\uff1a\u6240\u6709\u7684candidate\u4e2dn-gram\u7684\u4e2a\u6570 We can use BLEU score in validation stage to select the best model. However , it cannot be used to train because it is not differential so we can't optimize it as a loss function. Rule: When you don\u2019t know how to optimize, just use reinforcement learning (RL)!","title":"5.5.1 BLEU score"},{"location":"Machine%20Learning/Transformer/#56-scheduled-sampling","text":"","title":"5.6 Scheduled Sampling"},{"location":"Machine%20Learning/Transformer/#561-exposure-bias","text":"There is a mismatch due to the teacher forcing mechanism! Scheduled Sampling:","title":"5.6.1 Exposure Bias"},{"location":"Software%20Engineering/Vue/","text":"Vue 1. Basis Ref: https://www.vuemastery.com/courses/intro-to-vue-3 1.1 index.html Import Vue.js in head tag via a CDN link to use Vue. Import main.js in body tag to import Vue app. Mount the app into DOM by a method mount that requires a DOM selector as an argument: < script > const mountedApp = app . mount ( '#app' ) </ script > Display the data by use div with specific id: < div id = \"app\" > < h1 > {{ product }} </ h1 > </ div > 1.2 main.js Create a Vue app: const app = Vue . createApp ({ data () { return { product : 'Socks' } }, methods : { update ( id ) { this . cartList . push ( id ) } } }) 1.3 Computed Properties data () { computed : { image () { return this . variants [ this . selectedVariant ]. image } } } < img v-bind:src = \"image\" > 1.4 Components 1.4.1 Define components/ProductDisplay.js app . component ( 'product-display' , { props : { premium : { type : Boolean , required : true } }, template : /*html*/ ` <!-- ... --> ` , data () { return { } }, methods : { }, computed : { } }) 1.4.2 Import <!-- Import Components --> < script src = \"./components/ProductDisplay.js\" ></ script > 1.4.3 Use < div id = \"app\" > < div class = \"nav-bar\" ></ div > < div class = \"cart\" > Cart({{ cart }}) </ div > < product-display ></ product-display > <!-- Use the component! --> < product-display ></ product-display > <!-- Use again! --> </ div > 1.4.4 Props product-display component needs access to data premium in main.js in order to render contents corresponding with variables in main.js . In other words, it needs a custom attribute (a funnel) that we can feed this data into. So, we add custom attribute onto the product-display component where we\u2019re using it. < product-display :premium = \"premium\" ></ product-display > Notice how we\u2019re using the shorthand for v-bind so we can reactively receive the new value of premium if it updates (from true to false ). In ProductDisplay.js : app . component ( 'product-display' , { props : { premium : { type : Boolean , required : true } }, // ... 1.4.5 Emitting and Listening Something happened in one component, and we need to inform other components by emitting an event. methods : { addToCart () { this . $emit ( 'add-to-cart' ) }, // ... } < product-display :premium = \"premium\" @ add-to-cart = \"updateCart\" ></ product-display > 1.5 v-bind Dynamically bind an attribute to an expression. < img v-bind:src = \"image\" > <! -- src attribute bound to the image data --> < img :src = \"image\" > <! abbr./shorthand --> 1.6 v-if / v-show < p v-if = \"inStock\" > In Stock </ p > < p v-else > Out of Stock </ p > < p v-show = \"inStock\" > In Stock </ p > < p v-if = \"inventory > 10\" > In Stock </ p > < p v-else-if = \"inventory <= 10 && inventory > 0\" > Almost sold out! </ p > < p v-else > Out of Stock </ p > 1.7 v-for In main.js we have: const app = Vue . createApp ({ data () { return { ... details : [ '50% cotton' , '30% wool' , '20% polyester' ] } } }) Then, < ul > < li v-for = \"detail in details\" > {{ detail }} </ li > </ ul > 1.7.1 key attribute Bind each DOM element to corresponding list item. data () { return { ... variants : [ { id : 2234 , color : 'green' }, { id : 2235 , color : 'blue' } ] } } < div v-for = \"variant in variants\" :key = \"variant.id\" > {{ variant.color }} </ div > By saying :key=\"variant.id\" , we\u2019re using the shorthand for v-bind to bind the variant\u2019s id to the key attribute. 1.8 Event 1.8.1 Click < button class = \"button\" v-on:click = \"logic to run\" > Add to Cart </ button > < button class = \"button\" v-on:click = \"cart += 1\" > Add to Cart </ button > < button class = \"button\" v-on:click = \"addToCart\" > Add to Cart </ button > const app = Vue . createApp ({ data () { return { cart : 0 , ... } }, methods : { addToCart () { this . cart += 1 } } }) 1.8.2 Mouseover < div v-for = \"variant in variants\" :key = \"variant.id\" @ mouseover = \"updateImage(variant.image)\" > {{ variant.color }} </ div > 1.9 Style Use v-bind to bind parameters of styles to variables: < div v-for = \"variant in variants\" :key = \"variant.id\" @ mouseover = \"updateImage(variant.image)\" class = \"color-circle\" :style = \"{ backgroundColor: variant.color }\" > </ div > Camel vs Kebab In JavaScript, - would have been interpreted by as a minus sign, so we can't use it as a variable's name. < div :style = \"{ backgroundColor: variant.color }></div> <div :style=\" { ' background-color ' : variant . color } ></ div > Bind a style to an entire style object. < div > :style=\"styles\" </ div > data () { return { styles : { color : 'red' } } } 1.10 Class < button class = \"button\" :class = \"{ disabledButton: !inStock }\" :disabled = \"!inStock\" @ click = \"addToCart\" > Add to Cart </ button > If inStock == false , then this element will have double classes, \"button\" and \"disabledButton\". Note : The class that is defined later in CSS file can override the class that is defined before it when both of them are the classes of a single element. Ref: https://www.zhihu.com/question/28976590 1.10.1 Ternary Operators (inline) < div > :class=\"[isActive ? activeClass : '']\" </ div > (The second class is empty, no class.) 1.11 v-model When using a form, we need to bind from the template to the data. It is the reverse of v-bind . We want to bind these input fields to their respective data properties so that when the user fills out the form, we store their data locally. In ReviewForm.js , add the v-model directive: app . component ( 'review-form' , { template : /*html*/ `<form class=\"review-form\" @submit.prevent=\"onSubmit\"> <h3>Leave a review</h3> <label for=\"name\">Name:</label> <input id=\"name\" v-model=\"name\"> <label for=\"review\">Review:</label> <textarea id=\"review\" v-model=\"review\"></textarea> <label for=\"rating\">Rating:</label> <select id=\"rating\" v-model.number=\"rating\"> <option>5</option> <option>4</option> <option>3</option> <option>2</option> <option>1</option> </select> <input class=\"button\" type=\"submit\" value=\"Submit\"> </form>` , data () { return { name : '' , review : '' , rating : null }, methods : { onSubmit () { let productReview = { name : this . name , review : this . review , rating : this . rating , } this . $emit ( 'review-submitted' , productReview ) this . name = '' this . review = '' this . rating = null } } }) (Remember to import it.) ProductDisplay.js template : /*html*/ `<div class=\"product-display\"> <div class=\"product-container\"> ... </div> <review-form @review-submitted=\"addReview\"></review-form> </div>` }), data () { return { ... reviews : [] } }, methods : { ... addReview ( review ) { this . reviews . push ( review ) } }, Validation : ReviewForm.js methods : { onSubmit () { if ( this . name === '' || this . review === '' || this . rating === null || this . recommend === null ) { alert ( 'Review is incomplete. Please fill out every field.' ) return } let productReview = { name : this . name , review : this . review , rating : this . rating , recommend : this . recommend // solution } this . $emit ( 'review-submitted' , productReview ) this . name = '' this . review = '' this . rating = null this . recommend = null // solution } } 2. Vue Router Ref: Vue Router for Everyone 2.1 Create a project with Vue Router using Vue CLI Use nvm to install node. Use npm to install vue-cli. Use vue ui to create a new project with GUI. 2.2 Visual Structure App.vue # Single page application -- router-link -- router-view ---- components 2.3 Single File Components 2.3.1 Basic Structure of a .vue file < template > < /template> < script > < /script> <!-- Add \"scoped\" attribute to limit CSS to this component only --> < style scoped > < /style> 2.4 Create routes Add nav-bar in main page: < script src = \"https://unpkg.com/vue/dist/vue.js\" ></ script > < script src = \"https://unpkg.com/vue-router/dist/vue-router.js\" ></ script > < div id = \"app\" > < h1 > Hello App! </ h1 > < p > <!-- use router-link component(already provided) for navigation. --> <!-- specify the link by passing the `to` prop. --> <!-- `<router-link>` will be rendered as an `<a>` tag by default --> < router-link to = \"/foo\" > Go to Foo </ router-link > < router-link to = \"/bar\" > Go to Bar </ router-link > </ p > <!-- route outlet --> <!-- component matched by the route will render here --> < router-view ></ router-view > </ div > Write routes in js: First, we have components. Second, we have a routes list, and third, we use it to make a router instance. Fourth, let app use the router and mount it. // 0. If using a module system (e.g. via vue-cli), import Vue and VueRouter // and then call `Vue.use(VueRouter)`. // 1. Define route components. // These can be imported from other files const Foo = { template : '<div>foo</div>' } const Bar = { template : '<div>bar</div>' } // 2. Define some routes // Each route should map to a component. The \"component\" can // either be an actual component constructor created via // `Vue.extend()`, or just a component options object. // We'll talk about nested routes later. const routes = [ { path : '/foo' , component : Foo }, { path : '/bar' , component : Bar } ] // 3. Create the router instance and pass the `routes` option // You can pass in additional options here, but let's // keep it simple for now. const router = new VueRouter ({ routes // short for `routes: routes` }) // 4. Create and mount the root instance. // Make sure to inject the router with the router option to make the // whole app router-aware. const app = new Vue ({ router }). $mount ( '#app' ) // Now the app has started! There are two ways to define routes of outsider components (like Single File Components, which can be identified by .vue ): In @/router/index.js : import Home from \"../views/Home.vue\" ; const routes = [ { path : \"/\" , name : \"Home\" , component : Home } ]; Recommended way (It is called lazy loading, which means the components will be loaded only when the user go to the link): const routes = [ { path : \"/about\" , name : \"About\" , component : () => import ( /* webpackChunkName: \"about\" */ \"../views/About.vue\" ) } ]; 2.5 Named routes If we define name prop., we can link routes derectly into HTML without specifying paths: < router-link :to = \"/about\" > About Page </ router-link > <!-- can be changed to --> < router-link :to = \"{name: 'About'}\" > About Page </ router-link > So we can change paths later without refactoring HTML code. 2.6 Operate this.$router Create a GoBack component: <template> <span class=\"go-back\"> <button @click=\"goBack\">go back</button> </span> </template> <script> export default { methods: { goBack() { return this.$router.go(-1); // there are many methods provided by `this.$router` } } }; </script> <style scoped> .go-back { display: flex; cursor: pointer; } button { border: 0; } </style> 2.7 Pass Params into routed page < router-link :to = \"{ name: 'About', params: {id: data_list.id} }\" > About Page </ router-link > In About.vue : < template > < p > The id is: {{ this.$route.params.id }} </ p > </ template > Before and after the snippet above, we complete the index.js : import { createRouter , createWebHistory } from \"vue-router\" ; // snippet above // History??? const router = createRouter ({ history : createWebHistory ( process . env . BASE_URL ), routes }); // export echoes with import: // in main.js, we have `import router from \"./router\";` export default router ; // `export default {};` can be regarded as providing some interfaces in some js to other js programs 2.8 Dynamic Routes In HTML: < router-link :to = \"{ name: 'DestinationDetails', params: { slug: destination.slug } }\" > In router creating: { path: \"/destination/:slug\", name: \"DestinationDetails\", props: true, component: () => import(/* webpackChunkName: \"DestinationDetails\"*/ \"./views/DestinationDetails\"), }, In requested component's .vue file: export default { props : { slug : { type : String , required : true } }, computed : { destination () { return store . destinations . find ( destination => destination . slug === this . slug ); } } } If we visit router-link which is rendered to URL /destination/somewhere , /destination/:slug will be matched, and somewhere will be passed to variable slug through props . Then the computed variable destination will be the one which has the same slug value. Notice that at first we use a direct way like {{ this.$route.params.slug }} to use the params, but here we use props to pass it. 2.8.1 Reload Issue of Dynamic Routed Components If we load a components by dynamic routes, there will be some routers leading to the same components with different params. So if the user switch between these routes, Vue Router can't see the difference because they share the same component, and as a result the contents of <router-view> will not change. So we need to add a key to ensure the contents will be reloaded accordingly: < router-view :key = \"$route.path\" /> 2.9 Avoid # in URL const router = new Router ({ mode : \"history\" , // ... Use router's history mode. 2.10 Nested Routes In FatherComponent.vue : <router-link :to=\"{ name: 'experienceDetails', params: { experienceSlug: experience.slug }, hash: '#experience' }\" > {{ experience.name }} </router-link> <router-view :key=\"$route.path\" /> In routes list in js file: { path : \"/destination/:slug\" , name : \"DestinationDetails\" , props : true , component : () => import ( /* webpackChunkName: \"DestinationDetails\"*/ \"./views/DestinationDetails\" ), children : [ { path : \":experienceSlug\" , /* attached behind the father's path */ name : \"experienceDetails\" , props : true , component : () => import ( /*webpackChunkName: \"ExperienceDetails\"*/ \"./views/ExperienceDetails\" ) } ], // ... In ChildrenComponent.vue : <script> import store from \"@/store.js\"; export default { props: { slug: { type: String, required: true }, experienceSlug: { type: String, required: true } }, computed: { destination() { return store.destinations.find( destination => destination.slug === this.slug ); }, experience() { return this.destination.experiences.find( experience => experience.slug === this.experienceSlug ); } } }; </script> 2.11 Transition Encapsulate the router-view: <transition name=\"fade\" mode=\"out-in\"> <router-view :key=\"$route.path\" /> </transition> <style> .fade-enter-active, .fade-leave-active { transition: opacity 0.3s; } .fade-enter, .fade-leave-to { opacity: 0; } </style> 2.12 404 Page Start with creating a component NotFound.vue : <template> <div> <h1>Not Found</h1> <p> Oops we couldn't find that page. Try going <router-link :to=\"{ name: 'home' }\">home</router-link> </p> </div> </template> Add it to router: { path : \"*\" , // Use asterisks to match any paths that is not matched by previous paths name : \"notFound\" , component : () => import ( /* webpackChunkName: \"NotFound\" */ \"./views/NotFound\" ) } We need to put it to the end, because the preceding paths have higher priority. To aviod a warning, we should use the code below. { path: \"/404\", alias: \"*\", name: \"notFound\", component: () => import(/* webpackChunkName: \"NotFound\" */ \"./views/NotFound\") } 2.12.1 Navigation Guards path : \"/destination/:slug\" , name : \"DestinationDetails\" , // ... beforeEnter : ( to , from , next ) => { const exists = store . destinations . find ( destination => destination . slug === to . params . slug ); if ( exists ) { next (); } else { next ({ name : \"notFound\" }); } } In case the usr request a non-existed path of a dynamic router, we need to use the Navigation Guards to redirect it to 404. More details: Navigation Guards","title":"Vue"},{"location":"Software%20Engineering/Vue/#vue","text":"","title":"Vue"},{"location":"Software%20Engineering/Vue/#1-basis","text":"Ref: https://www.vuemastery.com/courses/intro-to-vue-3","title":"1. Basis"},{"location":"Software%20Engineering/Vue/#11-indexhtml","text":"Import Vue.js in head tag via a CDN link to use Vue. Import main.js in body tag to import Vue app. Mount the app into DOM by a method mount that requires a DOM selector as an argument: < script > const mountedApp = app . mount ( '#app' ) </ script > Display the data by use div with specific id: < div id = \"app\" > < h1 > {{ product }} </ h1 > </ div >","title":"1.1 index.html"},{"location":"Software%20Engineering/Vue/#12-mainjs","text":"Create a Vue app: const app = Vue . createApp ({ data () { return { product : 'Socks' } }, methods : { update ( id ) { this . cartList . push ( id ) } } })","title":"1.2 main.js"},{"location":"Software%20Engineering/Vue/#13-computed-properties","text":"data () { computed : { image () { return this . variants [ this . selectedVariant ]. image } } } < img v-bind:src = \"image\" >","title":"1.3 Computed Properties"},{"location":"Software%20Engineering/Vue/#14-components","text":"","title":"1.4 Components"},{"location":"Software%20Engineering/Vue/#141-define","text":"components/ProductDisplay.js app . component ( 'product-display' , { props : { premium : { type : Boolean , required : true } }, template : /*html*/ ` <!-- ... --> ` , data () { return { } }, methods : { }, computed : { } })","title":"1.4.1 Define"},{"location":"Software%20Engineering/Vue/#142-import","text":"<!-- Import Components --> < script src = \"./components/ProductDisplay.js\" ></ script >","title":"1.4.2 Import"},{"location":"Software%20Engineering/Vue/#143-use","text":"< div id = \"app\" > < div class = \"nav-bar\" ></ div > < div class = \"cart\" > Cart({{ cart }}) </ div > < product-display ></ product-display > <!-- Use the component! --> < product-display ></ product-display > <!-- Use again! --> </ div >","title":"1.4.3 Use"},{"location":"Software%20Engineering/Vue/#144-props","text":"product-display component needs access to data premium in main.js in order to render contents corresponding with variables in main.js . In other words, it needs a custom attribute (a funnel) that we can feed this data into. So, we add custom attribute onto the product-display component where we\u2019re using it. < product-display :premium = \"premium\" ></ product-display > Notice how we\u2019re using the shorthand for v-bind so we can reactively receive the new value of premium if it updates (from true to false ). In ProductDisplay.js : app . component ( 'product-display' , { props : { premium : { type : Boolean , required : true } }, // ...","title":"1.4.4 Props"},{"location":"Software%20Engineering/Vue/#145-emitting-and-listening","text":"Something happened in one component, and we need to inform other components by emitting an event. methods : { addToCart () { this . $emit ( 'add-to-cart' ) }, // ... } < product-display :premium = \"premium\" @ add-to-cart = \"updateCart\" ></ product-display >","title":"1.4.5 Emitting and Listening"},{"location":"Software%20Engineering/Vue/#15-v-bind","text":"Dynamically bind an attribute to an expression. < img v-bind:src = \"image\" > <! -- src attribute bound to the image data --> < img :src = \"image\" > <! abbr./shorthand -->","title":"1.5 v-bind"},{"location":"Software%20Engineering/Vue/#16-v-if-v-show","text":"< p v-if = \"inStock\" > In Stock </ p > < p v-else > Out of Stock </ p > < p v-show = \"inStock\" > In Stock </ p > < p v-if = \"inventory > 10\" > In Stock </ p > < p v-else-if = \"inventory <= 10 && inventory > 0\" > Almost sold out! </ p > < p v-else > Out of Stock </ p >","title":"1.6 v-if / v-show"},{"location":"Software%20Engineering/Vue/#17-v-for","text":"In main.js we have: const app = Vue . createApp ({ data () { return { ... details : [ '50% cotton' , '30% wool' , '20% polyester' ] } } }) Then, < ul > < li v-for = \"detail in details\" > {{ detail }} </ li > </ ul >","title":"1.7 v-for"},{"location":"Software%20Engineering/Vue/#171-key-attribute","text":"Bind each DOM element to corresponding list item. data () { return { ... variants : [ { id : 2234 , color : 'green' }, { id : 2235 , color : 'blue' } ] } } < div v-for = \"variant in variants\" :key = \"variant.id\" > {{ variant.color }} </ div > By saying :key=\"variant.id\" , we\u2019re using the shorthand for v-bind to bind the variant\u2019s id to the key attribute.","title":"1.7.1 key attribute"},{"location":"Software%20Engineering/Vue/#18-event","text":"","title":"1.8 Event"},{"location":"Software%20Engineering/Vue/#181-click","text":"< button class = \"button\" v-on:click = \"logic to run\" > Add to Cart </ button > < button class = \"button\" v-on:click = \"cart += 1\" > Add to Cart </ button > < button class = \"button\" v-on:click = \"addToCart\" > Add to Cart </ button > const app = Vue . createApp ({ data () { return { cart : 0 , ... } }, methods : { addToCart () { this . cart += 1 } } })","title":"1.8.1 Click"},{"location":"Software%20Engineering/Vue/#182-mouseover","text":"< div v-for = \"variant in variants\" :key = \"variant.id\" @ mouseover = \"updateImage(variant.image)\" > {{ variant.color }} </ div >","title":"1.8.2 Mouseover"},{"location":"Software%20Engineering/Vue/#19-style","text":"Use v-bind to bind parameters of styles to variables: < div v-for = \"variant in variants\" :key = \"variant.id\" @ mouseover = \"updateImage(variant.image)\" class = \"color-circle\" :style = \"{ backgroundColor: variant.color }\" > </ div > Camel vs Kebab In JavaScript, - would have been interpreted by as a minus sign, so we can't use it as a variable's name. < div :style = \"{ backgroundColor: variant.color }></div> <div :style=\" { ' background-color ' : variant . color } ></ div > Bind a style to an entire style object. < div > :style=\"styles\" </ div > data () { return { styles : { color : 'red' } } }","title":"1.9 Style"},{"location":"Software%20Engineering/Vue/#110-class","text":"< button class = \"button\" :class = \"{ disabledButton: !inStock }\" :disabled = \"!inStock\" @ click = \"addToCart\" > Add to Cart </ button > If inStock == false , then this element will have double classes, \"button\" and \"disabledButton\". Note : The class that is defined later in CSS file can override the class that is defined before it when both of them are the classes of a single element. Ref: https://www.zhihu.com/question/28976590","title":"1.10 Class"},{"location":"Software%20Engineering/Vue/#1101-ternary-operators-inline","text":"< div > :class=\"[isActive ? activeClass : '']\" </ div > (The second class is empty, no class.)","title":"1.10.1 Ternary Operators (inline)"},{"location":"Software%20Engineering/Vue/#111-v-model","text":"When using a form, we need to bind from the template to the data. It is the reverse of v-bind . We want to bind these input fields to their respective data properties so that when the user fills out the form, we store their data locally. In ReviewForm.js , add the v-model directive: app . component ( 'review-form' , { template : /*html*/ `<form class=\"review-form\" @submit.prevent=\"onSubmit\"> <h3>Leave a review</h3> <label for=\"name\">Name:</label> <input id=\"name\" v-model=\"name\"> <label for=\"review\">Review:</label> <textarea id=\"review\" v-model=\"review\"></textarea> <label for=\"rating\">Rating:</label> <select id=\"rating\" v-model.number=\"rating\"> <option>5</option> <option>4</option> <option>3</option> <option>2</option> <option>1</option> </select> <input class=\"button\" type=\"submit\" value=\"Submit\"> </form>` , data () { return { name : '' , review : '' , rating : null }, methods : { onSubmit () { let productReview = { name : this . name , review : this . review , rating : this . rating , } this . $emit ( 'review-submitted' , productReview ) this . name = '' this . review = '' this . rating = null } } }) (Remember to import it.) ProductDisplay.js template : /*html*/ `<div class=\"product-display\"> <div class=\"product-container\"> ... </div> <review-form @review-submitted=\"addReview\"></review-form> </div>` }), data () { return { ... reviews : [] } }, methods : { ... addReview ( review ) { this . reviews . push ( review ) } }, Validation : ReviewForm.js methods : { onSubmit () { if ( this . name === '' || this . review === '' || this . rating === null || this . recommend === null ) { alert ( 'Review is incomplete. Please fill out every field.' ) return } let productReview = { name : this . name , review : this . review , rating : this . rating , recommend : this . recommend // solution } this . $emit ( 'review-submitted' , productReview ) this . name = '' this . review = '' this . rating = null this . recommend = null // solution } }","title":"1.11 v-model"},{"location":"Software%20Engineering/Vue/#2-vue-router","text":"Ref: Vue Router for Everyone","title":"2. Vue Router"},{"location":"Software%20Engineering/Vue/#21-create-a-project-with-vue-router-using-vue-cli","text":"Use nvm to install node. Use npm to install vue-cli. Use vue ui to create a new project with GUI.","title":"2.1 Create a project with Vue Router using Vue CLI"},{"location":"Software%20Engineering/Vue/#22-visual-structure","text":"App.vue # Single page application -- router-link -- router-view ---- components","title":"2.2 Visual Structure"},{"location":"Software%20Engineering/Vue/#23-single-file-components","text":"","title":"2.3 Single File Components"},{"location":"Software%20Engineering/Vue/#231-basic-structure-of-a-vue-file","text":"< template > < /template> < script > < /script> <!-- Add \"scoped\" attribute to limit CSS to this component only --> < style scoped > < /style>","title":"2.3.1 Basic Structure of a .vue file"},{"location":"Software%20Engineering/Vue/#24-create-routes","text":"Add nav-bar in main page: < script src = \"https://unpkg.com/vue/dist/vue.js\" ></ script > < script src = \"https://unpkg.com/vue-router/dist/vue-router.js\" ></ script > < div id = \"app\" > < h1 > Hello App! </ h1 > < p > <!-- use router-link component(already provided) for navigation. --> <!-- specify the link by passing the `to` prop. --> <!-- `<router-link>` will be rendered as an `<a>` tag by default --> < router-link to = \"/foo\" > Go to Foo </ router-link > < router-link to = \"/bar\" > Go to Bar </ router-link > </ p > <!-- route outlet --> <!-- component matched by the route will render here --> < router-view ></ router-view > </ div > Write routes in js: First, we have components. Second, we have a routes list, and third, we use it to make a router instance. Fourth, let app use the router and mount it. // 0. If using a module system (e.g. via vue-cli), import Vue and VueRouter // and then call `Vue.use(VueRouter)`. // 1. Define route components. // These can be imported from other files const Foo = { template : '<div>foo</div>' } const Bar = { template : '<div>bar</div>' } // 2. Define some routes // Each route should map to a component. The \"component\" can // either be an actual component constructor created via // `Vue.extend()`, or just a component options object. // We'll talk about nested routes later. const routes = [ { path : '/foo' , component : Foo }, { path : '/bar' , component : Bar } ] // 3. Create the router instance and pass the `routes` option // You can pass in additional options here, but let's // keep it simple for now. const router = new VueRouter ({ routes // short for `routes: routes` }) // 4. Create and mount the root instance. // Make sure to inject the router with the router option to make the // whole app router-aware. const app = new Vue ({ router }). $mount ( '#app' ) // Now the app has started! There are two ways to define routes of outsider components (like Single File Components, which can be identified by .vue ): In @/router/index.js : import Home from \"../views/Home.vue\" ; const routes = [ { path : \"/\" , name : \"Home\" , component : Home } ]; Recommended way (It is called lazy loading, which means the components will be loaded only when the user go to the link): const routes = [ { path : \"/about\" , name : \"About\" , component : () => import ( /* webpackChunkName: \"about\" */ \"../views/About.vue\" ) } ];","title":"2.4 Create routes"},{"location":"Software%20Engineering/Vue/#25-named-routes","text":"If we define name prop., we can link routes derectly into HTML without specifying paths: < router-link :to = \"/about\" > About Page </ router-link > <!-- can be changed to --> < router-link :to = \"{name: 'About'}\" > About Page </ router-link > So we can change paths later without refactoring HTML code.","title":"2.5 Named routes"},{"location":"Software%20Engineering/Vue/#26-operate-thisrouter","text":"Create a GoBack component: <template> <span class=\"go-back\"> <button @click=\"goBack\">go back</button> </span> </template> <script> export default { methods: { goBack() { return this.$router.go(-1); // there are many methods provided by `this.$router` } } }; </script> <style scoped> .go-back { display: flex; cursor: pointer; } button { border: 0; } </style>","title":"2.6 Operate this.$router"},{"location":"Software%20Engineering/Vue/#27-pass-params-into-routed-page","text":"< router-link :to = \"{ name: 'About', params: {id: data_list.id} }\" > About Page </ router-link > In About.vue : < template > < p > The id is: {{ this.$route.params.id }} </ p > </ template > Before and after the snippet above, we complete the index.js : import { createRouter , createWebHistory } from \"vue-router\" ; // snippet above // History??? const router = createRouter ({ history : createWebHistory ( process . env . BASE_URL ), routes }); // export echoes with import: // in main.js, we have `import router from \"./router\";` export default router ; // `export default {};` can be regarded as providing some interfaces in some js to other js programs","title":"2.7 Pass Params into routed page"},{"location":"Software%20Engineering/Vue/#28-dynamic-routes","text":"In HTML: < router-link :to = \"{ name: 'DestinationDetails', params: { slug: destination.slug } }\" > In router creating: { path: \"/destination/:slug\", name: \"DestinationDetails\", props: true, component: () => import(/* webpackChunkName: \"DestinationDetails\"*/ \"./views/DestinationDetails\"), }, In requested component's .vue file: export default { props : { slug : { type : String , required : true } }, computed : { destination () { return store . destinations . find ( destination => destination . slug === this . slug ); } } } If we visit router-link which is rendered to URL /destination/somewhere , /destination/:slug will be matched, and somewhere will be passed to variable slug through props . Then the computed variable destination will be the one which has the same slug value. Notice that at first we use a direct way like {{ this.$route.params.slug }} to use the params, but here we use props to pass it.","title":"2.8 Dynamic Routes"},{"location":"Software%20Engineering/Vue/#281-reload-issue-of-dynamic-routed-components","text":"If we load a components by dynamic routes, there will be some routers leading to the same components with different params. So if the user switch between these routes, Vue Router can't see the difference because they share the same component, and as a result the contents of <router-view> will not change. So we need to add a key to ensure the contents will be reloaded accordingly: < router-view :key = \"$route.path\" />","title":"2.8.1 Reload Issue of Dynamic Routed Components"},{"location":"Software%20Engineering/Vue/#29-avoid-in-url","text":"const router = new Router ({ mode : \"history\" , // ... Use router's history mode.","title":"2.9 Avoid # in URL"},{"location":"Software%20Engineering/Vue/#210-nested-routes","text":"In FatherComponent.vue : <router-link :to=\"{ name: 'experienceDetails', params: { experienceSlug: experience.slug }, hash: '#experience' }\" > {{ experience.name }} </router-link> <router-view :key=\"$route.path\" /> In routes list in js file: { path : \"/destination/:slug\" , name : \"DestinationDetails\" , props : true , component : () => import ( /* webpackChunkName: \"DestinationDetails\"*/ \"./views/DestinationDetails\" ), children : [ { path : \":experienceSlug\" , /* attached behind the father's path */ name : \"experienceDetails\" , props : true , component : () => import ( /*webpackChunkName: \"ExperienceDetails\"*/ \"./views/ExperienceDetails\" ) } ], // ... In ChildrenComponent.vue : <script> import store from \"@/store.js\"; export default { props: { slug: { type: String, required: true }, experienceSlug: { type: String, required: true } }, computed: { destination() { return store.destinations.find( destination => destination.slug === this.slug ); }, experience() { return this.destination.experiences.find( experience => experience.slug === this.experienceSlug ); } } }; </script>","title":"2.10 Nested Routes"},{"location":"Software%20Engineering/Vue/#211-transition","text":"Encapsulate the router-view: <transition name=\"fade\" mode=\"out-in\"> <router-view :key=\"$route.path\" /> </transition> <style> .fade-enter-active, .fade-leave-active { transition: opacity 0.3s; } .fade-enter, .fade-leave-to { opacity: 0; } </style>","title":"2.11 Transition"},{"location":"Software%20Engineering/Vue/#212-404-page","text":"Start with creating a component NotFound.vue : <template> <div> <h1>Not Found</h1> <p> Oops we couldn't find that page. Try going <router-link :to=\"{ name: 'home' }\">home</router-link> </p> </div> </template> Add it to router: { path : \"*\" , // Use asterisks to match any paths that is not matched by previous paths name : \"notFound\" , component : () => import ( /* webpackChunkName: \"NotFound\" */ \"./views/NotFound\" ) } We need to put it to the end, because the preceding paths have higher priority. To aviod a warning, we should use the code below. { path: \"/404\", alias: \"*\", name: \"notFound\", component: () => import(/* webpackChunkName: \"NotFound\" */ \"./views/NotFound\") }","title":"2.12 404 Page"},{"location":"Software%20Engineering/Vue/#2121-navigation-guards","text":"path : \"/destination/:slug\" , name : \"DestinationDetails\" , // ... beforeEnter : ( to , from , next ) => { const exists = store . destinations . find ( destination => destination . slug === to . params . slug ); if ( exists ) { next (); } else { next ({ name : \"notFound\" }); } } In case the usr request a non-existed path of a dynamic router, we need to use the Navigation Guards to redirect it to 404. More details: Navigation Guards","title":"2.12.1 Navigation Guards"},{"location":"Software%20Engineering/git/","text":"Git Ref: Git \u591a\u7528\u6237\u914d\u7f6e Unset global configuration: git config --global --unset user.name git config --global --unset user.email Check: git config --global --list 1. Use ssh key for git authentication Generate key file: ssh-keygen -t rsa -C \"colin@gmail.com\" # -C: comment to identify the key Add public key to GitHub ,GitLab, or etc. Add private key to localhost: ssh-add ~/.ssh/id_rsa_github Let's check: ssh-add -l 2. Multiple git user: Edit ~/.ssh/config : Host github HostName github.com User jitwxs IdentityFile ~/.ssh/id_rsa_github Host gitlab HostName gitlab.mygitlab.com User lemon IdentityFile ~/.ssh/id_rsa_gitlab Test: ssh -T git@github.com ssh -T git@gitlab.mygitlab.com 3. Set commit user name for repo git config --local user.name \"name\" git config --local user.email \"colin@gmail.com\" Check: git config --local --list","title":"Git"},{"location":"Software%20Engineering/git/#git","text":"Ref: Git \u591a\u7528\u6237\u914d\u7f6e Unset global configuration: git config --global --unset user.name git config --global --unset user.email Check: git config --global --list","title":"Git"},{"location":"Software%20Engineering/git/#1-use-ssh-key-for-git-authentication","text":"Generate key file: ssh-keygen -t rsa -C \"colin@gmail.com\" # -C: comment to identify the key Add public key to GitHub ,GitLab, or etc. Add private key to localhost: ssh-add ~/.ssh/id_rsa_github Let's check: ssh-add -l","title":"1. Use ssh key for git authentication"},{"location":"Software%20Engineering/git/#2-multiple-git-user","text":"Edit ~/.ssh/config : Host github HostName github.com User jitwxs IdentityFile ~/.ssh/id_rsa_github Host gitlab HostName gitlab.mygitlab.com User lemon IdentityFile ~/.ssh/id_rsa_gitlab Test: ssh -T git@github.com ssh -T git@gitlab.mygitlab.com","title":"2. Multiple git user:"},{"location":"Software%20Engineering/git/#3-set-commit-user-name-for-repo","text":"git config --local user.name \"name\" git config --local user.email \"colin@gmail.com\" Check: git config --local --list","title":"3. Set commit user name for repo"}]}